import pg from "pg"
const { Pool } = pg
import { Kysely, PostgresDialect, Generated, ColumnType } from "kysely"
import {
  GetSecretValueCommand,
  SecretsManagerClient,
} from "@aws-sdk/client-secrets-manager"

const secretsManager = new SecretsManagerClient({})

const { SecretString: secret } = await secretsManager.send(
  new GetSecretValueCommand({
    SecretId: process.env.RDS_SECRET_ARN,
  })
)
if (!secret) throw new Error("No secret found")

const credentials = JSON.parse(secret) as {
  username: string
  password: string
  engine: string
  host: string
  port: 5432
  dbname: string
  dbInstanceIdentifier: string
}

interface UserTable {
  // Columns that are generated by the database should be marked
  // using the `Generated` type. This way they are automatically
  // made optional in inserts and updates.
  id: Generated<string>

  email: string | null
  stripe_customer_id: string | null
  stripe_subscription_status: string | null

  // You can specify a different type for each operation (select, insert and
  // update) using the `ColumnType<SelectType, InsertType, UpdateType>`
  // wrapper. Here we define a column `modified_at` that is selected as
  // a `Date`, can optionally be provided as a `string` in inserts and
  // can never be updated:
  inserted_at: ColumnType<Date, string | undefined, string | undefined>
  updated_at: ColumnType<Date, string | undefined, string | undefined>
}

// Keys of this interface are table names.
interface Database {
  users: UserTable
}

// You'd create one of these when you start your app.
export const db = new Kysely<Database>({
  dialect: new PostgresDialect({
    pool: new Pool({
      host: process.env.RDS_PROXY_HOST,
      port: Number.parseInt(process.env.RDS_PROXY_PORT || "5432"),
      database: process.env.RDS_PROXY_DATABASE || credentials.dbname,
      user: process.env.RDS_PROXY_USER || credentials.username,
      password: process.env.RDS_PROXY_PASSWORD || credentials.password,
    }),
  }),
})
