import pg from "pg"
const { Pool } = pg

import { Kysely, PostgresDialect, Generated, ColumnType } from "kysely"
import {
  GetSecretValueCommand,
  SecretsManagerClient,
} from "@aws-sdk/client-secrets-manager"
import { GameraResponse } from "./gamera"

const secretsManager = new SecretsManagerClient({
  region: process.env.AWS_REGION || "us-east-1",
})

const { SecretString: secret } = await secretsManager.send(
  new GetSecretValueCommand({
    SecretId: process.env.POSTGRES_SECRET_ARN,
  })
)
if (!secret) throw new Error("No secret found")

const credentials = JSON.parse(secret) as {
  username: string
  password: string
  engine: string
  host: string
  port: 5432
  dbname: string
  dbInstanceIdentifier: string
}

interface UserTable {
  // Columns that are generated by the database should be marked
  // using the `Generated` type. This way they are automatically
  // made optional in inserts and updates.
  id: Generated<string>

  email: string | null
  stripe_customer_id: string | null
  stripe_subscription_status: string | null

  // You can specify a different type for each operation (select, insert and
  // update) using the `ColumnType<SelectType, InsertType, UpdateType>`
  // wrapper. Here we define a column `modified_at` that is selected as
  // a `Date`, can optionally be provided as a `string` in inserts and
  // can never be updated:
  inserted_at: ColumnType<Date, string | undefined, string | undefined>
  updated_at: ColumnType<Date, string | undefined, string | undefined>
}

interface AskTable {
  id: Generated<string>

  answer: GameraResponse
  answer_html: string | null
  answer_text: string | null
  answer_type: 'answer' | 'error' | 'prompt' | 'player_bio' | 'team_franchise_bio' | 'team_season_bio' | 'unknown'
  context_id: string
  count_total: number
  count_web_search: number
  count_web_view: number
  hex_background: string | null
  hex_foreground:  string | null
  image_url: string | null
  is_fantasy_query: boolean
  is_game_odds_query: boolean | null
  is_in_index: boolean
  is_in_index_pin: boolean | null
  is_in_suggests: boolean
  is_in_suggests_pin: boolean | null
  is_legacy_answer: boolean
  last_user_id: string | null
  last_visitor_id: string | null
  last_web_search_at: ColumnType<Date, string | undefined, string | undefined> | null
  query: string
  resource_path: string
  resource_query: string
  sid: Generated<number>

  inserted_at: ColumnType<Date, string | undefined, string | undefined>
  updated_at: ColumnType<Date, string | undefined, string | undefined>
}

interface AskUserTable {
  id: Generated<string>

  ask_id: string
  user_id: string

  inserted_at: ColumnType<Date, string | undefined, string | undefined>
  updated_at: ColumnType<Date, string | undefined, string | undefined>
}


interface AskEventTable {
  id: Generated<string>

  conversation_token: string
  query_raw: string
  ask_id: string
  question_id: string | null
  user_id: string | null
  visitor_id: string | null

  inserted_at: ColumnType<Date, string | undefined, string | undefined>
  updated_at: ColumnType<Date, string | undefined, string | undefined>
}

interface MusingTable {
  id: Generated<string>
  friendly_id: string
  league_id: string
  content_type: "latest-stats" | "user-generated" | "templated"
  publish_at: ColumnType<Date, string | undefined, string | undefined>

  layout_type: "bottom"
  text_markdown: string | null
  text_plain: string | null
  image_url: string | null
  video_url: string | null
  audio_answer_url: string | null
  video_should_replay: boolean
  foreground_rgba: { a: number; b: number; g: number; r: number }
  background_rgba: { a: number; b: number; g: number; r: number }
  author_id: string
  question_id: string
  is_editorial: boolean
  visitor_id: string | null
  expires_at: ColumnType<Date, string | undefined, string | undefined>
  template_id: string
  expired_early_at: ColumnType<Date, string | undefined, string | undefined>
  relevance_score_boost: number

  inserted_at: ColumnType<Date, string | undefined, string | undefined>
  updated_at: ColumnType<Date, string | undefined, string | undefined>
}

interface QuestionTable {
  id: Generated<string>
  friendly_id: string
  caption: string
  config: {}
  text: string
  answer: GameraResponse
  is_successful: boolean
  data_last_updated_at: ColumnType<Date, string | undefined, string | undefined>
  duration: number
  error: string
  handler: string
  preprocessed: string
  tokenized: string
  context_id: string
  user_id: string
  error_message: string
  text_clarification_for: string
  visitor_id: string
  sid: number
  ask_url: string
  input_conversation_token: string

  inserted_at: ColumnType<Date, string | undefined, string | undefined>
  updated_at: ColumnType<Date, string | undefined, string | undefined>
}

interface ExampleTable {
  id: Generated<string>
  conversation_token: string
  is_published: boolean
  position: number
  text: string
  type: "sitemap" | "onboarding" | "noteworthy"
  author_id: string
  league_id: string
  previous_question_id: string
  question_id: string
  template_id: string

  inserted_at: ColumnType<Date, string | undefined, string | undefined>
  updated_at: ColumnType<Date, string | undefined, string | undefined>
}

interface LeagueTable {
  id: Generated<string>

  gamera_actor_id: string
  begin_year: number | null
  end_year: number | null
  name: string
  image_url: string
  example_musing_id: string

  inserted_at: ColumnType<Date, string | undefined, string | undefined>
  updated_at: ColumnType<Date, string | undefined, string | undefined>
}

interface ContextTable {
  id: Generated<string>
  name: string
  inserted_at: ColumnType<Date, string | undefined, string | undefined>
  updated_at: ColumnType<Date, string | undefined, string | undefined>
}

interface PlayerTable {
  id: Generated<string>

  background_color_hex: string | null
  bust_image_url: string | null
  first_name: string
  foreground_color_hex: string | null
  last_name: string
  resource_id: string
  resource_path: string
  used_name: string
  league_id: string

  inserted_at: ColumnType<Date, string | undefined, string | undefined>
  updated_at: ColumnType<Date, string | undefined, string | undefined>
}

interface FinanceAskTable {
  id: Generated<string>

  answer: GameraResponse
  answer_text: string | null
  answer_type: 'answer' | 'asset' | 'error' | 'unknown'
  count_total: number
  count_web_search: number
  count_web_view: number
  is_in_index: boolean | null
  is_in_index_pin: boolean | null
  is_in_suggests: boolean | null
  is_in_suggests_pin: boolean | null
  last_user_id: string | null
  last_visitor_id: string | null
  last_web_search_at: ColumnType<Date, string | undefined, string | undefined> | null
  query: string
  sid: Generated<number> 

  inserted_at: ColumnType<Date, string | undefined, string | undefined>
  updated_at: ColumnType<Date, string | undefined, string | undefined>
}

export interface Database {
  users: UserTable
  asks: AskTable
  ask_events: AskEventTable
  asks_users: AskUserTable
  contexts: ContextTable
  finance_asks: FinanceAskTable
  musings: MusingTable
  questions: QuestionTable
  examples: ExampleTable
  leagues: LeagueTable
  players: PlayerTable
}

export const db = new Kysely<Database>({
  dialect: new PostgresDialect({
    pool: new Pool({
      host: process.env.POSTGRES_HOST,
      port: Number.parseInt(process.env.POSTGRES_PORT || "5432"),
      database: process.env.POSTGRES_DATABASE || credentials.dbname,
      user: process.env.POSTGRES_USER || credentials.username,
      password: process.env.POSTGRES_PASSWORD || credentials.password,
    }),
  }),
})
