---
import Container from '@components/container.astro'
import Header from '@components/header.astro'
import TeamRepresentatives from '@components/representatives.astro'
import AnswerShare from '@components/answer-share.astro'
import Explore from '@components/explore.astro'
import Layout from '@layouts/main.astro'
import {
  type GameraDomain,
  type GameraTeamFranchiseOverview,
  getDefaultTeamLogoUrl,
  getUrlForEntity,
} from '@statmuse/core/gamera'
import { getLeagueKeywords, type Metadata } from '@lib/meta'
import { imageForgeUrl } from '@statmuse/core/path'
import type { AnalyticsPageviewProperties } from '@lib/analytics'
import { getTeamFranchiseLatestSeason } from '@lib/team'
import AnswerCards from '@components/answer-cards.astro'
import { ANSWER_CARDS_ENABLED } from 'src/config'
import AditudeAdBanner from '@components/aditude-ad-banner.svelte'

interface Props {
  overview: GameraTeamFranchiseOverview
  page: 'overview' | 'stats' | 'schedule' | 'roster' | 'splits' | 'history'
  meta?: Metadata
  query?: string
  analytics?: AnalyticsPageviewProperties
}

const { overview, meta, query, analytics = {}, page: pageType } = Astro.props
const { bio } = overview

const domain = overview.domain.toUpperCase() as GameraDomain
const preferredDomain = domain.toLowerCase()
const teamPath = getUrlForEntity({
  type: 'teamSeason',
  domain,
  id: overview.teamId.toString(),
  display: bio.name,
})
const latestSeason = await getTeamFranchiseLatestSeason({
  context: Astro,
  domain,
  teamId: overview.teamId.toString(),
})

const yearId = latestSeason?.entity.id.split('/')[1]

const links = [
  ...(yearId
    ? [
        { text: 'Overview', href: `${teamPath}/${yearId}`, page: 'overview' },
        { text: 'Stats', href: `${teamPath}/stats/${yearId}`, page: 'stats' },
        domain === 'EPL'
          ? {
              text: 'Fixtures',
              href: `${teamPath}/fixtures/${yearId}`,
              page: 'fixtures',
            }
          : {
              text: 'Scores & Schedule',
              href: `${teamPath}/schedule/${yearId}`,
              page: 'schedule',
            },
        {
          text: 'Roster',
          href: `${teamPath}/roster/${yearId}`,
          page: 'roster',
        },
        {
          text: 'Splits',
          href: `${teamPath}/splits/${yearId}`,
          page: 'splits',
        },
      ]
    : []),
  { text: 'History', href: `${teamPath}/history`, page: 'history' },
]

const title = `${bio.name} Overview`
const description = `View ${bio.name} career stats, including game logs, splits, and more.`
const keywords = `${getLeagueKeywords(domain)} ${
  bio.name
} career stats statistics`

const facebook = {
  imageUrl: imageForgeUrl({
    url: bio.logoImageUrl,
    bgColor: domain === 'NFL' ? 'EFF4F8' : bio.colors?.backgroundColor,
    type: 'facebook',
  }),
}
const twitter = {
  imageUrl: imageForgeUrl({
    url: bio.logoImageUrl,
    bgColor: domain === 'NFL' ? 'EFF4F8' : bio.colors?.backgroundColor,
    type: 'twitter',
  }),
}
---

<Layout
  colors={bio.colors}
  meta={{
    title,
    description,
    keywords,
    facebook,
    twitter,
    pageType: 'team',
    ...(meta || {}),
  }}
  analytics={{
    query,
    is_search: true,
    page_domain:
      domain.toLowerCase() as AnalyticsPageviewProperties['page_domain'],
    page_type: 'team',
    disposition: overview.disposition,
    ...analytics,
  }}
>
  <Header
    {preferredDomain}
    {query}
    share={{
      type: 'profile',
      url: meta?.canonical?.url
        ? Astro.url.origin + meta.canonical.url
        : Astro.url.href,
    }}
  />
  <Container class="mb-2.5 bg-team-primary text-team-secondary overflow-hidden">
    <div
      class="relative flex flex-col md:flex-row md:flex-wrap justify-center items-center md:items-stretch"
    >
      <div class="flex-1 mt-5 mb-7">
        <h2 class="text-5xl font-semibold mb-2 text-center md:text-left">
          {bio.name}
        </h2>
        <div class="flex flex-wrap flex-col md:flex-row items-center gap-3">
          <div class="cursor-pointer relative">
            <select
              class="team-season-select appearance-none border-none bg-team-primary color-current font-semibold outline-none pr-3"
              data-cy-team-select
            >
              <option value="history" data-url={teamPath} selected="selected">
                History
              </option>
              {
                overview.seasons.map((season) => {
                  const url = getUrlForEntity(season.entity)
                  return (
                    <option value={season.entity.id} data-url={url}>
                      {season.name}
                    </option>
                  )
                })
              }
            </select>
            <div class="bg-team-secondary absolute bottom-0 w-full h-[1px]">
            </div>
            <div
              class="border-x-4 border-x-transparent border-t-4 border-t-team-secondary h-0 w-0 absolute right-0 top-1/2 -translate-y-[35%]"
            >
            </div>
          </div>
          <div class="whitespace-nowrap">
            {
              bio.conference && (
                <>
                  <span>{bio.conference}</span>
                  <span class="last:hidden" set:text=" • " />
                </>
              )
            }
            {
              bio.division && (
                <>
                  <span>{bio.division}</span>
                  <span class="last:hidden" set:text=" • " />
                </>
              )
            }
          </div>
        </div>
        {
          bio.recordSummaries && (
            <div class="hidden md:block mt-6">
              <div class="flex gap-5 mb-1 text-center">
                {bio.recordSummaries.map((summary) => (
                  <div>
                    <p class="uppercase">{summary.recordScope}</p>
                    <p class="text-3xl">{summary.winPercentage}</p>
                    <p class="text-[0.8rem] uppercase tracking-[0.07rem]">
                      {summary.record}
                    </p>
                  </div>
                ))}
              </div>
            </div>
          )
        }
        {
          bio.premierLeagueRecord && bio.premierLeagueTitles && (
            <div class="hidden md:block mt-6">
              <div class="flex gap-5 mb-1 text-center">
                <div>
                  <p class="uppercase">all time record</p>
                  <p class="text-3xl">{bio.premierLeagueRecord}</p>
                </div>
                <div>
                  <p class="uppercase">titles won</p>
                  <p class="text-3xl">{bio.premierLeagueTitles}</p>
                </div>
              </div>
            </div>
          )
        }
      </div>
      <TeamRepresentatives
        representatives={bio.franchiseRepresentatives}
        fallback={bio.logoImageUrl || getDefaultTeamLogoUrl(domain)}
        alt={`Logo for the ${bio.name}`}
      />
      <div class="absolute right-0 bottom-2.5 md:hidden" style="z-index: 1;">
        <div
          class="flex items-center justify-center w-12 h-12 rounded-full bg-team-primary"
        >
          <AnswerShare
            onlyIcon
            url={meta?.canonical?.url
              ? Astro.url.origin + meta.canonical.url
              : Astro.url.href}
          />
        </div>
      </div>
    </div>
  </Container>
  <div class="h-[50px] md:h-[90px] mb-1.5 flex justify-center items-center">
    <AditudeAdBanner client:only="svelte" />
  </div>
  {
    bio.recordSummaries && (
      <div class="md:hidden w-fit mx-auto my-5 text-team-primary">
        <div class="flex gap-5 mb-1 text-center">
          {bio.recordSummaries.map((summary) => (
            <div>
              <p class="uppercase">{summary.recordScope}</p>
              <p class="text-3xl">{summary.winPercentage}</p>
              <p class="text-[0.8rem] uppercase tracking-[0.07rem]">
                {summary.record}
              </p>
            </div>
          ))}
        </div>
      </div>
    )
  }
  {
    bio.premierLeagueRecord && bio.premierLeagueTitles && (
      <div class="md:hidden w-fit mx-auto my-5 text-team-primary">
        <div class="flex gap-5 mb-1 text-center">
          <div>
            <p class="uppercase">all time record</p>
            <p class="text-3xl">{bio.premierLeagueRecord}</p>
          </div>
          <div>
            <p class="uppercase">titles won</p>
            <p class="text-3xl">{bio.premierLeagueTitles}</p>
          </div>
        </div>
      </div>
    )
  }
  <Container>
    <div class="flex flex-nowrap overflow-auto mb-5 space-x-5">
      {
        links.map(({ href, text, page }) => (
          <a
            aria-current={page === pageType ? 'page' : undefined}
            class:list={{
              'text-3xl font-semibold shrink-0': true,
              'text-team-primary active': page === pageType,
              'text-black': page !== pageType,
            }}
            {href}
          >
            {text}
          </a>
        ))
      }
    </div>
    <div class="mb-1.5">
      <slot />
    </div>
    <Explore league={domain === 'EPL' ? 'fc' : preferredDomain} />
    {
      ANSWER_CARDS_ENABLED && (
        <AnswerCards league={domain === 'EPL' ? 'fc' : preferredDomain} />
      )
    }
  </Container>
</Layout>

<script>
  document.addEventListener('astro:page-load', () => {
    // do the thing
    const selects = document.querySelectorAll('select.team-season-select')
    selects.forEach((select) => {
      select.addEventListener('change', (event) => {
        const select = event.target as HTMLSelectElement
        if (!select.selectedOptions) return
        const newUrl = select.selectedOptions[0].dataset['url'] as string
        window.location.href = newUrl
      })
    })
  })
</script>
