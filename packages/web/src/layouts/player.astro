---
import Layout from '@layouts/base.astro'
import Explore from '@components/explore.astro'
import AnswerCards from '@components/answer-cards.astro'
import Nav from '@components/nav.astro'
import {
  getUrlForEntity,
  getDefaultBustImageUrl,
  tokensToText,
  type GameraPlayerBio,
} from '@statmuse/core/gamera'
import { getLeagueKeywords } from '@lib/meta'
import { imageForgeUrl } from '@statmuse/core/path'
import type { AnalyticsPageviewProperties } from '@lib/analytics'
import { leagueToDomain, type LeagueParam } from '@lib/params'
import { ANSWER_CARDS_ENABLED } from 'src/config'
import AditudeAdBanner from '@components/aditude-ad-banner.svelte'
import type { NavLink } from 'src/types'
import type { ComponentProps } from 'astro/types'

interface Props extends ComponentProps<typeof Layout> {
  bio: GameraPlayerBio
  page: 'overview' | 'stats' | 'game-log' | 'matches' | 'splits' | 'bio'
  league: LeagueParam
}

const {
  bio,
  meta,
  query,
  league,
  page,
  parameters,
  analytics = {},
} = Astro.props

const domain = leagueToDomain(league)
const teamUrl = bio.team ? getUrlForEntity(bio.team.entity) : ''
const bustImageUrl = bio.bustImageUrl || getDefaultBustImageUrl(domain)
const bustImageAlt = bio.bustImageUrl?.includes('silhouette')
  ? `Illustrated silhouette of a player wearing the ${bio.team?.name} uniform`
  : `Illustration of ${bio.usedName} wearing the ${bio.team?.name} uniform`

const canonical = { url: Astro.url.pathname + Astro.url.search }
const playerPath = getUrlForEntity({
  type: 'player',
  domain,
  id: bio.playerId.toString(),
  display: bio.usedName,
})

const links: NavLink[] = [
  { text: 'Overview', href: playerPath, param: 'overview' },
  { text: 'Stats', href: `${playerPath}/career-stats`, param: 'stats' },
  league === 'fc'
    ? { text: 'Matches', param: 'matches' }
    : { text: 'Games', param: 'game-log' },
  { text: 'Splits', param: 'splits' },
  { text: 'Bio', param: 'bio' },
]

const title = `${bio.usedName} - ${bio.team?.name || bio.domain} ${
  bio.position || 'Player'
}`
const description = bio.summaryNlg ? tokensToText(bio.summaryNlg) : undefined
const keywords = `${getLeagueKeywords(domain)} ${
  bio.usedName
} career stats statistics`

const facebook = {
  imageUrl: imageForgeUrl({
    url: bustImageUrl,
    bgColor: bio.team?.colors?.backgroundColor ?? '#FFF',
    type: 'facebook',
  }),
}
const twitter = {
  imageUrl: imageForgeUrl({
    url: bustImageUrl,
    bgColor: bio.team?.colors?.backgroundColor ?? '#FFF',
    type: 'twitter',
  }),
}

const preferredDomain = domain.toLowerCase()
const shareUrl = meta?.canonical?.url
  ? Astro.url.origin + meta.canonical.url
  : Astro.url.href

const navProps: ComponentProps<typeof Nav> = {
  teamColors: true,
  links: links,
  selected: page,
  href: (p) => `${playerPath}/${p}`,
}
---

<Layout
  colors={bio.team?.colors || { background: '#00c1d8', foreground: '#fff' }}
  meta={{
    title,
    description,
    keywords,
    canonical,
    facebook,
    twitter,
    pageType: 'player',
    ...(meta || {}),
  }}
  analytics={{
    query,
    is_search: true,
    page_domain: preferredDomain as AnalyticsPageviewProperties['page_domain'],
    page_type: 'player',
    disposition: bio.disposition,
    ...analytics,
  }}
  {preferredDomain}
  {query}
  {navProps}
  {parameters}
  hero={{
    content: bio.usedName,
    imageUrl: bustImageUrl,
    imageAlt: bustImageAlt,
    affiliation: bio.team?.nickname || bio.team?.name,
    affiliationUrl: teamUrl,
    share: {
      type: 'profile',
      url: shareUrl,
    },
  }}
  class={Astro.props.class}
>
  <div
    class="md:hidden h-[50px] md:h-[90px] mb-1.5 flex justify-center items-center"
  >
    <AditudeAdBanner
      client:only="svelte"
      divId="pb-slot-anchor"
      slotId="pb-slot-anchor"
      placeholderClass="w-[320px] md:w-[728px] h-[50px] md:h-[90px]"
      onlyMobile
    />
  </div>
  <div class="flex flex-col gap-3">
    <slot />
  </div>
  <Explore {league} additionalQuestions={bio.additionalQuestions} />
  {
    ANSWER_CARDS_ENABLED && (
      <AnswerCards {domain} teamId={bio.team?.entity.id.split('/')[0]} />
    )
  }
</Layout>
