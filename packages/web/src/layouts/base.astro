---
import '@styles/global.css'
import type { Metadata } from '@lib/meta'
import { Config } from 'sst/node/config'
import type { AnalyticsPageviewProperties } from '@lib/analytics'
import CookieConsent from '@components/cookie-consent.svelte'
import { ViewTransitions } from 'astro:transitions'
import AditudeAdBanner from '@components/aditude-ad-banner.svelte'

interface Props {
  meta?: Metadata
  colors?: {
    foreground?: string
    background?: string
    foregroundColor?: string
    backgroundColor?: string
  }
  analytics?: AnalyticsPageviewProperties
  enableAdBanner?: boolean
}

const { meta, colors, analytics = {}, enableAdBanner = true } = Astro.props
const foreground = colors?.foreground || colors?.foregroundColor || '#fff'
const background = colors?.background || colors?.backgroundColor || '#00c1d8'

const style = colors
  ? `:root {
        --team-primary-color: ${background};
        --team-secondary-color: ${foreground};
      }
      .dynamic-color {
        background-color: ${background};
        color: ${foreground};
        fill: ${foreground};
      }
      .loading-bar-animate {
        background-color: initial;
      }
    `
  : undefined

const title = meta?.title
  ? `${meta.title} | StatMuse`
  : 'StatMuse | Search StatMuse, save time.'
const description =
  meta?.description ||
  'Instant answers to your NBA, NFL, NHL, MLB, Premier League and PGA questions. Stats, scores, schedules, odds, fantasy and more â€” just ask.'
const keywords =
  meta?.keywords ||
  'StatMuse, sports, stats, search, sports search, sports information, sports stats, statistics, fantasy stats, advanced stats, betting information, NBA stats, NFL stats, NHL stats, PGA stats, MLB stats, Premier League stats'
const defaultImageUrl = 'https://www.statmuse.com/images/sm-meta-banner-2.jpg'

const isError = (status?: number) => {
  if (!status) return true
  if (status >= 400) return true
  return false
}

const analyticsProperties = Object.assign(
  {
    is_error: isError(Astro.response.status),
    is_search: false,
    method: Astro.request.method,
    origin: 'web',
    origin_scope: 'browser',
    page_domain: 'unknown',
    page_type: 'unknown',
    query: undefined,
  },
  analytics,
)

const canonicalUrl = meta?.canonical
  ? meta.canonical.url.startsWith('http')
    ? meta.canonical.url
    : new URL(meta.canonical.url, Astro.url.origin).href
  : undefined
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="color-scheme" content="light only" />
    <meta content="width=device-width, initial-scale=1.0" name="viewport" />
    <meta name="format-detection" content="telephone=no" />
    <meta name="generator" content={Astro.generator} />
    <meta name="apple-itunes-app" content="app-id=1234654160" />
    <slot name="head">
      <title>{title}</title>
      <meta name="description" content={description} />
      <meta name="keywords" content={keywords} />
      <meta property="fb:app_id" content="915991831757165" />
      <meta property="og:site_name" content="StatMuse" />
      <meta property="og:title" content={meta?.facebook?.title || title} />
      <meta
        property="og:description"
        content={meta?.facebook?.description || description}
      />
      <meta property="og:locale" content="en_US" />
      <meta
        property="og:image"
        content={meta?.facebook?.imageUrl || defaultImageUrl}
      />
      <meta property="twitter:site" content="@StatMuse" />
      <meta property="twitter:creator" content="@StatMuse" />
      <meta property="twitter:title" content={meta?.twitter?.title || title} />
      <meta
        property="twitter:description"
        content={meta?.twitter?.description || description}
      />
      <meta property="twitter:card" content="summary_large_image" />
      <meta
        property="twitter:image"
        content={meta?.twitter?.imageUrl || defaultImageUrl}
      />
      {meta?.pageType && <meta name="page-type" content={meta?.pageType} />}
    </slot>
    {
      meta?.canonical && (
        <link
          rel="canonical"
          href={canonicalUrl}
          data-should-rewrite={meta.canonical.rewrite?.toString()}
        />
      )
    }
    <ViewTransitions />
    <link
      href="https://www.statmuse.com/opensearch.xml"
      rel="search"
      title="StatMuse Search"
      type="application/opensearchdescription+xml"
    />
    <link
      href="https://www.statmuse.com/favicon.ico"
      rel="icon"
      type="image/x-icon"
    />

    <!-- Set css variables for dynamic colors -->
    {style && <style set:html={style} />}

    <!-- Font face definitions -->
    <style is:inline>
      @font-face {
        font-family: 'canada-type-gibson';
        src:
          url('/fonts/Gibson-Light.woff2') format('woff2'),
          url('/fonts/Gibson-Light.woff') format('woff'),
          url('/fonts/Gibson-Light.otf') format('opentype');
        font-display: auto;
        ascent-override: 85%;
        font-style: normal;
        font-weight: 200;
        font-stretch: normal;
      }

      @font-face {
        font-family: 'canada-type-gibson';
        src:
          url('/fonts/Gibson-Light-Italic.woff2') format('woff2'),
          url('/fonts/Gibson-Light-Italic.woff') format('woff'),
          url('/fonts/Gibson-Light-Italic.otf') format('opentype');
        font-display: auto;
        ascent-override: 85%;
        font-style: italic;
        font-weight: 200;
        font-stretch: normal;
      }

      @font-face {
        font-family: 'canada-type-gibson';
        src:
          url('/fonts/Gibson.woff2') format('woff2'),
          url('/fonts/Gibson.woff') format('woff'),
          url('/fonts/Gibson.otf') format('opentype');
        font-display: auto;
        ascent-override: 85%;
        font-style: normal;
        font-weight: 400;
        font-stretch: normal;
      }

      @font-face {
        font-family: 'canada-type-gibson';
        src:
          url('/fonts/Gibson-Italic.woff2') format('woff2'),
          url('/fonts/Gibson-Italic.woff') format('woff'),
          url('/fonts/Gibson-Italic.otf') format('opentype');
        font-display: auto;
        ascent-override: 85%;
        font-style: italic;
        font-weight: 400;
        font-stretch: normal;
      }

      @font-face {
        font-family: 'canada-type-gibson';
        src:
          url('/fonts/Gibson-SemiBold.woff2') format('woff2'),
          url('/fonts/Gibson-SemiBold.woff') format('woff'),
          url('/fonts/Gibson-SemiBold.otf') format('opentype');
        font-display: auto;
        ascent-override: 85%;
        font-style: normal;
        font-weight: 600;
        font-stretch: normal;
      }

      @font-face {
        font-family: 'canada-type-gibson';
        src:
          url('/fonts/Gibson-SemiBold-Italic.woff2') format('woff2'),
          url('/fonts/Gibson-SemiBold-Italic.woff') format('woff'),
          url('/fonts/Gibson-SemiBold-Italic.otf') format('opentype');
        font-display: auto;
        ascent-override: 85%;
        font-style: italic;
        font-weight: 600;
        font-stretch: normal;
      }

      @font-face {
        font-family: 'canada-type-gibson';
        src:
          url('/fonts/Gibson-Bold.woff2') format('woff2'),
          url('/fonts/Gibson-Bold.woff') format('woff'),
          url('/fonts/Gibson-Bold.otf') format('opentype');
        font-display: auto;
        ascent-override: 85%;
        font-style: normal;
        font-weight: 800;
        font-stretch: normal;
      }

      @font-face {
        font-family: 'canada-type-gibson';
        src:
          url('/fonts/Gibson-Bold-Italic.woff2') format('woff2'),
          url('/fonts/Gibson-Bold-Italic.woff') format('woff'),
          url('/fonts/Gibson-Bold-Italic.otf') format('opentype');
        font-display: auto;
        ascent-override: 85%;
        font-style: italic;
        font-weight: 800;
        font-stretch: normal;
      }

      @font-face {
        font-family: 'canada-type-gibson-fallback';
        src: local('Arial');
        ascent-override: 89.13%;
        descent-override: 22.28%;
        line-gap-override: 0%;
        size-adjust: 89.76%;
      }
    </style>

    <!-- Preload custom fonts -->
    <link
      rel="preload"
      href="/fonts/Gibson.woff2"
      as="font"
      type="font/woff2"
      crossorigin="anonymous"
    />
    <link
      rel="preload"
      href="/fonts/Gibson-SemiBold.woff2"
      as="font"
      type="font/woff2"
      crossorigin="anonymous"
    />

    <slot name="tradingview" />

    <meta name="analytics" content={Config.SEGMENT_WRITE_KEY} />
    <meta name="cdn-proxy-url" content={import.meta.env.PUBLIC_ANALYTICS_CDN_PROXY_URL} />
    <meta name="api-proxy-url" content={import.meta.env.PUBLIC_ANALYTICS_API_PROXY_URL} />
    <meta
      name="analytics:event:properties"
      content={JSON.stringify(analyticsProperties)}
    />
    {
      import.meta.env.PROD && (
        <Fragment>
          <script is:inline async type="text/partytown" src="/scripts/aditude-cmp.js" />
          <script is:inline async type="text/partytown" src="/scripts/prebid-load.js" />
          <script is:inline async type="text/partytown">
            const writeKey = document.querySelector('meta[name="analytics"]').content
            const cdnProxyUrl = document.querySelector('meta[name="cdn-proxy-url"]').content
            const apiProxyUrl = document.querySelector('meta[name="api-proxy-url"]').content

            !function(){
              // prettier-ignore
              var i="analytics",analytics=window[i]=window[i]||[];if(!analytics.initialize)if(analytics.invoked)window.console&&console.error&&console.error("Segment snippet included twice.");else{analytics.invoked=!0;analytics.methods=["trackSubmit","trackClick","trackLink","trackForm","pageview","identify","reset","group","track","ready","alias","debug","page","screen","once","off","on","addSourceMiddleware","addIntegrationMiddleware","setAnonymousId","addDestinationMiddleware","register"];analytics.factory=function(e){return function(){if(window[i].initialized)return window[i][e].apply(window[i],arguments);var n=Array.prototype.slice.call(arguments);if(["track","screen","alias","group","page","identify"].indexOf(e)>-1){var c=document.querySelector("link[rel='canonical']");n.push({__t:"bpc",c:c&&c.getAttribute("href")||void 0,p:location.pathname,u:location.href,s:location.search,t:document.title,r:document.referrer})}n.unshift(e);analytics.push(n);return analytics}};for(var n=0;n<analytics.methods.length;n++){var key=analytics.methods[n];analytics[key]=analytics.factory(key)}analytics.load=function(key,n){var t=document.createElement("script");t.type="text/javascript";t.async=!0;t.setAttribute("data-global-segment-analytics-key",i);t.src="https://" + cdnProxyUrl + "/analytics.js/v1/" + key + "/analytics.min.js";var r=document.getElementsByTagName("script")[0];r.parentNode.insertBefore(t,r);analytics._loadOptions=n};analytics._writeKey=writeKey;;analytics.SNIPPET_VERSION="5.2.0";
              analytics.load(writeKey, { integrations: { "Segment.io": { apiHost: apiProxyUrl + "/v1" }}});
              analytics.page();

              const botRegex = /(Googlebot\/|Googlebot-Mobile|Googlebot-Image|Googlebot-News|Googlebot-Video|AdsBot-Google([^-]|$)|AdsBot-Google-Mobile|Feedfetcher-Google|Mediapartners-Google|Mediapartners \(Googlebot\)|APIs-Google|Google-InspectionTool|Storebot-Google|GoogleOther|bingbot|Slurp|[wW]get|LinkedInBot|Python-urllib|python-requests|aiohttp|httpx|libwww-perl|httpunit|nutch|Go-http-client|phpcrawl|msnbot|jyxobot|FAST-WebCrawler|FAST Enterprise Crawler|BIGLOTRON|Teoma|convera|seekbot|Gigabot|Gigablast|exabot|ia_archiver|GingerCrawler|webmon |HTTrack|grub.org|UsineNouvelleCrawler|antibot|netresearchserver|speedy|fluffy|findlink|msrbot|panscient|yacybot|AISearchBot|ips-agent|tagoobot|MJ12bot|woriobot|yanga|buzzbot|mlbot|yandex\.com\/bots|purebot|Linguee Bot|CyberPatrol|voilabot|Baiduspider|citeseerxbot|spbot|twengabot|postrank|Turnitin|scribdbot|page2rss|sitebot|linkdex|Adidxbot|ezooms|dotbot|Mail.RU_Bot|discobot|heritrix|findthatfile|europarchive.org|NerdByNature.Bot|sistrix crawler|Ahrefs(Bot|SiteAudit)|fuelbot|CrunchBot|IndeedBot|mappydata|woobot|ZoominfoBot|PrivacyAwareBot|Multiviewbot|SWIMGBot|Grobbot|eright|Apercite|semanticbot|Aboundex|domaincrawler|wbsearchbot|summify|CCBot|edisterbot|seznambot|ec2linkfinder|gslfbot|aiHitBot|intelium_bot|facebookexternalhit|Yeti|RetrevoPageAnalyzer|lb-spider|Sogou|lssbot|careerbot|wotbox|wocbot|ichiro|DuckDuckBot|lssrocketcrawler|drupact|webcompanycrawler|acoonbot|openindexspider|gnam gnam spider|web-archive-net.com.bot|backlinkcrawler|coccoc|integromedb|content crawler spider|toplistbot|it2media-domain-crawler|ip-web-crawler.com|siteexplorer.info|elisabot|proximic|changedetection|arabot|WeSEE:Search|niki-bot|CrystalSemanticsBot|rogerbot|360Spider|psbot|InterfaxScanBot|CC Metadata Scaper|g00g1e.net|GrapeshotCrawler|urlappendbot|brainobot|fr-crawler|binlar|SimpleCrawler|Twitterbot|cXensebot|smtbot|bnf.fr_bot|A6-Indexer|ADmantX|Facebot|OrangeBot\/|memorybot|AdvBot|MegaIndex|SemanticScholarBot|ltx71|nerdybot|xovibot|BUbiNG|Qwantify|archive.org_bot|Applebot|TweetmemeBot|crawler4j|findxbot|S[eE][mM]rushBot|yoozBot|lipperhey|Y!J|Domain Re-Animator Bot|AddThis|Screaming Frog SEO Spider|MetaURI|Scrapy|Livelap[bB]ot|OpenHoseBot|CapsuleChecker|collection@infegy.com|IstellaBot|DeuSu\/|betaBot|Cliqzbot\/|MojeekBot\/|netEstate NE Crawler|SafeSearch microdata crawler|Gluten Free Crawler\/|Sonic|Sysomos|Trove|deadlinkchecker|Slack-ImgProxy|Embedly|RankActiveLinkBot|iskanie|SafeDNSBot|SkypeUriPreview|Veoozbot|Slackbot|redditbot|datagnionbot|Google-Adwords-Instant|adbeat_bot|WhatsApp|contxbot|pinterest.com.bot|electricmonk|GarlikCrawler|BingPreview\/|vebidoobot|FemtosearchBot|Yahoo Link Preview|MetaJobBot|DomainStatsBot|mindUpBot|Daum\/|Jugendschutzprogramm-Crawler|Xenu Link Sleuth|Pcore-HTTP|moatbot|KosmioBot|[pP]ingdom|AppInsights|PhantomJS|Gowikibot|PiplBot|Discordbot|TelegramBot|Jetslide|newsharecounts|James BOT|Bark[rR]owler|TinEye|SocialRankIOBot|trendictionbot|Ocarinabot|epicbot|Primalbot|DuckDuckGo-Favicons-Bot|GnowitNewsbot|Leikibot|LinkArchiver|YaK\/|PaperLiBot|Digg Deeper|dcrawl|Snacktory|AndersPinkBot|Fyrebot|EveryoneSocialBot|Mediatoolkitbot|Luminator-robots|ExtLinksBot|SurveyBot|NING\/|okhttp|Nuzzel|omgili|PocketParser|YisouSpider|um-LN|ToutiaoSpider|MuckRack|Jamie's Spider|AHC\/|NetcraftSurveyAgent|Laserlikebot|^Apache-HttpClient|AppEngine-Google|Jetty|Upflow|Thinklab|Traackr.com|Twurly|Mastodon|http_get|DnyzBot|botify|007ac9 Crawler|BehloolBot|BrandVerity|check_http|BDCbot|ZumBot|EZID|ICC-Crawler|ArchiveBot|^LCC |filterdb.iss.net\/crawler|BLP_bbot|BomboraBot|Buck\/|Companybook-Crawler|Genieo|magpie-crawler|MeltwaterNews|Moreover|newspaper\/|ScoutJet|(^| )sentry\/|StorygizeBot|UptimeRobot|OutclicksBot|seoscanners|Hatena|Google Web Preview|MauiBot|AlphaBot|SBL-BOT|IAS crawler|adscanner|Netvibes|acapbot|Baidu-YunGuanCe|bitlybot|blogmuraBot|Bot.AraTurka.com|bot-pge.chlooe.com|BoxcarBot|BTWebClient|ContextAd Bot|Digincore bot|Disqus|Feedly|Fetch\/|Fever|Flamingo_SearchEngine|FlipboardProxy|g2reader-bot|G2 Web Services|imrbot|K7MLWCBot|Kemvibot|Landau-Media-Spider|linkapediabot|vkShare|Siteimprove.com|BLEXBot\/|DareBoost|ZuperlistBot\/|Miniflux\/|Feedspot|Diffbot\/|SEOkicks|tracemyfile|Nimbostratus-Bot|zgrab|PR-CY.RU|AdsTxtCrawler|Datafeedwatch|Zabbix|TangibleeBot|google-xrawler|axios|Amazon CloudFront|Pulsepoint|CloudFlare-AlwaysOnline|Google-Structured-Data-Testing-Tool|WordupInfoSearch|WebDataStats|HttpUrlConnection|Seekport Crawler|ZoomBot|VelenPublicWebCrawler|MoodleBot|jpg-newsbot|outbrain|W3C_Validator|Validator\.nu|W3C-checklink|W3C-mobileOK|W3C_I18n-Checker|FeedValidator|W3C_CSS_Validator|W3C_Unicorn|Google-PhysicalWeb|Blackboard|ICBot\/|BazQux|Twingly|Rivva|Experibot|awesomecrawler|Dataprovider.com|GroupHigh\/|theoldreader.com|AnyEvent|Uptimebot\.org|Nmap Scripting Engine|2ip.ru|Clickagy|Caliperbot|MBCrawler|online-webceo-bot|B2B Bot|AddSearchBot|Google Favicon|HubSpot|Chrome-Lighthouse|HeadlessChrome|CheckMarkNetwork\/|www\.uptime\.com|Streamline3Bot\/|serpstatbot\/|MixnodeCache\/|^curl|SimpleScraper|RSSingBot|Jooblebot|fedoraplanet|Friendica|NextCloud|Tiny Tiny RSS|RegionStuttgartBot|Bytespider|Datanyze|Google-Site-Verification|TrendsmapResolver|tweetedtimes|NTENTbot|Gwene|SimplePie|SearchAtlas|Superfeedr|feedbot|UT-Dorkbot|Amazonbot|SerendeputyBot|Eyeotabot|officestorebot|Neticle Crawler|SurdotlyBot|LinkisBot|AwarioSmartBot|AwarioRssBot|RyteBot|FreeWebMonitoring SiteChecker|AspiegelBot|NAVER Blog Rssbot|zenback bot|SentiBot|Domains Project\/|Pandalytics|VKRobot|bidswitchbot|tigerbot|NIXStatsbot|Atom Feed Robot|[Cc]urebot|PagePeeker\/|Vigil\/|rssbot\/|startmebot\/|JobboerseBot|seewithkids|NINJA bot|Cutbot|BublupBot|BrandONbot|RidderBot|Taboolabot|Dubbotbot|FindITAnswersbot|infoobot|Refindbot|BlogTraffic\/\d\.\d+ Feed-Fetcher|SeobilityBot|Cincraw|Dragonbot|VoluumDSP-content-bot|FreshRSS|BitBot|^PHP-Curl-Class|Google-Certificates-Bridge|centurybot|Viber|e\.ventures Investment Crawler|evc-batch|PetalBot|virustotal|(^| )PTST\/|minicrawler|Cookiebot|trovitBot|seostar\.co|IonCrawl|Uptime-Kuma|SeekportBot|FreshpingBot|Feedbin|CriteoBot|Snap URL Preview Service|Better Uptime Bot|RuxitSynthetic|Google-Read-Aloud|Valve\/Steam|OdklBot\/|GPTBot|YandexRenderResourcesBot\/|LightspeedSystemsCrawler|ev-crawler\/|BitSightBot\/|woorankreview\/|Google-Safety|AwarioBot|DataForSeoBot|Linespider|WellKnownBot|A Patent Crawler|StractBot|search\.marginalia\.nu|YouBot|Nicecrawler|Neevabot|BrightEdge Crawler|SiteCheckerBotCrawler|TombaPublicWebCrawler|CrawlyProjectCrawler|KomodiaBot|KStandBot|CISPA Webcrawler|MTRobot|hyscore.io|AlexandriaOrgBot|2ip bot|Yellowbrandprotectionbot|SEOlizer|vuhuvBot|INETDEX-BOT|Synapse|t3versionsBot|deepnoc|Cocolyzebot|hypestat|ReverseEngineeringBot|sempi.tech|Iframely|MetaInspector|node-fetch|lkxscan|python-opengraph|OpenGraphCheck|developers.google.com\/\+\/web\/snippet|SenutoBot|MaCoCu|NewsBlur|inoreader|NetSystemsResearch|PageThing|Statbot\/)/
              const isBotTest = (useragent) => botRegex.test(useragent)

              const getOrigin = (userAgent) => {
                const isBot = isBotTest(userAgent)
                if (isBot && userAgent.includes('Google')) return 'web.googlebot'
                if (isBot) return 'web.bot'
                return 'web'
              }

              const flattenObj = (key, obj) => {
                return !obj
                  ? {}
                  : Object.entries(obj).reduce((x, [k, v]) => {
                      return {
                        ...x,
                        [`${key}.${k}`]: v,
                      }
                    }, {})
              }

              const getReferenceIds = (contentReference) => {
                if (!contentReference) return {}
                const { questionTags, answerTags } = contentReference

                if (
                  questionTags?.playerIds ||
                  questionTags?.teamIds ||
                  answerTags?.playerIds ||
                  answerTags?.teamIds
                ) {
                  return {
                    players: JSON.stringify(
                      Array.from(
                        new Set([
                          ...(questionTags?.playerIds ? questionTags.playerIds : []),
                          ...(answerTags?.playerIds ? answerTags.playerIds : []),
                        ]),
                      ),
                    ),
                    teams: JSON.stringify(
                      Array.from(
                          new Set([
                            ...(questionTags?.teamIds ? questionTags.teamIds : []),
                          ...(answerTags?.teamIds ? answerTags.teamIds : []),
                        ]),
                      ),
                    ),
                  }
                }

                if (questionTags?.assetIds || answerTags?.assetIds) {
                  return {
                    assets: JSON.stringify(
                        Array.from(
                          new Set([
                            ...(questionTags?.assetIds ? questionTags.assetIds : []),
                            ...(answerTags?.assetIds ? answerTags.assetIds : []),
                          ]),
                        ),
                      ),
                    }
                  }
              }

              const getSubjectItems = (subject) => {
                if (!subject) return {}
                return {
                  subject_image: subject.imageUrl,
                  subject_background_color: subject.colors.background,
                  subject_foreground_color: subject.colors.foreground,
                }
              }

              // custom Pageview event
              const eventProps = document.querySelector('meta[name="analytics:event:properties"]').content

              if (eventProps) {
                const {
                  disposition,
                  tokenizationScore,
                  contentReference,
                  subject,
                  ...props
                } = JSON.parse(eventProps)
                analytics.track('Pageview', {
                  ...props,
                  ...flattenObj('disposition', disposition),
                  ...flattenObj('tokenizationScore', tokenizationScore),
                  ...getReferenceIds(contentReference),
                  ...getSubjectItems(subject),
                  origin: getOrigin(navigator.userAgent),
                })

                var tude = window.tude || { cmd: [] }
                tude.cmd.push(function () {
                  tude.setPageTargeting({
                    pagetype: props.page_domain + '-' + props.page_type,
                  })
                })
              }

              // hack: 'astro:page-load' does not fire consistently
              // TODO: move into astro:page-load callback
              document.addEventListener('astro:after-swap', async () => {
                // default page tracking
                analytics.page()

                // custom Pageview event
                const eventProps = document.querySelector('meta[name="analytics:event:properties"]').content

                if (eventProps) {
                  const {
                    disposition,
                    tokenizationScore,
                    contentReference,
                    subject,
                    ...props
                  } = JSON.parse(eventProps)
                  analytics.track('Pageview', {
                    ...props,
                    ...flattenObj('disposition', disposition),
                    ...flattenObj('tokenizationScore', tokenizationScore),
                    ...getReferenceIds(contentReference),
                    ...getSubjectItems(subject),
                    origin: getOrigin(navigator.userAgent),
                  })

                  var tude = window.tude || { cmd: [] }
                  tude.cmd.push(function () {
                    tude.setPageTargeting({
                      pagetype: props.page_domain + '-' + props.page_type,
                    })
                  })
                }
              })

              document.addEventListener('astro:page-load', async () => {
                  try {
                    const session = await fetch('/auth/session').then((r) => r.json())

                    if (session.type === 'visitor') {
                      analytics.identify(`v:${session.properties.id}`, {
                        origin: session.properties.origin,
                        origin_scope: 'browser',
                      })
                    }
                    if (session.type === 'user') {
                      analytics.identify(`u:${session.properties.id}`, {
                        origin: session.properties.origin,
                        origin_scope: 'browser',
                      })
                    }
                  } catch (e) {}
                },
                { once: true },
              )
            }}();
          </script>
        </Fragment>
      )
    }
  </head>
  <body class="text-black">
    <slot />
    <CookieConsent client:only="svelte" />
    {enableAdBanner && <AditudeAdBanner client:only="svelte" />}
    <script>
      import { session as sessionStore } from '@lib/session-store'
      import type { Session } from '@lib/session'

      document.addEventListener('astro:page-load', async () => {
        /**
         * Given window and document, add or remove "selected" class to league nav
         * links if current window location matches nav href. Note that the argument
         * tests are more comprehensive to protect functions downstream of this.
         *
         * @param {Window} win - DOM window
         * @param {Element} ctag - Node Element with data for canonical link
         *
         */
        const shouldRewriteUrl = (win: Window, ctag: HTMLLinkElement) => {
          return (
            win instanceof Window &&
            win.history instanceof History &&
            win.location instanceof Location &&
            ctag.href !== win.location.href &&
            ctag.dataset.shouldRewrite === 'true'
          )
        }

        /**
         * Rewrite URL.
         *
         * @param {Window} win - DOM window
         * @param {HTMLDocument} doc - DOM document
         * @param {String} newUrl - Destination URL
         *
         */
        const rewriteUrl = (win: Window, doc: Document, newUrl: string) =>
          win.history.replaceState(null, doc.title, newUrl)

        /**
         * Given window and document, get canonical link tag and check if URL should be
         * rewritten, in which case call rewriteUrl and updateLeagueNav.
         *
         * @param {Window} win - DOM window
         * @param {HTMLDocument} doc - DOM document
         *
         */
        const maybeRewriteUrl = (win: Window, doc: Document) => {
          const canonicalTag = doc.querySelector(
            'link[rel="canonical"]',
          ) as HTMLLinkElement | null
          if (!canonicalTag) return

          if (shouldRewriteUrl(win, canonicalTag)) {
            rewriteUrl(win, doc, canonicalTag.href)
          }
        }

        maybeRewriteUrl(window, document)
      })

      document.addEventListener(
        'astro:page-load',
        async () => {
          try {
            const session: Session = await fetch('/auth/session').then((r) =>
              r.json(),
            )
            sessionStore.set(session)
          } catch (e) {}
        },
        { once: true },
      )
    </script>
  </body>
</html>
