---
import '@styles/global.css'
import type { Metadata } from '@lib/meta'
import { Config } from 'sst/node/config'
import type { AnalyticsPageviewProperties } from '@lib/analytics'
import CookieConsent from '@components/cookie-consent.svelte'
import { ViewTransitions } from 'astro:transitions'
import Footer from '@components/footer.astro'
import Header from '@components/header.astro'
import type { ComponentProps } from 'astro/types'
import type { HeroProps } from '@lib/props'
import MenuLinks from '@components/menu-links.astro'
import ShareModal from '@components/share/modal.svelte'
import CloseableContainer from '@components/closeable-container.svelte'
import AditudeAdBanner from '@components/aditude-ad-banner.svelte'
import WithSubscription from '@components/with-subscription.svelte'
import { find } from 'lodash-es'
import TrendingList from '@components/trending-list.astro'
import Panel from '@components/panel.astro'

interface Props extends ComponentProps<typeof Header> {
  meta?: Metadata
  colors?: {
    foreground?: string
    background?: string
    foregroundColor?: string
    backgroundColor?: string
  }
  analytics?: AnalyticsPageviewProperties
  enableAdBanner?: boolean
  class?: string | null
  share?: HeroProps['share']
  renderRightColumn?: boolean
  headerClass?: string
}

const {
  meta,
  colors,
  analytics = {},
  enableAdBanner = true,
  preferredDomain,
  query,
  conversationToken,
  money,
  share,
  renderRightColumn = true,
  headerClass = '',
} = Astro.props
const foreground = colors?.foreground || colors?.foregroundColor
const background = colors?.background || colors?.backgroundColor

const style = colors
  ? `:root {
        ${background && `--team-primary-color: ${background}`};
        ${foreground && `--team-secondary-color: ${foreground}`};
      }
    `
  : undefined

const title = meta?.title
  ? `${meta.title} | StatMuse`
  : 'StatMuse | Search StatMuse, save time.'
const description =
  meta?.description ||
  'Instant answers to your NBA, NFL, NHL, MLB, PGA and European football questions. Stats, scores, bios, betting, fantasy and more â€” just ask.'
const keywords =
  meta?.keywords ||
  'StatMuse, sports, stats, search, sports search, sports information, sports stats, statistics, fantasy stats, advanced stats, betting information, NBA stats, NFL stats, NHL stats, PGA stats, MLB stats, Premier League stats'
const defaultImageUrl = 'https://www.statmuse.com/images/sm-meta-banner-2.jpg'

const isError = (status?: number) => {
  if (!status) return true
  if (status >= 400) return true
  return false
}

const analyticsProperties = Object.assign(
  {
    is_error: isError(Astro.response.status),
    is_search: false,
    method: Astro.request.method,
    origin: 'web',
    origin_scope: 'browser',
    page_domain: 'unknown',
    page_type: 'unknown',
    query: undefined,
  },
  analytics,
)

const league = Astro.params.league

const trendingData = Astro.locals.trendingData
const trending = money
  ? [
      {
        items: find(trendingData?.datasets, { name: 'Stocks' }),
        href: '/money/trending/stocks',
      },
      {
        items: find(trendingData?.datasets, { name: 'Searches' }),
        href: '/money/trending/searches',
      },
    ]
  : [
      {
        items: find(trendingData?.datasets, { name: 'Players' }),
        href: league ? `/${league}/trending/players` : '/trending/players',
      },
      {
        items: find(trendingData?.datasets, { name: 'Teams' }),
        href: league ? `/${league}/trending/teams` : '/trending/teams',
      },
      {
        items: find(trendingData?.datasets, { name: 'Searches' }),
        href: league ? `/${league}/trending/searches` : '/trending/searches',
      },
    ]

const canonicalUrl = meta?.canonical
  ? meta.canonical.url.startsWith('http')
    ? meta.canonical.url
    : new URL(meta.canonical.url, Astro.url.origin).href
  : undefined
---

<html lang="en">
  <head>
    <meta name="color-scheme" content="dark light" />

    <script is:inline>
      function setTheme(document) {
        const metaColorScheme = document.querySelector(
          'meta[name="color-scheme"]',
        )

        if (
          localStorage.theme === 'dark' ||
          (!('theme' in localStorage) &&
            window.matchMedia('(prefers-color-scheme: dark)').matches)
        ) {
          document.documentElement.classList.add('dark')
          metaColorScheme.setAttribute('content', 'dark')
        } else {
          document.documentElement.classList.remove('dark')
          metaColorScheme.setAttribute('content', 'light')
        }
      }

      setTheme(document)

      document.addEventListener('astro:before-swap', (ev) => {
        // Pass the incoming document to set the theme on it
        setTheme(ev.newDocument)
      })
    </script>

    {
      import.meta.env.PUBLIC_STAGE !== 'production' && (
        <meta name="robots" content="noindex" />
      )
    }
    <meta charset="utf-8" />
    <meta content="width=device-width, initial-scale=1.0" name="viewport" />
    <meta name="format-detection" content="telephone=no" />
    <meta name="generator" content={Astro.generator} />
    <meta name="apple-itunes-app" content="app-id=1234654160" />
    <slot name="head">
      <title>{title}</title>
      <meta name="description" content={description} />
      <meta name="keywords" content={keywords} />
      <meta property="fb:app_id" content="915991831757165" />
      <meta property="og:site_name" content="StatMuse" />
      <meta property="og:title" content={meta?.facebook?.title || title} />
      <meta
        property="og:description"
        content={meta?.facebook?.description || description}
      />
      <meta property="og:locale" content="en_US" />
      <meta
        property="og:image"
        content={meta?.facebook?.imageUrl || defaultImageUrl}
      />
      <meta property="twitter:site" content="@StatMuse" />
      <meta property="twitter:creator" content="@StatMuse" />
      <meta property="twitter:title" content={meta?.twitter?.title || title} />
      <meta
        property="twitter:description"
        content={meta?.twitter?.description || description}
      />
      <meta property="twitter:card" content="summary_large_image" />
      <meta
        property="twitter:image"
        content={meta?.twitter?.imageUrl || defaultImageUrl}
      />
      {meta?.pageType && <meta name="page-type" content={meta?.pageType} />}
    </slot>
    {
      meta?.canonical && (
        <link
          rel="canonical"
          href={canonicalUrl}
          data-should-rewrite={meta.canonical.rewrite?.toString()}
        />
      )
    }
    <ViewTransitions />
    <link
      href="https://www.statmuse.com/opensearch.xml"
      rel="search"
      title="StatMuse Search"
      type="application/opensearchdescription+xml"
    />
    <link
      href="https://www.statmuse.com/favicon.ico"
      rel="icon"
      type="image/x-icon"
    />

    <!-- Set css variables for dynamic colors -->
    {style && <style set:html={style} />}

    <!-- Font face definitions -->
    <style is:inline>
      @font-face {
        font-family: 'calibre';
        src:
          url('/fonts/calibre.woff2') format('woff2-variations'),
          url('/fonts/calibre.woff') format('woff-variations');
        font-display: swap;
        font-style: normal;
        font-weight: 100 900;
      }

      @font-face {
        font-family: 'calibre-fallback';
        src: local('Arial');
        size-adjust: 88%;
        ascent-override: 114%;
        descent-override: 34%;
        line-gap-override: 0%;
      }
    </style>

    <!-- Preload custom fonts -->
    <link
      rel="preload"
      href="/fonts/calibre.woff2"
      as="font"
      type="font/woff2"
      crossorigin="anonymous"
    />
    <link
      rel="preload"
      href="/fonts/calibre.woff"
      as="font"
      type="font/woff2"
      crossorigin="anonymous"
    />

    <slot name="tradingview" />

    <meta name="analytics" content={Config.SEGMENT_WRITE_KEY} />
    <meta
      name="analytics:event:properties"
      content={JSON.stringify(analyticsProperties)}
    />
    {
      import.meta.env.PROD && (
        <Fragment>
          <script async src="/scripts/aditude-cmp.js" />
          <link
            rel="preload"
            as="script"
            href="https://www.googletagservices.com/tag/js/gpt.js"
          />
          <script
            async
            src="https://dn0qt3r0xannq.cloudfront.net/statmuse-3HFSjUvCes/statmuse-longform/prebid-load.js"
          />
        </Fragment>
      )
    }
  </head>
  <body
    data-platform={Astro.locals.platform}
    class:list={{
      'text-gray-2 dark:text-gray-7 bg-gray-7 dark:bg-gray-2 text-pretty': true,
      'has-[#menu:checked]:overflow-y-scroll has-[#menu:checked]:fixed': true,
      'has-[#menu:checked]:w-full has-[#menu:checked]:h-full': true,
      'max-w-7xl min-h-screen mx-auto px-3 md:px-5 flex flex-col': true,
      dark: Astro.locals.platform === 'native',
    }}
  >
    <Header
      class={headerClass}
      {preferredDomain}
      {query}
      {conversationToken}
      {money}
    />
    <div
      data-content
      class:list={{
        'grid grid-rows-1 gap-3 [--top-spacing:62px] flex-1': true,
        'md:grid-cols-[1fr_300px] xl:grid-cols-[auto_1fr_300px]':
          renderRightColumn,
        'xl:grid-cols-[auto_1fr]': !renderRightColumn,
      }}
    >
      <MenuLinks
        id="base"
        class="shrink-0 hidden xl:flex h-fit sticky top-[--top-spacing]"
      />
      <div
        class:list={{
          'min-w-0 h-full': true,
          [Astro.props.class ?? '']: !!Astro.props.class,
        }}
      >
        <div class="@container/skeleton loading hidden inset-0 z-50">
          <div class="flex flex-col gap-3">
            <Panel
              team
              class:list={{
                'rounded-none border-0 md:rounded-2xl bg-gray-7 h-[265.5px] @lg/skeleton:h-[166.5px] md:h-[258.5px] lg:h-[159.5px]': true,
                '-mx-3 pb-2 pt-4 px-3 @lg/skeleton:py-3 @lg/skeleton:px-5 md:mx-0 whitespace-nowrap': true,
                'flex flex-col-reverse gap-3 @lg/skeleton:flex-row md:animate-pulse': true,
              }}
            />
            <Panel class="rounded-2xl border bg-inherit animate-pulse h-48" />
            <Panel class="rounded-2xl border bg-inherit animate-pulse h-32" />
            <Panel class="rounded-2xl border bg-inherit animate-pulse h-32" />
          </div>
        </div>
        <div class="content flex flex-col gap-3">
          <slot />
        </div>
      </div>
      {
        renderRightColumn && (
          <div
            data-right-column
            class="hidden relative md:block w-[300px] shrink-0 *:h-full [&_astro-island]:block [&_astro-slot]:block [&_astro-slot]:h-full"
          >
            <WithSubscription client:only="svelte">
              <Fragment slot="subscribed">
                <div class="content space-y-3">
                  {trending.map(
                    (trend) =>
                      trend.items && (
                        <TrendingList
                          title={`Trending ${
                            league ? `${league.toUpperCase()} ` : ''
                          }${trend.items.name}`}
                          items={trend.items.items}
                          href={trend.href}
                          smallImage
                        />
                      ),
                  )}
                </div>
              </Fragment>
              {Astro.locals.platform === 'web' && (
                <div class="content space-y-3 h-full">
                  <AditudeAdBanner
                    client:only="svelte"
                    divId="pb-slot-square-1"
                    slotId="pb-slot-square-1"
                    placeholderClass="w-[300px] h-[250px]"
                    onlyDesktop
                  />
                  <div class="sticky top-[--top-spacing]">
                    <AditudeAdBanner
                      client:only="svelte"
                      divId="pb-slot-right-2"
                      slotId="pb-slot-right-2"
                      placeholderClass="w-[300px] h-[600px]"
                      onlyDesktop
                    />
                  </div>
                </div>
              )}
            </WithSubscription>
            <div class="loading hidden animate-pulse absolute inset-0 z-50">
              <div class="flex flex-col gap-3">
                <Panel class="rounded-2xl border bg-inherit h-32" />
                <Panel class="rounded-2xl border bg-inherit h-96" />
              </div>
            </div>
          </div>
        )
      }
    </div>
    {Astro.locals.platform === 'web' && <Footer />}
    {
      Astro.locals.platform === 'web' && (
        <CookieConsent
          client:only="svelte"
          transition:persist="cookie-banner"
        />
      )
    }
    {share && <ShareModal client:load {...share} />}
    {
      enableAdBanner && Astro.locals.platform === 'web' && (
        <CloseableContainer
          client:only="svelte"
          class="bg-gray-7/90 dark:bg-gray-2/90  fixed bottom-0 left-0 md:left-1/2 md:-translate-x-1/2 w-screen min-h-[50px] md:w-fit md:min-h-[90px] z-50 flex justify-center md:pr-5"
          onlyMobile
        >
          <AditudeAdBanner
            client:only="svelte"
            divId="pb-slot-banner"
            slotId="pb-slot-banner"
            placeholderClass="w-[320px] md:w-[728px] min-h-[50px] md:min-h-[90px]"
          />
        </CloseableContainer>
      )
    }
    <script>
      import { v4 as uuidv4 } from 'uuid'
      import { segment, getPageviewProps } from '@lib/analytics'
      import type { Session } from '@lib/session'
      import { session as sessionStore, isNativeMobile } from '@lib/stores'
      import { maybeRewriteUrl } from '@lib/client'

      isNativeMobile.set(document.body?.dataset?.platform === 'native')

      // set page targeting for GAM
      const eventProps = getPageviewProps(document)
      if (eventProps) {
        var tude = window.tude || { cmd: [] }
        tude.cmd.push(function () {
          tude.setPageTargeting({
            pagetype: eventProps.page_domain + '-' + eventProps.page_type,
          })
        })
      }

      // initialize referrer var
      let referrer: string | undefined

      let sessionId: string | null
      sessionId = sessionStorage.getItem('sessionId')
      if (!sessionId) {
        sessionId = uuidv4()
        sessionStorage.setItem('sessionId', sessionId)
      }

      let startTime: number | undefined = Date.now()
      let timeSpent = 0

      const trackTimeOnPage = () => {
        const endTime = Date.now()
        if (startTime) {
          timeSpent += (endTime - startTime) / 1000
        }

        const props = getPageviewProps(document)
        if (props) {
          const { page_type, page_domain, is_search } = props
          window.segment.track(
            'Time On Page',
            {
              session_id: sessionId,
              time_spent: timeSpent,
              page_type,
              page_domain,
              is_search,
            },
            referrer ? { page: { referrer } } : {},
          )

          if (startTime) {
            startTime = endTime
          }
          timeSpent = 0
        }
      }

      window.addEventListener('visibilitychange', () => {
        if (document.visibilityState === 'hidden') {
          trackTimeOnPage()
        }
      })

      window.addEventListener('blur', () => {
        // Page is not visible, calculate timespent and pause the timer
        if (startTime) {
          timeSpent += (Date.now() - startTime) / 1000
        }
        startTime = undefined
      })

      window.addEventListener('focus', () => {
        // Page became visible again, resume the timer
        startTime = Date.now()
      })

      document.addEventListener('astro:before-swap', () => {
        trackTimeOnPage()
        referrer = window.location.href
      })

      document.addEventListener('astro:after-swap', () => {
        // set page targeting for GAM
        const eventProps = getPageviewProps(document)
        if (eventProps) {
          var tude = window.tude || { cmd: [] }
          tude.cmd.push(function () {
            tude.setPageTargeting({
              pagetype: eventProps.page_domain + '-' + eventProps.page_type,
            })
          })
        }
      })

      document.addEventListener('astro:page-load', async () => {
        maybeRewriteUrl(window, document)

        // default page tracking
        segment.page(referrer ? { referrer } : {})

        const eventProps = getPageviewProps(document)

        if (eventProps) {
          segment.track(
            'Pageview',
            { ...eventProps, session_id: sessionId },
            referrer ? { page: { referrer } } : {},
          )
        }
      })

      document.addEventListener(
        'astro:page-load',
        async () => {
          try {
            const session: Session = await fetch('/auth/session').then((r) =>
              r.json(),
            )
            sessionStore.set(session)

            if (session.type === 'visitor') {
              segment.identify(`v:${session.properties.id}`, {
                origin: session.properties.origin,
                origin_scope: 'browser',
              })
            }
            if (session.type === 'user') {
              segment.identify(`u:${session.properties.id}`, {
                origin: session.properties.origin,
                origin_scope: 'browser',
              })
            }
          } catch (e) {}
        },
        { once: true },
      )

      document.addEventListener('astro:before-preparation', () => {
        document
          .querySelectorAll('.loading')
          .forEach((e) => e?.classList.remove('hidden'))
        document
          .querySelectorAll('.content')
          .forEach((e) => e?.classList.add('invisible'))
      })

      //
      document.addEventListener(
        'astro:page-load',
        () => {
          sessionStore.subscribe((session) => {
            if (session && session.type === 'user') {
              const content = document.querySelector(
                '.md\\:grid-cols-\\[1fr_300px\\][data-content]',
              )
              const rightCol = document.querySelector('[data-right-column]')

              if (content) {
                content.classList.add('lg:grid-cols-[1fr_300px]')
                content.classList.remove('md:grid-cols-[1fr_300px]')
              }
              if (rightCol) {
                rightCol.classList.add('lg:block')
                rightCol.classList.remove('md:block')
              }
            }
          })
        },
        { once: true },
      )

      document.addEventListener('astro:after-swap', () => {
        const session = sessionStore.get()
        if (session && session.type === 'user') {
          const content = document.querySelector(
            '.md\\:grid-cols-\\[1fr_300px\\][data-content]',
          )
          const rightCol = document.querySelector('[data-right-column]')

          if (content) {
            content.classList.add('lg:grid-cols-[1fr_300px]')
            content.classList.remove('md:grid-cols-[1fr_300px]')
          }
          if (rightCol) {
            rightCol.classList.add('lg:block')
            rightCol.classList.remove('md:block')
          }
        }
      })
    </script>
  </body>
</html>
