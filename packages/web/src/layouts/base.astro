---
import '@styles/global.css'
import type { Metadata } from '@lib/meta'
import { Config } from 'sst/node/config'
// import { ViewTransitions } from 'astro :transitions'

interface Props {
  meta?: Metadata
  colors?: {
    foreground?: string
    background?: string
    foregroundColor?: string
    backgroundColor?: string
  }
}

const { meta, colors } = Astro.props
const foreground = colors?.foreground || colors?.foregroundColor || '#fff'
const background = colors?.background || colors?.backgroundColor || '#00c1d8'

const style = colors
  ? `:root {
        --team-primary-color: ${background};
        --team-secondary-color: ${foreground};
      }
      .dynamic-color {
        background-color: ${background};
        color: ${foreground};
        fill: ${foreground};
      }
      .loading-bar-animate {
        background-color: initial;
      }
    `
  : undefined

const title = meta?.title
  ? `${meta.title} | StatMuse`
  : 'StatMuse | Search StatMuse, save time.'
const description =
  meta?.description ||
  'Instant answers to your NBA, NFL, NHL, MLB and PGA questions. Stats, scores, schedules, odds, fantasy and more â€” just ask.'
const keywords =
  meta?.keywords ||
  'StatMuse, sports, stats, search, sports search, sports information, sports stats, statistics, fantasy stats, advanced stats, betting information, NBA stats, NFL stats, NHL stats, PGA stats, MLB stats'
const defaultImageUrl = '/images/sm-meta-banner.jpg'

Astro.response.headers.set(
  'Cache-Control',
  'public, s-maxage=60, stale-while-revalidate=86400'
)
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="color-scheme" content="light only" />
    <meta
      content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"
      name="viewport"
    />
    <meta name="generator" content={Astro.generator} />
    <meta name="apple-itunes-app" content="app-id=1234654160" />
    <slot name="head">
      <title>{title}</title>
      <meta name="description" content={description} />
      <meta name="keywords" content={keywords} />
      <meta property="fb:app_id" content="915991831757165" />
      <meta property="og:site_name" content="StatMuse" />
      <meta property="og:title" content={meta?.facebook?.title || title} />
      <meta
        property="og:description"
        content={meta?.facebook?.description || description}
      />
      <meta property="og:locale" content="en_US" />
      <meta
        property="og:image"
        content={meta?.facebook?.imageUrl || defaultImageUrl}
      />
      <meta property="twitter:site" content="@StatMuse" />
      <meta property="twitter:creator" content="@StatMuse" />
      <meta property="twitter:title" content={meta?.twitter?.title || title} />
      <meta
        property="twitter:description"
        content={meta?.twitter?.description || description}
      />
      <meta property="twitter:card" content="summary_large_image" />
      <meta
        property="twitter:image"
        content={meta?.twitter?.imageUrl || defaultImageUrl}
      />
      <!-- <meta name="page-type" content="player" /> -->
      <!-- <meta name="uid" content="v:10f20462-9e37-40d7-9ff7-91e66a9843f6" /> -->
    </slot>
    {
      meta?.canonical && (
        <link
          rel="canonical"
          href={meta.canonical.url}
          data-should-rewrite={meta.canonical.rewrite?.toString()}
        />
      )
    }
    <!-- <ViewTransitions /> -->
    <link
      href="https://www.statmuse.com/opensearch.xml"
      rel="search"
      title="StatMuse Search"
      type="application/opensearchdescription+xml"
    />
    <link
      href="https://www.statmuse.com/favicon.ico"
      rel="icon"
      type="image/x-icon"
    />

    <!-- Set css variables for dynamic colors -->
    {style && <style set:html={style} />}

    <!-- Font face definitions -->
    <style>
      @font-face {
        font-family: 'canada-type-gibson';
        src: url('/fonts/gibson-normal-subset.woff2') format('woff2'),
          url('/fonts/gibson-normal-subset.zopfli.woff') format('woff'),
          url('/fonts/gibson-normal-subset.ttf') format('truetype');
        unicode-range: U+0-FF;
        font-display: swap;
        font-style: normal;
        font-stretch: normal;
      }

      @font-face {
        font-family: 'canada-type-gibson';
        src: url('/fonts/gibson-italic-subset.woff2') format('woff2'),
          url('/fonts/gibson-italic-subset.zopfli.woff') format('woff'),
          url('/fonts/gibson-italic-subset.ttf') format('truetype');
        unicode-range: U+0-FF;
        font-display: swap;
        font-style: italic;
        font-stretch: normal;
      }

      @font-face {
        font-family: 'canada-type-gibson-fallback';
        src: local('Arial');
        ascent-override: 89.13%;
        descent-override: 22.28%;
        line-gap-override: 0%;
        size-adjust: 89.76%;
      }
    </style>

    <!-- Preload custom fonts -->
    <link
      rel="preload"
      href="/fonts/gibson-normal-subset.woff2"
      as="font"
      type="font/woff2"
      crossorigin="anonymous"
    />
    <link
      rel="preload"
      href="/fonts/gibson-italic-subset.woff2"
      as="font"
      type="font/woff2"
      crossorigin="anonymous"
    />
    <slot name="tradingview" />

    {import.meta.env.NODE_ENV !== 'development' ? (
      <script define:vars={{ writeKey: Config.SEGMENT_WRITE_KEY }}>
        !(function () {
          var analytics = (window.analytics = window.analytics || [])
          if (!analytics.initialize)
            if (analytics.invoked)
              window.console &&
                console.error &&
                console.error('Segment snippet included twice.')
            else {
              analytics.invoked = !0
              analytics.methods = [
                'trackSubmit',
                'trackClick',
                'trackLink',
                'trackForm',
                'pageview',
                'identify',
                'reset',
                'group',
                'track',
                'ready',
                'alias',
                'debug',
                'page',
                'once',
                'off',
                'on',
                'addSourceMiddleware',
                'addIntegrationMiddleware',
                'setAnonymousId',
                'addDestinationMiddleware',
              ]
              analytics.factory = function (e) {
                return function () {
                  var t = Array.prototype.slice.call(arguments)
                  t.unshift(e)
                  analytics.push(t)
                  return analytics
                }
              }
              for (var e = 0; e < analytics.methods.length; e++) {
                var key = analytics.methods[e]
                analytics[key] = analytics.factory(key)
              }
              analytics.load = function (key, e) {
                var t = document.createElement('script')
                t.type = 'text/javascript'
                t.async = !0
                t.src =
                  'https://cdn.segment.com/analytics.js/v1/' +
                  key +
                  '/analytics.min.js'
                var n = document.getElementsByTagName('script')[0]
                n.parentNode.insertBefore(t, n)
                analytics._loadOptions = e
              }
              analytics._writeKey = writeKey
              analytics.SNIPPET_VERSION = '4.15.2'
              analytics.load(writeKey)
              analytics.page()
            }
        })()
      </script>
    ) : (
      <script is:inline>
          const analytics = (window.analytics = [
            'identify',
            'page',
            'track',
          ].reduce(
            (stub, key) => ({
              ...stub,
              [key]: (...args) => console.debug(`analytics.${key}`, ...args),
            }),
            {}
          ))
          analytics.page()
      </script>
    )}
  </head>
  <body>
    <slot />
    <script>
      /**
       * Given window and document, add or remove "selected" class to league nav
       * links if current window location matches nav href. Note that the argument
       * tests are more comprehensive to protect functions downstream of this.
       *
       * @param {Window} win - DOM window
       * @param {Element} ctag - Node Element with data for canonical link
       *
       */
      const shouldRewriteUrl = (win: Window, ctag: HTMLLinkElement) => {
        return (
          win instanceof Window &&
          win.history instanceof History &&
          win.location instanceof Location &&
          ctag.href !== win.location.href &&
          ctag.dataset.shouldRewrite === 'true'
        )
      }

      /**
       * Rewrite URL.
       *
       * @param {Window} win - DOM window
       * @param {HTMLDocument} doc - DOM document
       * @param {String} newUrl - Destination URL
       *
       */
      const rewriteUrl = (win: Window, doc: Document, newUrl: string) =>
        win.history.replaceState(null, doc.title, newUrl)

      /**
       * Given window and document, add or remove "selected" class to league nav
       * links if current window location matches nav href.
       *
       * @param {Window} win - DOM window
       * @param {HTMLDocument} doc - DOM document
       *
       */
      const updateLeagueNav = (win: Window, doc: Document) => {
        Array.from(doc.querySelectorAll('nav.nav-league a')).forEach((e) => {
          const nav = e as HTMLAnchorElement

          nav.href === win.location.href
            ? nav.classList.add('selected')
            : nav.classList.remove('selected')
        })
      }

      /**
       * Given window and document, get canonical link tag and check if URL should be
       * rewritten, in which case call rewriteUrl and updateLeagueNav.
       *
       * @param {Window} win - DOM window
       * @param {HTMLDocument} doc - DOM document
       *
       */
      const maybeRewriteUrl = (win: Window, doc: Document) => {
        const canonicalTag = doc.querySelector(
          'link[rel="canonical"]'
        ) as HTMLLinkElement | null
        if (!canonicalTag) return

        if (shouldRewriteUrl(win, canonicalTag)) {
          rewriteUrl(win, doc, canonicalTag.href)
          updateLeagueNav(win, doc)
        }
      }

      maybeRewriteUrl(window, document)

      // TODO: ANALYTICS
      // identify user in analytics, using uid from meta tag as userId if present
      // !((userId) => {
      //   const props = { origin: 'web' }
      //   userId ? analytics.identify(userId, props) : analytics.identify(props)
      // })(undefined)
    </script>
  </body>
</html>
