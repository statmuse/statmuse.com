---
import '@styles/global.css'
import type { Metadata } from '@lib/meta'
import { Config } from 'sst/node/config'
import type { AnalyticsPageviewProperties } from '@lib/analytics'
import CookieConsent from '@components/cookie-consent.svelte'
import { ViewTransitions } from 'astro:transitions'
import AditudeAdBanner from '@components/aditude-ad-banner.svelte'

interface Props {
  meta?: Metadata
  colors?: {
    foreground?: string
    background?: string
    foregroundColor?: string
    backgroundColor?: string
  }
  analytics?: AnalyticsPageviewProperties
  enableAdBanner?: boolean
}

const { meta, colors, analytics = {}, enableAdBanner = true } = Astro.props
const foreground = colors?.foreground || colors?.foregroundColor || '#fff'
const background = colors?.background || colors?.backgroundColor || '#00c1d8'

const style = colors
  ? `:root {
        --team-primary-color: ${background};
        --team-secondary-color: ${foreground};
      }
      .dynamic-color {
        background-color: ${background};
        color: ${foreground};
        fill: ${foreground};
      }
      .loading-bar-animate {
        background-color: initial;
      }
    `
  : undefined

const title = meta?.title
  ? `${meta.title} | StatMuse`
  : 'StatMuse | Search StatMuse, save time.'
const description =
  meta?.description ||
  'Instant answers to your NBA, NFL, NHL, MLB, Premier League and PGA questions. Stats, scores, schedules, odds, fantasy and more â€” just ask.'
const keywords =
  meta?.keywords ||
  'StatMuse, sports, stats, search, sports search, sports information, sports stats, statistics, fantasy stats, advanced stats, betting information, NBA stats, NFL stats, NHL stats, PGA stats, MLB stats, Premier League stats'
const defaultImageUrl = 'https://www.statmuse.com/images/sm-meta-banner-2.jpg'

const isError = (status?: number) => {
  if (!status) return true
  if (status >= 400) return true
  return false
}

const analyticsProperties = Object.assign(
  {
    is_error: isError(Astro.response.status),
    is_search: false,
    method: Astro.request.method,
    origin: 'web',
    origin_scope: 'browser',
    page_domain: 'unknown',
    page_type: 'unknown',
    query: undefined,
  },
  analytics,
)

const canonicalUrl = meta?.canonical
  ? meta.canonical.url.startsWith('http')
    ? meta.canonical.url
    : new URL(meta.canonical.url, Astro.url.origin).href
  : undefined
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="color-scheme" content="light only" />
    <meta content="width=device-width, initial-scale=1.0" name="viewport" />
    <meta name="format-detection" content="telephone=no" />
    <meta name="generator" content={Astro.generator} />
    <meta name="apple-itunes-app" content="app-id=1234654160" />
    <slot name="head">
      <title>{title}</title>
      <meta name="description" content={description} />
      <meta name="keywords" content={keywords} />
      <meta property="fb:app_id" content="915991831757165" />
      <meta property="og:site_name" content="StatMuse" />
      <meta property="og:title" content={meta?.facebook?.title || title} />
      <meta
        property="og:description"
        content={meta?.facebook?.description || description}
      />
      <meta property="og:locale" content="en_US" />
      <meta
        property="og:image"
        content={meta?.facebook?.imageUrl || defaultImageUrl}
      />
      <meta property="twitter:site" content="@StatMuse" />
      <meta property="twitter:creator" content="@StatMuse" />
      <meta property="twitter:title" content={meta?.twitter?.title || title} />
      <meta
        property="twitter:description"
        content={meta?.twitter?.description || description}
      />
      <meta property="twitter:card" content="summary_large_image" />
      <meta
        property="twitter:image"
        content={meta?.twitter?.imageUrl || defaultImageUrl}
      />
      {meta?.pageType && <meta name="page-type" content={meta?.pageType} />}
    </slot>
    {
      meta?.canonical && (
        <link
          rel="canonical"
          href={canonicalUrl}
          data-should-rewrite={meta.canonical.rewrite?.toString()}
        />
      )
    }
    <ViewTransitions />
    <link
      href="https://www.statmuse.com/opensearch.xml"
      rel="search"
      title="StatMuse Search"
      type="application/opensearchdescription+xml"
    />
    <link
      href="https://www.statmuse.com/favicon.ico"
      rel="icon"
      type="image/x-icon"
    />

    <!-- Set css variables for dynamic colors -->
    {style && <style set:html={style} />}

    <!-- Font face definitions -->
    <style is:inline>
      @font-face {
        font-family: 'canada-type-gibson';
        src:
          url('/fonts/Gibson-Light.woff2') format('woff2'),
          url('/fonts/Gibson-Light.woff') format('woff'),
          url('/fonts/Gibson-Light.otf') format('opentype');
        font-display: auto;
        ascent-override: 85%;
        font-style: normal;
        font-weight: 200;
        font-stretch: normal;
      }

      @font-face {
        font-family: 'canada-type-gibson';
        src:
          url('/fonts/Gibson-Light-Italic.woff2') format('woff2'),
          url('/fonts/Gibson-Light-Italic.woff') format('woff'),
          url('/fonts/Gibson-Light-Italic.otf') format('opentype');
        font-display: auto;
        ascent-override: 85%;
        font-style: italic;
        font-weight: 200;
        font-stretch: normal;
      }

      @font-face {
        font-family: 'canada-type-gibson';
        src:
          url('/fonts/Gibson.woff2') format('woff2'),
          url('/fonts/Gibson.woff') format('woff'),
          url('/fonts/Gibson.otf') format('opentype');
        font-display: auto;
        ascent-override: 85%;
        font-style: normal;
        font-weight: 400;
        font-stretch: normal;
      }

      @font-face {
        font-family: 'canada-type-gibson';
        src:
          url('/fonts/Gibson-Italic.woff2') format('woff2'),
          url('/fonts/Gibson-Italic.woff') format('woff'),
          url('/fonts/Gibson-Italic.otf') format('opentype');
        font-display: auto;
        ascent-override: 85%;
        font-style: italic;
        font-weight: 400;
        font-stretch: normal;
      }

      @font-face {
        font-family: 'canada-type-gibson';
        src:
          url('/fonts/Gibson-SemiBold.woff2') format('woff2'),
          url('/fonts/Gibson-SemiBold.woff') format('woff'),
          url('/fonts/Gibson-SemiBold.otf') format('opentype');
        font-display: auto;
        ascent-override: 85%;
        font-style: normal;
        font-weight: 600;
        font-stretch: normal;
      }

      @font-face {
        font-family: 'canada-type-gibson';
        src:
          url('/fonts/Gibson-SemiBold-Italic.woff2') format('woff2'),
          url('/fonts/Gibson-SemiBold-Italic.woff') format('woff'),
          url('/fonts/Gibson-SemiBold-Italic.otf') format('opentype');
        font-display: auto;
        ascent-override: 85%;
        font-style: italic;
        font-weight: 600;
        font-stretch: normal;
      }

      @font-face {
        font-family: 'canada-type-gibson';
        src:
          url('/fonts/Gibson-Bold.woff2') format('woff2'),
          url('/fonts/Gibson-Bold.woff') format('woff'),
          url('/fonts/Gibson-Bold.otf') format('opentype');
        font-display: auto;
        ascent-override: 85%;
        font-style: normal;
        font-weight: 800;
        font-stretch: normal;
      }

      @font-face {
        font-family: 'canada-type-gibson';
        src:
          url('/fonts/Gibson-Bold-Italic.woff2') format('woff2'),
          url('/fonts/Gibson-Bold-Italic.woff') format('woff'),
          url('/fonts/Gibson-Bold-Italic.otf') format('opentype');
        font-display: auto;
        ascent-override: 85%;
        font-style: italic;
        font-weight: 800;
        font-stretch: normal;
      }

      @font-face {
        font-family: 'canada-type-gibson-fallback';
        src: local('Arial');
        ascent-override: 89.13%;
        descent-override: 22.28%;
        line-gap-override: 0%;
        size-adjust: 89.76%;
      }
    </style>

    <!-- Preload custom fonts -->
    <link
      rel="preload"
      href="/fonts/Gibson.woff2"
      as="font"
      type="font/woff2"
      crossorigin="anonymous"
    />
    <link
      rel="preload"
      href="/fonts/Gibson-SemiBold.woff2"
      as="font"
      type="font/woff2"
      crossorigin="anonymous"
    />

    <slot name="tradingview" />

    <meta name="analytics" content={Config.SEGMENT_WRITE_KEY} />
    <meta
      name="analytics:event:properties"
      content={JSON.stringify(analyticsProperties)}
    />
    {
      import.meta.env.PROD && (
        <script
          async
          src="https://www.googletagmanager.com/gtag/js?id=G-QRW302M4ZR"
        />
      )
    }
    <script>
      window.dataLayer = window.dataLayer || []
      function gtag() {
        dataLayer.push(arguments)
      }
      gtag('js', new Date())
      gtag('config', 'G-QRW302M4ZR')
    </script>
    {
      import.meta.env.PROD && (
        <Fragment>
          <script async src="/scripts/aditude-cmp.js" />
          <link
            rel="preload"
            as="script"
            href="https://www.googletagservices.com/tag/js/gpt.js"
          />
          <script
            async
            src="https://dn0qt3r0xannq.cloudfront.net/statmuse-3HFSjUvCes/statmuse-longform/prebid-load.js"
          />
        </Fragment>
      )
    }
  </head>
  <body class="text-black">
    <slot />
    <CookieConsent client:only="svelte" />
    {enableAdBanner && <AditudeAdBanner client:only="svelte" />}
    <script>
      import { getOrigin } from '@lib/analytics'
      import type { Session } from '@lib/session'
      import { session as sessionStore } from '@lib/session-store'
      import type { ContentReference, Subject } from '@statmuse/core/gamera'
      import type { ContentReference as KanedamaContentReference } from '@statmuse/core/kanedama'

      /**
       * Given window and document, add or remove "selected" class to league nav
       * links if current window location matches nav href. Note that the argument
       * tests are more comprehensive to protect functions downstream of this.
       *
       * @param {Window} win - DOM window
       * @param {Element} ctag - Node Element with data for canonical link
       *
       */
      const shouldRewriteUrl = (win: Window, ctag: HTMLLinkElement) => {
        return (
          win instanceof Window &&
          win.history instanceof History &&
          win.location instanceof Location &&
          ctag.href !== win.location.href &&
          ctag.dataset.shouldRewrite === 'true'
        )
      }

      /**
       * Rewrite URL.
       *
       * @param {Window} win - DOM window
       * @param {HTMLDocument} doc - DOM document
       * @param {String} newUrl - Destination URL
       *
       */
      const rewriteUrl = (win: Window, doc: Document, newUrl: string) =>
        win.history.replaceState(null, doc.title, newUrl)

      /**
       * Given window and document, get canonical link tag and check if URL should be
       * rewritten, in which case call rewriteUrl and updateLeagueNav.
       *
       * @param {Window} win - DOM window
       * @param {HTMLDocument} doc - DOM document
       *
       */
      const maybeRewriteUrl = (win: Window, doc: Document) => {
        const canonicalTag = doc.querySelector(
          'link[rel="canonical"]',
        ) as HTMLLinkElement | null
        if (!canonicalTag) return

        if (shouldRewriteUrl(win, canonicalTag)) {
          rewriteUrl(win, doc, canonicalTag.href)
        }
      }

      const flattenObj = (key: string, obj?: {}) => {
        return !obj
          ? {}
          : Object.entries(obj).reduce((x, [k, v]) => {
              return {
                ...x,
                [`${key}.${k}`]: v,
              }
            }, {})
      }

      const getReferenceIds = (
        contentReference?: ContentReference | KanedamaContentReference,
      ) => {
        if (!contentReference) return {}
        const { questionTags, answerTags } = contentReference

        if (
          questionTags?.playerIds ||
          questionTags?.teamIds ||
          answerTags?.playerIds ||
          answerTags?.teamIds
        ) {
          return {
            players: JSON.stringify(
              Array.from(
                new Set([
                  ...(questionTags?.playerIds ? questionTags.playerIds : []),
                  ...(answerTags?.playerIds ? answerTags.playerIds : []),
                ]),
              ),
            ),
            teams: JSON.stringify(
              Array.from(
                new Set([
                  ...(questionTags?.teamIds ? questionTags.teamIds : []),
                  ...(answerTags?.teamIds ? answerTags.teamIds : []),
                ]),
              ),
            ),
          }
        }

        if (questionTags?.assetIds || answerTags?.assetIds) {
          return {
            assets: JSON.stringify(
              Array.from(
                new Set([
                  ...(questionTags?.assetIds ? questionTags.assetIds : []),
                  ...(answerTags?.assetIds ? answerTags.assetIds : []),
                ]),
              ),
            ),
          }
        }
      }

      const getSubjectItems = (subject?: Subject) => {
        if (!subject) return {}
        return {
          subject_image: subject.imageUrl,
          subject_background_color: subject.colors.background,
          subject_foreground_color: subject.colors.foreground,
        }
      }

      document.addEventListener('astro:page-load', async () => {
        maybeRewriteUrl(window, document)

        // default page tracking
        window.analytics.page()

        // custom Pageview event
        const eventProps = document.querySelector<HTMLMetaElement>(
          'meta[name="analytics:event:properties"]',
        )?.content

        if (eventProps) {
          const {
            disposition,
            tokenizationScore,
            contentReference,
            subject,
            ...props
          } = JSON.parse(eventProps)
          window.analytics.track('Pageview', {
            ...props,
            ...flattenObj('disposition', disposition),
            ...flattenObj('tokenizationScore', tokenizationScore),
            ...getReferenceIds(contentReference),
            ...getSubjectItems(subject),
            origin: getOrigin(navigator.userAgent),
          })

          window.tude.cmd.push(function () {
            window.tude.setPageTargeting({
              pagetype: props.page_domain + '-' + props.page_type,
            })
          })
        }
      })

      document.addEventListener(
        'astro:page-load',
        async () => {
          try {
            const session: Session = await fetch('/auth/session').then((r) =>
              r.json(),
            )
            sessionStore.set(session)

            if (session.type === 'visitor') {
              window.analytics.identify(`v:${session.properties.id}`, {
                origin: session.properties.origin,
                origin_scope: 'browser',
              })
            }
            if (session.type === 'user') {
              window.analytics.identify(`u:${session.properties.id}`, {
                origin: session.properties.origin,
                origin_scope: 'browser',
              })
            }
          } catch (e) {}
        },
        { once: true },
      )
    </script>
  </body>
</html>
