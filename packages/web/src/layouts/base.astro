---
import '@styles/global.css'
import type { Metadata } from '@lib/meta'
import { Config } from 'sst/node/config'
import type { AnalyticsPageviewProperties } from '@lib/analytics'
import CookieConsent from '@components/cookie-consent.svelte'
import { ViewTransitions } from 'astro:transitions'
import Footer from '@components/footer.astro'
import Image from '@components/image.astro'
import Nav from '@components/nav.astro'
import Panel from '@components/panel.astro'
import Header from '@components/header.astro'
import type { ComponentProps } from 'astro/types'
import type { GameraParameter } from '@statmuse/core/gamera'
import GridDropdown from '@components/grid-dropdown.astro'
import TwitterShare from '@components/icons/twitter.astro'
import type { HeroProps } from '@lib/props'
import { marked } from 'marked'
import MenuLinks from '@components/menu-links.astro'
import Share from '@components/share/index.svelte'
import ShareModal from '@components/share/modal.svelte'
import CloseableContainer from '@components/closeable-container.svelte'
import AditudeAdBanner from '@components/aditude-ad-banner.svelte'
import WithSubscription from '@components/with-subscription.svelte'
import { find } from 'lodash-es'
import TrendingList from '@components/trending-list.astro'

interface Props extends ComponentProps<typeof Header> {
  meta?: Metadata
  colors?: {
    foreground?: string
    background?: string
    foregroundColor?: string
    backgroundColor?: string
  }
  analytics?: AnalyticsPageviewProperties
  enableAdBanner?: boolean
  class?: string | null
  navProps?: ComponentProps<typeof Nav>
  hero?: HeroProps
  parameters?: Record<string, GameraParameter>
}

const {
  meta,
  colors,
  analytics = {},
  enableAdBanner = true,
  preferredDomain,
  query,
  conversationToken,
  money,
  navProps,
  hero,
  parameters,
} = Astro.props
const foreground = colors?.foreground || colors?.foregroundColor || '#fff'
const background = colors?.background || colors?.backgroundColor || '#00c1d8'

const style = colors
  ? `:root {
        --team-primary-color: ${background};
        --team-secondary-color: ${foreground};
      }
      .dynamic-color {
        background-color: ${background};
        color: ${foreground};
        fill: ${foreground};
      }
      .loading-bar-animate {
        background-color: initial;
      }
    `
  : undefined

const title = meta?.title
  ? `${meta.title} | StatMuse`
  : 'StatMuse | Search StatMuse, save time.'
const description =
  meta?.description ||
  'Instant answers to your NBA, NFL, NHL, MLB, Premier League and PGA questions. Stats, scores, schedules, odds, fantasy and more â€” just ask.'
const keywords =
  meta?.keywords ||
  'StatMuse, sports, stats, search, sports search, sports information, sports stats, statistics, fantasy stats, advanced stats, betting information, NBA stats, NFL stats, NHL stats, PGA stats, MLB stats, Premier League stats'
const defaultImageUrl = 'https://www.statmuse.com/images/sm-meta-banner-2.jpg'

const isError = (status?: number) => {
  if (!status) return true
  if (status >= 400) return true
  return false
}

const analyticsProperties = Object.assign(
  {
    is_error: isError(Astro.response.status),
    is_search: false,
    method: Astro.request.method,
    origin: 'web',
    origin_scope: 'browser',
    page_domain: 'unknown',
    page_type: 'unknown',
    query: undefined,
  },
  analytics,
)

const trendingData = Astro.locals.trendingData
const trendingSearches = find(trendingData?.datasets, { name: 'Searches' })
const trendingPlayers = find(trendingData?.datasets, { name: 'Players' })
const trendingTeams = find(trendingData?.datasets, { name: 'Teams' })

const canonicalUrl = meta?.canonical
  ? meta.canonical.url.startsWith('http')
    ? meta.canonical.url
    : new URL(meta.canonical.url, Astro.url.origin).href
  : undefined

const markdown = hero?.markdown
const html = hero?.html
const markdownOrHtml = markdown || html
const content = markdown
  ? marked(hero.content, {
      gfm: true,
      breaks: true,
      mangle: false,
      headerIds: false,
    })
  : hero?.content
---

<html lang="en">
  <head>
    <script is:inline>
      function setTheme(document) {
        if (
          localStorage.theme === 'dark' ||
          (!('theme' in localStorage) &&
            window.matchMedia('(prefers-color-scheme: dark)').matches)
        ) {
          document.documentElement.classList.add('dark')
        } else {
          document.documentElement.classList.remove('dark')
        }
      }

      setTheme(document)

      document.addEventListener('astro:before-swap', (ev) => {
        // Pass the incoming document to set the theme on it
        setTheme(ev.newDocument)
      })
    </script>

    {
      import.meta.env.PUBLIC_STAGE !== 'production' && (
        <meta name="robots" content="noindex" />
      )
    }
    <meta charset="utf-8" />
    <meta name="color-scheme" content="light only" />
    <meta content="width=device-width, initial-scale=1.0" name="viewport" />
    <meta name="format-detection" content="telephone=no" />
    <meta name="generator" content={Astro.generator} />
    <meta name="apple-itunes-app" content="app-id=1234654160" />
    <slot name="head">
      <title>{title}</title>
      <meta name="description" content={description} />
      <meta name="keywords" content={keywords} />
      <meta property="fb:app_id" content="915991831757165" />
      <meta property="og:site_name" content="StatMuse" />
      <meta property="og:title" content={meta?.facebook?.title || title} />
      <meta
        property="og:description"
        content={meta?.facebook?.description || description}
      />
      <meta property="og:locale" content="en_US" />
      <meta
        property="og:image"
        content={meta?.facebook?.imageUrl || defaultImageUrl}
      />
      <meta property="twitter:site" content="@StatMuse" />
      <meta property="twitter:creator" content="@StatMuse" />
      <meta property="twitter:title" content={meta?.twitter?.title || title} />
      <meta
        property="twitter:description"
        content={meta?.twitter?.description || description}
      />
      <meta property="twitter:card" content="summary_large_image" />
      <meta
        property="twitter:image"
        content={meta?.twitter?.imageUrl || defaultImageUrl}
      />
      {meta?.pageType && <meta name="page-type" content={meta?.pageType} />}
    </slot>
    {
      meta?.canonical && (
        <link
          rel="canonical"
          href={canonicalUrl}
          data-should-rewrite={meta.canonical.rewrite?.toString()}
        />
      )
    }
    <ViewTransitions />
    <link
      href="https://www.statmuse.com/opensearch.xml"
      rel="search"
      title="StatMuse Search"
      type="application/opensearchdescription+xml"
    />
    <link
      href="https://www.statmuse.com/favicon.ico"
      rel="icon"
      type="image/x-icon"
    />

    <!-- Set css variables for dynamic colors -->
    {style && <style set:html={style} />}

    <!-- Font face definitions -->
    <style is:inline>
      @font-face {
        font-family: 'calibre';
        src:
          url('/fonts/calibre.woff2') format('woff2-variations'),
          url('/fonts/calibre.woff') format('woff-variations'),
          url('/fonts/calibre.otf') format('opentype-variations');
        font-display: swap;
        font-style: normal;
        font-weight: 100 900;
      }

      @font-face {
        font-family: 'calibre-fallback';
        src: local('Arial');
        size-adjust: 88%;
        ascent-override: 114%;
        descent-override: 34%;
        line-gap-override: 0%;
      }
    </style>

    <!-- Preload custom fonts -->
    <link
      rel="preload"
      href="/fonts/calibre.woff2"
      as="font"
      type="font/woff2"
      crossorigin="anonymous"
    />
    <link
      rel="preload"
      href="/fonts/calibre.woff"
      as="font"
      type="font/woff2"
      crossorigin="anonymous"
    />
    <link
      rel="preload"
      href="/fonts/calibre.otf"
      as="font"
      type="font/woff2"
      crossorigin="anonymous"
    />

    <slot name="tradingview" />

    <meta name="analytics" content={Config.SEGMENT_WRITE_KEY} />
    <meta
      name="analytics:event:properties"
      content={JSON.stringify(analyticsProperties)}
    />
    {
      import.meta.env.PROD && (
        <Fragment>
          <script async src="/scripts/aditude-cmp.js" />
          <link
            rel="preload"
            as="script"
            href="https://www.googletagservices.com/tag/js/gpt.js"
          />
          <script
            async
            src="https://dn0qt3r0xannq.cloudfront.net/statmuse-3HFSjUvCes/statmuse-longform/prebid-load.js"
          />
        </Fragment>
      )
    }
  </head>
  <body
    class:list={{
      'text-gray-2 dark:text-gray-7 bg-gray-7 dark:bg-gray-2 text-pretty': true,
      'has-[#menu:checked]:overflow-y-scroll has-[#menu:checked]:fixed': true,
      'has-[#menu:checked]:w-full has-[#menu:checked]:h-full': true,
      'max-w-7xl mx-auto px-3 md:px-5 flex flex-col gap-3': true,
    }}
  >
    <Header {preferredDomain} {query} {conversationToken} {money} />
    <div class="flex flex-1 gap-3 -mt-3 md:mt-0 [--top-spacing:74px]">
      <MenuLinks
        id="base"
        class="shrink-0 hidden xl:flex h-fit sticky top-[--top-spacing]"
      />
      <div class="min-w-0 flex-1">
        {
          Astro.slots.has('hero') || hero?.content ? (
            <Panel
              team
              class:list={{
                'rounded-none border-0 md:rounded-2xl md:border mb-3': true,
                '-mx-3 pb-2 pt-4 px-3 md:py-3 md:px-5 md:mx-0 whitespace-nowrap': true,
                'flex flex-col-reverse gap-3 md:flex-row': !markdownOrHtml,
                'flex flex-col-reverse gap-3 md:flex-row-reverse justify-between':
                  markdownOrHtml,
              }}
            >
              <slot name="hero" />
              {hero?.imageUrl ? (
                <Image
                  class:list={{
                    'h-32 md:max-w-[200px]': true,
                    'mt-2 -mb-2 md:mt-0 md:-mb-3 md:-ml-2': true,
                    'self-center md:self-end select-none': true,
                    'object-contain object-bottom': true,
                  }}
                  alt={hero.imageAlt ?? hero.content}
                  src={hero.imageUrl}
                  width={200}
                  height={200}
                  loading="eager"
                />
              ) : null}
              <div class="flex flex-col justify-between md:items-start md:-mb-3">
                {markdownOrHtml ? (
                  <div
                    class:list={{
                      'flex-1 flex flex-col justify-between text-center md:text-left': true,
                    }}
                  >
                    <h1
                      class:list={{
                        'font-bold text-xl leading-snug my-auto text-pretty': true,
                        // 'md:text-2xl lg:text-[1.33rem] xl:text-2xl': true,
                        '[&>p]:my-[1em] [&>ul]:my-[1em] [&>p>a]:underline [&>p>a]:text-team-secondary': true,
                      }}
                      set:html={markdown ? content : undefined}
                    >
                      {html ? (
                        <span
                          class="my-[1em] [&>a]:underline [&>a]:text-team-secondary whitespace-pre-wrap text-pretty"
                          set:html={content}
                        />
                      ) : null}
                    </h1>
                  </div>
                ) : (
                  <div
                    class:list={{
                      'mx-auto md:mx-0 md:flex md:gap-3 md:items-center md:mt-5': true,
                      'mb-5 mt-5': !hero?.imageUrl,
                    }}
                  >
                    <h1 class="text-2xl leading-none font-bold text-center md:text-left text-pretty">
                      {hero?.url ? (
                        <a
                          class="text-current"
                          href={hero.url.href}
                          title={hero.url.title}
                          data-cy-team-name-link
                        >
                          {hero.content}
                        </a>
                      ) : (
                        hero?.content
                      )}
                    </h1>
                    {hero?.affiliation ? (
                      <div
                        class:list={{
                          'flex flex-1 items-center text-center': true,
                          'py-0.5 px-2.5 absolute left-3 bottom-3': true,
                          'md:relative md:left-auto md:bottom-auto': true,
                          'bg-team-secondary text-team-primary rounded-2xl': true,
                        }}
                      >
                        {hero?.affiliationUrl ? (
                          <a
                            class="text-inherit no-underline hover:no-underline"
                            href={hero?.affiliationUrl}
                            set:text={hero?.affiliation}
                          />
                        ) : (
                          <>{hero?.affiliation}</>
                        )}
                      </div>
                    ) : null}
                  </div>
                )}
                {navProps ? (
                  <Nav class="hidden md:flex" hero {...navProps} />
                ) : null}
              </div>
              <div
                class:list={{
                  'flex flex-row gap-2.5 items-center': true,
                  'absolute right-3 bottom-3 md:top-3 md:bottom-auto px-2 py-1': true,
                  'rounded-2xl bg-team-secondary text-team-primary': true,
                }}
              >
                <TwitterShare shareUrl={Astro.url.href} />
                {hero?.share ? <Share client:load {...hero.share} /> : null}
              </div>
              {parameters && (
                <GridDropdown
                  class="hidden lg:flex w-52 absolute right-3 bottom-3"
                  {parameters}
                />
              )}
            </Panel>
          ) : null
        }
        {navProps ? <Nav class="md:hidden" {...navProps} /> : null}
        {
          parameters && (
            <GridDropdown class="flex lg:hidden mt-3" {parameters} />
          )
        }
        <div
          class:list={{
            'mt-3 lg:mt-0': !!navProps,
            'flex flex-col gap-3': true,
            [Astro.props.class ?? '']: !!Astro.props.class,
          }}
        >
          <slot />
        </div>
      </div>
      <div
        class="hidden md:block w-[300px] shrink-0 *:h-full [&_astro-island]:block [&_astro-slot]:block [&_astro-slot]:h-full"
      >
        <WithSubscription client:only="svelte">
          <Fragment slot="subscribed">
            <div class="space-y-3">
              {
                trendingPlayers && (
                  <TrendingList
                    title={`Trending ${trendingPlayers.name}`}
                    items={trendingPlayers.items}
                  />
                )
              }
              {
                trendingTeams && (
                  <TrendingList
                    title={`Trending ${trendingTeams.name}`}
                    items={trendingTeams.items}
                  />
                )
              }
              {
                trendingSearches && (
                  <TrendingList
                    title={`Trending ${trendingSearches.name}`}
                    items={trendingSearches.items}
                  />
                )
              }
            </div>
          </Fragment>
          <div class="space-y-3 h-full">
            <AditudeAdBanner
              client:only="svelte"
              divId="pb-slot-square-1"
              slotId="pb-slot-square-1"
              placeholderClass="w-[300px] h-[250px]"
              onlyDesktop
            />
            <div class="sticky top-[--top-spacing]">
              <AditudeAdBanner
                client:only="svelte"
                divId="pb-slot-right-2"
                slotId="pb-slot-right-2"
                placeholderClass="w-[300px] h-[600px]"
                onlyDesktop
              />
            </div>
          </div>
        </WithSubscription>
      </div>
    </div>
    <Footer />
    <CookieConsent client:only="svelte" transition:persist="cookie-banner" />
    {hero?.share && <ShareModal client:load {...hero.share} />}
    {
      enableAdBanner && (
        <CloseableContainer
          client:only="svelte"
          class="bg-gray-7/90 dark:bg-gray-2/90  fixed bottom-0 left-0 md:left-1/2 md:-translate-x-1/2 w-screen min-h-[50px] md:w-fit md:min-h-[90px] z-50 flex justify-center md:pr-5"
          onlyMobile
        >
          <AditudeAdBanner
            client:only="svelte"
            divId="pb-slot-banner"
            slotId="pb-slot-banner"
            placeholderClass="w-[320px] md:w-[728px] min-h-[50px] md:min-h-[90px]"
          />
        </CloseableContainer>
      )
    }
    <script>
      import { v4 as uuidv4 } from 'uuid'
      import { segment, getPageviewProps } from '@lib/analytics'
      import type { Session } from '@lib/session'
      import { session as sessionStore } from '@lib/stores'
      import { maybeRewriteUrl } from '@lib/client'

      // set page targeting for GAM
      const eventProps = getPageviewProps(document)
      if (eventProps) {
        var tude = window.tude || { cmd: [] }
        tude.cmd.push(function () {
          tude.setPageTargeting({
            pagetype: eventProps.page_domain + '-' + eventProps.page_type,
          })
        })
      }

      // initialize referrer var
      let referrer: string | undefined

      let sessionId: string | null
      sessionId = sessionStorage.getItem('sessionId')
      if (!sessionId) {
        sessionId = uuidv4()
        sessionStorage.setItem('sessionId', sessionId)
      }

      let startTime: number | undefined = Date.now()
      let timeSpent = 0

      const trackTimeOnPage = () => {
        const endTime = Date.now()
        if (startTime) {
          timeSpent += (endTime - startTime) / 1000
        }

        const props = getPageviewProps(document)
        if (props) {
          const { page_type, page_domain, is_search } = props
          window.segment.track(
            'Time On Page',
            {
              session_id: sessionId,
              time_spent: timeSpent,
              page_type,
              page_domain,
              is_search,
            },
            referrer ? { page: { referrer } } : {},
          )

          if (startTime) {
            startTime = endTime
          }
          timeSpent = 0
        }
      }

      window.addEventListener('visibilitychange', () => {
        if (document.visibilityState === 'hidden') {
          trackTimeOnPage()
        }
      })

      window.addEventListener('blur', () => {
        // Page is not visible, calculate timespent and pause the timer
        if (startTime) {
          timeSpent += (Date.now() - startTime) / 1000
        }
        startTime = undefined
      })

      window.addEventListener('focus', () => {
        // Page became visible again, resume the timer
        startTime = Date.now()
      })

      document.addEventListener('astro:before-swap', () => {
        trackTimeOnPage()
        referrer = window.location.href
      })

      document.addEventListener('astro:after-swap', () => {
        // set page targeting for GAM
        const eventProps = getPageviewProps(document)
        if (eventProps) {
          var tude = window.tude || { cmd: [] }
          tude.cmd.push(function () {
            tude.setPageTargeting({
              pagetype: eventProps.page_domain + '-' + eventProps.page_type,
            })
          })
        }
      })

      document.addEventListener('astro:page-load', async () => {
        maybeRewriteUrl(window, document)

        // default page tracking
        segment.page(referrer ? { referrer } : {})

        const eventProps = getPageviewProps(document)

        if (eventProps) {
          segment.track(
            'Pageview',
            { ...eventProps, session_id: sessionId },
            referrer ? { page: { referrer } } : {},
          )
        }
      })

      document.addEventListener(
        'astro:page-load',
        async () => {
          try {
            const session: Session = await fetch('/auth/session').then((r) =>
              r.json(),
            )
            sessionStore.set(session)

            if (session.type === 'visitor') {
              segment.identify(`v:${session.properties.id}`, {
                origin: session.properties.origin,
                origin_scope: 'browser',
              })
            }
            if (session.type === 'user') {
              segment.identify(`u:${session.properties.id}`, {
                origin: session.properties.origin,
                origin_scope: 'browser',
              })
            }
          } catch (e) {}
        },
        { once: true },
      )
    </script>
  </body>
</html>
