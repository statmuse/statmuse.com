---
import '@styles/global.css'
import type { Metadata } from '@lib/meta'
import { Config } from 'sst/node/config'
import type { AnalyticsPageviewProperties } from '@lib/analytics'
import CookieConsent from '@components/cookie-consent.svelte'
import { ViewTransitions } from 'astro:transitions'
import AditudeAdAnchor from '@components/aditude-ad-anchor.svelte'
import Footer from '@components/footer.astro'
import Image from '@components/image.astro'
import Nav from '@components/nav.astro'
import Panel from '@components/panel.astro'
import Header from '@components/header.astro'
import type { ComponentProps } from 'astro/types'
import type { GameraParameter } from '@statmuse/core/gamera'
import GridDropdown from '@components/grid-dropdown.astro'
import AnswerShare from '@components/answer-share.astro'
import TwitterShare from '@components/icons/twitter.astro'
import type { HeroProps } from '@lib/props'
import { marked } from 'marked'
import MenuLinks from '@components/menu-links.astro'

interface Props extends ComponentProps<typeof Header> {
  meta?: Metadata
  colors?: {
    foreground?: string
    background?: string
    foregroundColor?: string
    backgroundColor?: string
  }
  analytics?: AnalyticsPageviewProperties
  enableAdBanner?: boolean
  class?: string | null
  navProps?: ComponentProps<typeof Nav>
  hero?: HeroProps
  parameters?: Record<string, GameraParameter>
}

const {
  meta,
  colors,
  analytics = {},
  enableAdBanner = true,
  preferredDomain,
  query,
  conversationToken,
  money,
  navProps,
  hero,
  parameters,
} = Astro.props
const foreground = colors?.foreground || colors?.foregroundColor || '#fff'
const background = colors?.background || colors?.backgroundColor || '#00c1d8'

const style = colors
  ? `:root {
        --team-primary-color: ${background};
        --team-secondary-color: ${foreground};
      }
      .dynamic-color {
        background-color: ${background};
        color: ${foreground};
        fill: ${foreground};
      }
      .loading-bar-animate {
        background-color: initial;
      }
    `
  : undefined

const title = meta?.title
  ? `${meta.title} | StatMuse`
  : 'StatMuse | Search StatMuse, save time.'
const description =
  meta?.description ||
  'Instant answers to your NBA, NFL, NHL, MLB, Premier League and PGA questions. Stats, scores, schedules, odds, fantasy and more â€” just ask.'
const keywords =
  meta?.keywords ||
  'StatMuse, sports, stats, search, sports search, sports information, sports stats, statistics, fantasy stats, advanced stats, betting information, NBA stats, NFL stats, NHL stats, PGA stats, MLB stats, Premier League stats'
const defaultImageUrl = 'https://www.statmuse.com/images/sm-meta-banner-2.jpg'

const isError = (status?: number) => {
  if (!status) return true
  if (status >= 400) return true
  return false
}

const analyticsProperties = Object.assign(
  {
    is_error: isError(Astro.response.status),
    is_search: false,
    method: Astro.request.method,
    origin: 'web',
    origin_scope: 'browser',
    page_domain: 'unknown',
    page_type: 'unknown',
    query: undefined,
  },
  analytics,
)

const canonicalUrl = meta?.canonical
  ? meta.canonical.url.startsWith('http')
    ? meta.canonical.url
    : new URL(meta.canonical.url, Astro.url.origin).href
  : undefined

const markdown = hero?.markdown
const html = hero?.html
const markdownOrHtml = markdown || html
const content = markdown
  ? marked(hero.content, {
      gfm: true,
      breaks: true,
      mangle: false,
      headerIds: false,
    })
  : hero?.content

const hasSupplement = hero?.hasSupplement
---

<html lang="en">
  <head>
    <script is:inline>
      function setTheme(document) {
        if (
          localStorage.theme === 'dark' ||
          (!('theme' in localStorage) &&
            window.matchMedia('(prefers-color-scheme: dark)').matches)
        ) {
          document.documentElement.classList.add('dark')
        } else {
          document.documentElement.classList.remove('dark')
        }
      }

      setTheme(document)

      document.addEventListener('astro:before-swap', (ev) => {
        // Pass the incoming document to set the theme on it
        setTheme(ev.newDocument)
      })
    </script>

    <meta charset="utf-8" />
    <meta name="color-scheme" content="light only" />
    <meta content="width=device-width, initial-scale=1.0" name="viewport" />
    <meta name="format-detection" content="telephone=no" />
    <meta name="generator" content={Astro.generator} />
    <meta name="apple-itunes-app" content="app-id=1234654160" />
    <slot name="head">
      <title>{title}</title>
      <meta name="description" content={description} />
      <meta name="keywords" content={keywords} />
      <meta property="fb:app_id" content="915991831757165" />
      <meta property="og:site_name" content="StatMuse" />
      <meta property="og:title" content={meta?.facebook?.title || title} />
      <meta
        property="og:description"
        content={meta?.facebook?.description || description}
      />
      <meta property="og:locale" content="en_US" />
      <meta
        property="og:image"
        content={meta?.facebook?.imageUrl || defaultImageUrl}
      />
      <meta property="twitter:site" content="@StatMuse" />
      <meta property="twitter:creator" content="@StatMuse" />
      <meta property="twitter:title" content={meta?.twitter?.title || title} />
      <meta
        property="twitter:description"
        content={meta?.twitter?.description || description}
      />
      <meta property="twitter:card" content="summary_large_image" />
      <meta
        property="twitter:image"
        content={meta?.twitter?.imageUrl || defaultImageUrl}
      />
      {meta?.pageType && <meta name="page-type" content={meta?.pageType} />}
    </slot>
    {
      meta?.canonical && (
        <link
          rel="canonical"
          href={canonicalUrl}
          data-should-rewrite={meta.canonical.rewrite?.toString()}
        />
      )
    }
    <ViewTransitions />
    <link
      href="https://www.statmuse.com/opensearch.xml"
      rel="search"
      title="StatMuse Search"
      type="application/opensearchdescription+xml"
    />
    <link
      href="https://www.statmuse.com/favicon.ico"
      rel="icon"
      type="image/x-icon"
    />

    <!-- Set css variables for dynamic colors -->
    {style && <style set:html={style} />}

    <!-- Font face definitions -->
    <style is:inline>
      @font-face {
        font-family: 'calibre';
        src:
          url('/fonts/calibre.woff2') format('woff2-variations'),
          url('/fonts/calibre.woff') format('woff-variations'),
          url('/fonts/calibre.otf') format('opentype-variations');
        font-display: swap;
        font-style: normal;
        font-weight: 100 900;
      }

      @font-face {
        font-family: 'calibre-fallback';
        src: local('Arial');
        size-adjust: 88%;
        ascent-override: 114%;
        descent-override: 34%;
        line-gap-override: 0%;
      }
    </style>

    <!-- Preload custom fonts -->
    <link
      rel="preload"
      href="/fonts/calibre.woff2"
      as="font"
      type="font/woff2"
      crossorigin="anonymous"
    />
    <link
      rel="preload"
      href="/fonts/calibre.woff"
      as="font"
      type="font/woff2"
      crossorigin="anonymous"
    />
    <link
      rel="preload"
      href="/fonts/calibre.otf"
      as="font"
      type="font/woff2"
      crossorigin="anonymous"
    />

    <slot name="tradingview" />

    <meta name="analytics" content={Config.SEGMENT_WRITE_KEY} />
    <meta
      name="analytics:event:properties"
      content={JSON.stringify(analyticsProperties)}
    />
    {
      import.meta.env.PROD && (
        <Fragment>
          <script async src="/scripts/aditude-cmp.js" />
          <link
            rel="preload"
            as="script"
            href="https://www.googletagservices.com/tag/js/gpt.js"
          />
          <script
            async
            src="https://dn0qt3r0xannq.cloudfront.net/statmuse-3HFSjUvCes/statmuse-longform/prebid-load.js"
          />
        </Fragment>
      )
    }
  </head>
  <body
    class:list={{
      'text-gray-2 dark:text-gray-7 bg-gray-7 dark:bg-gray-2 text-pretty': true,
      'has-[#menu:checked]:overflow-y-scroll has-[#menu:checked]:fixed': true,
      'has-[#menu:checked]:w-full has-[#menu:checked]:h-full': true,
    }}
  >
    <div
      class:list={{
        'max-w-7xl mx-auto px-3 md:px-5 flex flex-col gap-3': true,
      }}
    >
      <Header {preferredDomain} {query} {conversationToken} {money} />
      <div class="flex flex-1 gap-3 -mt-3 md:mt-0">
        <MenuLinks class="shrink-0 hidden xl:flex sticky top-0" />
        <div class="min-w-0 w-full">
          {
            Astro.slots.has('hero') || hero?.content ? (
              <div
                class:list={{
                  'mb-3': true,
                  'grid grid-cols-1 gap-3 md:grid-cols-3 items-start':
                    hasSupplement,
                }}
              >
                <Panel
                  team
                  class:list={{
                    'md:col-span-2 h-full': hasSupplement,
                    'rounded-none border-0 md:rounded-2xl md:border': true,
                    '-mx-3 pb-2 pt-4 px-3 md:py-3 md:px-5 md:mx-0 whitespace-nowrap': true,
                    'flex flex-col-reverse gap-3 md:flex-row': !markdownOrHtml,
                    'flex flex-col-reverse gap-3 md:flex-row-reverse justify-between':
                      markdownOrHtml,
                  }}
                >
                  <slot name="hero" />
                  {hero?.imageUrl ? (
                    <Image
                      class:list={{
                        'h-32 md:max-w-[200px]': true,
                        'mt-2 -mb-2 md:mt-0 md:-mb-3 md:-ml-2': true,
                        'self-center md:self-end select-none': true,
                        'object-contain object-bottom': true,
                      }}
                      alt={hero.imageAlt ?? hero.content}
                      src={hero.imageUrl}
                      width={200}
                      height={200}
                      loading="eager"
                    />
                  ) : null}
                  <div class="flex flex-col justify-between md:items-start md:-mb-3">
                    {markdownOrHtml ? (
                      <div
                        class:list={{
                          'flex-1 flex flex-col justify-between text-center md:text-left': true,
                        }}
                      >
                        <h1
                          class:list={{
                            'font-semibold text-2xl leading-snug my-auto text-pretty': true,
                            // 'md:text-2xl lg:text-[1.33rem] xl:text-2xl': true,
                            '[&>p]:my-[1em] [&>ul]:my-[1em] [&>p>a]:underline [&>p>a]:text-team-secondary': true,
                          }}
                          set:html={markdown ? content : undefined}
                        >
                          {html ? (
                            <span
                              class="my-[1em] [&>a]:underline [&>a]:text-team-secondary whitespace-pre-wrap text-pretty"
                              set:html={content}
                            />
                          ) : null}
                        </h1>
                      </div>
                    ) : (
                      <div
                        class:list={{
                          'mx-auto md:mx-0 md:flex md:gap-3 md:items-center md:mt-5': true,
                          'mb-5 mt-5': !hero?.imageUrl,
                        }}
                      >
                        <h1 class="text-2xl leading-tight font-semibold text-center md:text-left text-pretty">
                          {hero?.url ? (
                            <a
                              class="text-current"
                              href={hero.url.href}
                              title={hero.url.title}
                              data-cy-team-name-link
                            >
                              {hero.content}
                            </a>
                          ) : (
                            hero?.content
                          )}
                        </h1>
                        {hero?.affiliation ? (
                          <div
                            class:list={{
                              'flex flex-1 items-center text-center': true,
                              'py-0.5 px-2.5 absolute left-3 bottom-3': true,
                              'md:relative md:left-auto md:bottom-auto': true,
                              'bg-team-secondary text-team-primary rounded-2xl': true,
                            }}
                          >
                            {hero?.affiliationUrl ? (
                              <a
                                class="text-inherit no-underline hover:no-underline"
                                href={hero?.affiliationUrl}
                                set:text={hero?.affiliation}
                              />
                            ) : (
                              <>{hero?.affiliation}</>
                            )}
                          </div>
                        ) : null}
                      </div>
                    )}
                    {navProps ? (
                      <Nav class="hidden md:flex" hero {...navProps} />
                    ) : null}
                  </div>
                  <div
                    class:list={{
                      'flex flex-row gap-2.5 items-center': true,
                      'absolute right-3 bottom-3 md:top-3 md:bottom-auto px-2 py-1': true,
                      'rounded-2xl bg-team-secondary text-team-primary': true,
                    }}
                  >
                    <TwitterShare shareUrl={Astro.url.href} />
                    {hero?.shareUrl ? (
                      <AnswerShare onlyIcon url={hero?.shareUrl} />
                    ) : null}
                  </div>
                  {parameters && (
                    <GridDropdown
                      class="hidden lg:flex w-52 absolute right-3 bottom-3"
                      {parameters}
                    />
                  )}
                </Panel>
                <slot name="hero-supplement" />
              </div>
            ) : null
          }
          {navProps ? <Nav class="md:hidden" {...navProps} /> : null}
          {
            parameters && (
              <GridDropdown class="flex lg:hidden mt-3" {parameters} />
            )
          }
          <div
            class:list={{
              'mt-3 lg:mt-0': !!navProps,
              'flex flex-col gap-3': true,
              [Astro.props.class ?? '']: !!Astro.props.class,
            }}
          >
            <slot />
          </div>
        </div>
      </div>
      <Footer />
    </div>
    <CookieConsent client:only="svelte" />
    {enableAdBanner && <AditudeAdAnchor client:only="svelte" />}
    <script>
      import { segment, getOrigin } from '@lib/analytics'
      import type { Session } from '@lib/session'
      import { session as sessionStore } from '@lib/session-store'
      import type { ContentReference, Subject } from '@statmuse/core/gamera'
      import type { ContentReference as KanedamaContentReference } from '@statmuse/core/kanedama'

      const flattenObj = (key: string, obj?: {}) => {
        return !obj
          ? {}
          : Object.entries(obj).reduce((x, [k, v]) => {
              return {
                ...x,
                [`${key}.${k}`]: v,
              }
            }, {})
      }

      const getReferenceIds = (
        contentReference?: ContentReference | KanedamaContentReference,
      ) => {
        if (!contentReference) return {}
        const { questionTags, answerTags } = contentReference

        if (
          questionTags?.playerIds ||
          questionTags?.teamIds ||
          answerTags?.playerIds ||
          answerTags?.teamIds
        ) {
          return {
            players: JSON.stringify(
              Array.from(
                new Set([
                  ...(questionTags?.playerIds ? questionTags.playerIds : []),
                  ...(answerTags?.playerIds ? answerTags.playerIds : []),
                ]),
              ),
            ),
            teams: JSON.stringify(
              Array.from(
                new Set([
                  ...(questionTags?.teamIds ? questionTags.teamIds : []),
                  ...(answerTags?.teamIds ? answerTags.teamIds : []),
                ]),
              ),
            ),
          }
        }

        if (questionTags?.assetIds || answerTags?.assetIds) {
          return {
            assets: JSON.stringify(
              Array.from(
                new Set([
                  ...(questionTags?.assetIds ? questionTags.assetIds : []),
                  ...(answerTags?.assetIds ? answerTags.assetIds : []),
                ]),
              ),
            ),
          }
        }
      }

      const getSubjectItems = (subject?: Subject) => {
        if (!subject) return {}
        return {
          subject_image: subject.imageUrl,
          subject_background_color: subject.colors.background,
          subject_foreground_color: subject.colors.foreground,
        }
      }

      // default page tracking
      segment.page()

      // custom Pageview event
      const eventProps = document.querySelector<HTMLMetaElement>(
        'meta[name="analytics:event:properties"]',
      )?.content

      if (eventProps) {
        const {
          disposition,
          tokenizationScore,
          contentReference,
          subject,
          ...props
        } = JSON.parse(eventProps)
        segment.track('Pageview', {
          ...props,
          ...flattenObj('disposition', disposition),
          ...flattenObj('tokenizationScore', tokenizationScore),
          ...getReferenceIds(contentReference),
          ...getSubjectItems(subject),
          origin: getOrigin(navigator.userAgent),
        })

        var tude = window.tude || { cmd: [] }
        tude.cmd.push(function () {
          tude.setPageTargeting({
            pagetype: props.page_domain + '-' + props.page_type,
          })
        })
      }

      // hack: 'astro:page-load' does not fire consistently
      // TODO: move into astro:page-load callback
      document.addEventListener('astro:after-swap', async () => {
        // default page tracking
        segment.page()

        // custom Pageview event
        const eventProps = document.querySelector<HTMLMetaElement>(
          'meta[name="analytics:event:properties"]',
        )?.content

        if (eventProps) {
          const {
            disposition,
            tokenizationScore,
            contentReference,
            subject,
            ...props
          } = JSON.parse(eventProps)
          segment.track('Pageview', {
            ...props,
            ...flattenObj('disposition', disposition),
            ...flattenObj('tokenizationScore', tokenizationScore),
            ...getReferenceIds(contentReference),
            ...getSubjectItems(subject),
            origin: getOrigin(navigator.userAgent),
          })

          var tude = window.tude || { cmd: [] }
          tude.cmd.push(function () {
            tude.setPageTargeting({
              pagetype: props.page_domain + '-' + props.page_type,
            })
          })
        }
      })

      document.addEventListener('astro:page-load', async () => {
        /**
         * Given window and document, add or remove "selected" class to league nav
         * links if current window location matches nav href. Note that the argument
         * tests are more comprehensive to protect functions downstream of this.
         *
         * @param {Window} win - DOM window
         * @param {Element} ctag - Node Element with data for canonical link
         *
         */
        const shouldRewriteUrl = (win: Window, ctag: HTMLLinkElement) => {
          return (
            win instanceof Window &&
            win.history instanceof History &&
            win.location instanceof Location &&
            ctag.href !== win.location.href &&
            ctag.dataset.shouldRewrite === 'true'
          )
        }

        /**
         * Rewrite URL.
         *
         * @param {Window} win - DOM window
         * @param {HTMLDocument} doc - DOM document
         * @param {String} newUrl - Destination URL
         *
         */
        const rewriteUrl = (win: Window, doc: Document, newUrl: string) =>
          win.history.replaceState(null, doc.title, newUrl)

        /**
         * Given window and document, get canonical link tag and check if URL should be
         * rewritten, in which case call rewriteUrl and updateLeagueNav.
         *
         * @param {Window} win - DOM window
         * @param {HTMLDocument} doc - DOM document
         *
         */
        const maybeRewriteUrl = (win: Window, doc: Document) => {
          const canonicalTag = doc.querySelector(
            'link[rel="canonical"]',
          ) as HTMLLinkElement | null
          if (!canonicalTag) return

          if (shouldRewriteUrl(win, canonicalTag)) {
            rewriteUrl(win, doc, canonicalTag.href)
          }
        }

        maybeRewriteUrl(window, document)
      })

      document.addEventListener(
        'astro:page-load',
        async () => {
          try {
            const session: Session = await fetch('/auth/session').then((r) =>
              r.json(),
            )
            sessionStore.set(session)

            if (session.type === 'visitor') {
              segment.identify(`v:${session.properties.id}`, {
                origin: session.properties.origin,
                origin_scope: 'browser',
              })
            }
            if (session.type === 'user') {
              segment.identify(`u:${session.properties.id}`, {
                origin: session.properties.origin,
                origin_scope: 'browser',
              })
            }
          } catch (e) {}
        },
        { once: true },
      )
    </script>
  </body>
</html>
