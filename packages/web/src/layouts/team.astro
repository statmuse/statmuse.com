---
import TeamRepresentatives from '@components/representatives.astro'
import Explore from '@components/explore.astro'
import Layout from '@layouts/base.astro'
import {
  type GameraDomain,
  type GameraTeamSeasonBio,
  getDefaultTeamLogoUrl,
  getUrlForEntity,
  tokensToText,
  type GameraParameter,
  type GameraTeamFranchiseOverview,
} from '@statmuse/core/gamera'
import { getLeagueKeywords, type Metadata } from '@lib/meta'
import { imageForgeUrl } from '@statmuse/core/path'
import type { AnalyticsPageviewProperties } from '@lib/analytics'
import AnswerCards from '@components/answer-cards.astro'
import { ANSWER_CARDS_ENABLED } from 'src/config'
import AditudeAdBanner from '@components/aditude-ad-banner.svelte'
import Nav from '@components/nav.astro'
import GridDropdown from '@components/grid-dropdown.astro'
import type { LeagueParam } from '@lib/params'
import Select from '@components/select.svelte'
import type { NavLink } from 'src/types'
import type { ComponentProps } from 'astro/types'
import { getTeamFranchiseLatestSeason } from '@lib/team'
import Hero from '@components/hero.astro'

interface Props extends ComponentProps<typeof Layout> {
  bio: GameraTeamSeasonBio | GameraTeamFranchiseOverview
  page:
    | 'overview'
    | 'stats'
    | 'schedule'
    | 'fixtures'
    | 'roster'
    | 'splits'
    | 'history'
}

const { meta, query, page, parameters, analytics = {} } = Astro.props
const bio = 'bio' in Astro.props.bio ? Astro.props.bio.bio : Astro.props.bio
const isTeam = 'franchise' in bio
const isFranchise = !isTeam

const domain = bio.domain.toUpperCase() as GameraDomain
const preferredDomain = domain.toLowerCase()
const league = (domain === 'EPL' ? 'fc' : preferredDomain) as LeagueParam
const teamFranchiseUrl = isTeam ? getUrlForEntity(bio.franchise) : undefined

const canonical = { url: Astro.url.pathname + Astro.url.search }
const teamPath = getUrlForEntity({
  type: 'teamSeason',
  domain,
  id: bio.teamId.toString(),
  display: bio.name,
})
const year = isTeam ? bio.season.name : undefined
const currentSeason = isTeam
  ? bio.season?.all?.find((s) => s.name === year)
  : undefined
const parts = currentSeason?.entity.id.split('/') || []
let yearId: string | undefined = parts[1]

if (isFranchise) {
  const latestSeason = await getTeamFranchiseLatestSeason({
    context: Astro,
    domain,
    teamId: Astro.props.bio.teamId.toString(),
  })

  yearId = latestSeason?.entity.id.split('/')[1]
}

const links: NavLink[] = []

if (isTeam) {
  if (bio.hasStats) {
    links.push(
      { text: 'Overview', href: `${teamPath}/${yearId}`, param: 'overview' },
      { text: 'Stats', href: `${teamPath}/stats/${yearId}`, param: 'stats' },
    )
  }

  links.push(
    domain === 'EPL'
      ? {
          text: 'Fixtures',
          href: `${teamPath}/fixtures/${yearId}`,
          param: 'fixtures',
        }
      : {
          text: 'Schedule',
          href: `${teamPath}/schedule/${yearId}`,
          param: 'schedule',
        },
  )

  if (bio.hasRoster) {
    links.push({
      text: 'Roster',
      href: `${teamPath}/roster/${yearId}`,
      param: 'roster',
    })
  }

  if (bio.hasStats) {
    links.push({
      text: 'Splits',
      href: `${teamPath}/splits/${yearId}`,
      param: 'splits',
    })
  }
} else if (yearId) {
  links.push(
    { text: 'Overview', href: `${teamPath}/${yearId}`, param: 'overview' },
    { text: 'Stats', href: `${teamPath}/stats/${yearId}`, param: 'stats' },
  )

  if (domain === 'EPL') {
    links.push({
      text: 'Fixtures',
      href: `${teamPath}/fixtures/${yearId}`,
      param: 'fixtures',
    })
  } else {
    links.push({
      text: 'Schedule',
      href: `${teamPath}/schedule/${yearId}`,
      param: 'schedule',
    })
  }

  links.push(
    { text: 'Roster', href: `${teamPath}/roster/${yearId}`, param: 'roster' },
    { text: 'Splits', href: `${teamPath}/splits/${yearId}`, param: 'splits' },
  )
}

links.push({ text: 'History', href: `${teamPath}/history`, param: 'history' })

const title = `${bio.name} Overview`
const description = isTeam
  ? bio.summaryNlg
    ? tokensToText(bio.summaryNlg)
    : undefined
  : `View ${bio.name} career stats, including game logs, splits, and more.`
const keywords = `${getLeagueKeywords(domain)} ${
  bio.name
} career stats statistics`

const facebook = {
  imageUrl: imageForgeUrl({
    url: bio.logoImageUrl,
    bgColor: domain === 'NFL' ? 'EFF4F8' : bio.colors?.backgroundColor,
    type: 'facebook',
  }),
}
const twitter = {
  imageUrl: imageForgeUrl({
    url: bio.logoImageUrl,
    bgColor: domain === 'NFL' ? 'EFF4F8' : bio.colors?.backgroundColor,
    type: 'twitter',
  }),
}

const shareUrl = meta?.canonical?.url
  ? Astro.url.origin + meta.canonical.url
  : Astro.url.href

const selectProps = isTeam
  ? {
      hideLabel: true,
      initial: currentSeason?.entity.id,
      options: bio.season.all.map((season) => {
        const url = Astro.url.origin + getUrlForEntity(season.entity)
        return {
          value: season.entity.id,
          label: season.name,
          url,
        }
      }),
    }
  : {}

const navProps: ComponentProps<typeof Nav> = {
  teamColors: true,
  links,
  selected: page,
  href: (p) => `${teamPath}/${p}`,
}

const share = {
  type: 'profile',
  url: shareUrl,
}
---

<Layout
  colors={bio.colors}
  meta={{
    title,
    description,
    keywords,
    canonical,
    facebook,
    twitter,
    pageType: 'team',
    ...(meta || {}),
  }}
  analytics={{
    query,
    is_search: true,
    page_domain:
      domain.toLowerCase() as AnalyticsPageviewProperties['page_domain'],
    page_type: 'team',
    disposition: isTeam ? bio.disposition : Astro.props.bio.disposition,
    ...analytics,
  }}
  {share}
>
  <Hero
    content={bio.name}
    url={teamFranchiseUrl
      ? {
          href: teamFranchiseUrl,
        }
      : undefined}
    {navProps}
    {share}
  >
    <Fragment slot="hero">
      <TeamRepresentatives
        class:list={{
          'h-32': true,
          'mt-2 -mb-2 md:mt-0 @lg/main:-mb-3 @lg/main:-ml-10 @lg/main:mr-3': true,
          'self-center @lg/main:self-end select-none': true,
          'object-contain object-bottom': true,
        }}
        representatives={isTeam
          ? bio.teamRepresentatives
          : bio.franchiseRepresentatives}
        fallback={bio.logoImageUrl || getDefaultTeamLogoUrl(domain)}
        alt={`Logo for the${isTeam ? ' ' + bio.season.name : ''} ${bio.name}`}
      />
      {
        isTeam ? (
          <Select
            client:load
            class="hidden @2xl/main:flex w-32 absolute right-3 bottom-3"
            {...selectProps}
          />
        ) : null
      }
    </Fragment>
  </Hero>
  <div
    class="md:hidden h-[50px] md:h-[90px] mb-1.5 flex justify-center items-center"
  >
    <AditudeAdBanner
      client:only="svelte"
      divId="pb-slot-anchor"
      slotId="pb-slot-anchor"
      placeholderClass="w-[320px] md:w-[728px] h-[50px] md:h-[90px]"
      onlyMobile
    />
  </div>
  {
    isTeam ? (
      <Select client:load class="@2xl/main:hidden" {...selectProps} />
    ) : null
  }
  {parameters && <GridDropdown class="flex" {parameters} />}
  <slot />
  <Explore {league} />
  {ANSWER_CARDS_ENABLED && <AnswerCards {domain} />}
</Layout>
