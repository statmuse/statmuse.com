---
import Header from '@components/header.astro'
import TeamRepresentatives from '@components/representatives.astro'
import AnswerShare from '@components/answer-share.astro'
import TwitterShare from '@components/icons/twitter.astro'
import Explore from '@components/explore.astro'
import Layout from '@layouts/main.astro'
import {
  type GameraDomain,
  type GameraTeamSeasonBio,
  getDefaultTeamLogoUrl,
  getUrlForEntity,
  tokensToText,
  type GameraParameter,
} from '@statmuse/core/gamera'
import { getLeagueKeywords, type Metadata } from '@lib/meta'
import { imageForgeUrl } from '@statmuse/core/path'
import type { AnalyticsPageviewProperties } from '@lib/analytics'
import AnswerCards from '@components/answer-cards.astro'
import { ANSWER_CARDS_ENABLED } from 'src/config'
import AditudeAdBanner from '@components/aditude-ad-banner.svelte'
import HeroPanel from '@components/hero-panel.astro'
import Nav from '@components/nav.astro'
import GridDropdown from '@components/grid-dropdown.astro'
import type { LeagueParam } from '@lib/params'
import Select from '@components/select.svelte'
import type { NavLink } from 'src/types'

interface Props {
  bio: GameraTeamSeasonBio
  page:
    | 'overview'
    | 'stats'
    | 'schedule'
    | 'fixtures'
    | 'roster'
    | 'splits'
    | 'history'
  meta?: Metadata
  query?: string
  analytics?: AnalyticsPageviewProperties
  parameters?: Record<string, GameraParameter>
}

const { bio, meta, query, page, parameters, analytics = {} } = Astro.props

const domain = bio.domain.toUpperCase() as GameraDomain
const preferredDomain = domain.toLowerCase()
const league = (domain === 'EPL' ? 'fc' : preferredDomain) as LeagueParam
const teamFranchiseUrl = getUrlForEntity(bio.franchise)

const canonical = { url: Astro.url.pathname + Astro.url.search }
const teamPath = getUrlForEntity({
  type: 'teamSeason',
  domain,
  id: bio.teamId.toString(),
  display: bio.name,
})
const year = bio.season.name
const currentSeason = bio.season?.all?.find((s) => s.name === year)
const [, yearId] = currentSeason?.entity.id.split('/') || []

const links: NavLink[] = []

if (bio.hasStats) {
  links.push(
    { text: 'Overview', href: `${teamPath}/${yearId}`, param: 'overview' },
    { text: 'Stats', href: `${teamPath}/stats/${yearId}`, param: 'stats' },
  )
}

links.push(
  domain === 'EPL'
    ? {
        text: 'Fixtures',
        href: `${teamPath}/fixtures/${yearId}`,
        param: 'fixtures',
      }
    : {
        text: 'Scores & Schedule',
        href: `${teamPath}/schedule/${yearId}`,
        param: 'schedule',
      },
)

if (bio.hasRoster) {
  links.push({
    text: 'Roster',
    href: `${teamPath}/roster/${yearId}`,
    param: 'roster',
  })
}

if (bio.hasStats) {
  links.push({
    text: 'Splits',
    href: `${teamPath}/splits/${yearId}`,
    param: 'splits',
  })
}

links.push({ text: 'History', href: `${teamPath}/history`, param: 'history' })

const title = `${bio.name} Overview`
const description = bio.summaryNlg ? tokensToText(bio.summaryNlg) : undefined
const keywords = `${getLeagueKeywords(domain)} ${
  bio.name
} career stats statistics`

const facebook = {
  imageUrl: imageForgeUrl({
    url: bio.logoImageUrl,
    bgColor: domain === 'NFL' ? 'EFF4F8' : bio.colors?.backgroundColor,
    type: 'facebook',
  }),
}
const twitter = {
  imageUrl: imageForgeUrl({
    url: bio.logoImageUrl,
    bgColor: domain === 'NFL' ? 'EFF4F8' : bio.colors?.backgroundColor,
    type: 'twitter',
  }),
}

const shareUrl = meta?.canonical?.url
  ? Astro.url.origin + meta.canonical.url
  : Astro.url.href

const selectProps = {
  hideLabel: true,
  initial: currentSeason?.entity.id,
  options: bio.season.all.map((season) => {
    const url = Astro.url.origin + getUrlForEntity(season.entity)
    return {
      value: season.entity.id,
      label: season.name,
      url,
    }
  }),
}
---

<Layout
  class="flex flex-col gap-3"
  colors={bio.colors}
  meta={{
    title,
    description,
    keywords,
    canonical,
    facebook,
    twitter,
    pageType: 'team',
    ...(meta || {}),
  }}
  analytics={{
    query,
    is_search: true,
    page_domain:
      domain.toLowerCase() as AnalyticsPageviewProperties['page_domain'],
    page_type: 'team',
    disposition: bio.disposition,
    ...analytics,
  }}
>
  <Header {preferredDomain} {query} />
  <HeroPanel class="-mt-3 flex flex-col-reverse gap-3 md:flex-row">
    <TeamRepresentatives
      class:list={{
        'h-32': true,
        'mt-2 -mb-2 md:mt-0 md:-mb-3 md:-ml-10 md:mr-3': true,
        'self-center md:self-end select-none': true,
        'object-contain object-bottom': true,
      }}
      representatives={bio.teamRepresentatives}
      fallback={bio.logoImageUrl || getDefaultTeamLogoUrl(domain)}
      alt={`Logo for the ${bio.season.name} ${bio.name}`}
    />
    <div class="flex flex-col justify-between items-start -mb-3 md:mt-5">
      <div class="mx-auto md:mx-0 md:items-center">
        <h1
          class="text-[2rem] leading-tight font-semibold text-center md:text-left"
        >
          <a
            class="text-current"
            href={teamFranchiseUrl}
            title={`${bio.name} Franchise`}
            data-cy-team-name-link
          >
            {bio.name}
          </a>
        </h1>
      </div>
      <Nav
        class="hidden md:flex"
        hero
        {links}
        selected={page}
        href={(p) => `${teamPath}/${p}`}
      />
    </div>
    <div
      class:list={{
        'flex flex-row gap-2.5 items-center': true,
        'absolute right-3 bottom-3 md:top-3 md:bottom-auto px-2 py-1': true,
        'rounded-2xl bg-team-secondary text-team-primary': true,
      }}
    >
      <TwitterShare shareUrl={Astro.url.href} />
      <AnswerShare onlyIcon url={shareUrl} />
    </div>
    <Select
      client:load
      class="hidden lg:flex w-32 absolute right-3 bottom-3"
      {...selectProps}
    />
  </HeroPanel>
  <div class="h-[50px] md:h-[90px] mb-1.5 flex justify-center items-center">
    <AditudeAdBanner client:only="svelte" />
  </div>
  <Nav
    class="md:hidden"
    teamColors
    {links}
    selected={page}
    href={(p) => `${teamPath}/${p}`}
  />
  <Select client:load class="md:w-32 md:self-end lg:hidden" {...selectProps} />
  {parameters && <GridDropdown class="flex" {parameters} />}
  <slot />
  <Explore {league} />
  {ANSWER_CARDS_ENABLED && <AnswerCards {league} />}
</Layout>
