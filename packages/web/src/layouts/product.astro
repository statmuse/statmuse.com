---
import TabbedLayout from '@layouts/tabbed.astro'
import type { Metadata } from '@lib/meta'

interface Props {
  league: string
  meta?: Metadata
  prefixPath: string
}

const { league, meta, prefixPath, ...rest } = Astro.props

const domains = ['NBA', 'NFL', 'NHL', 'MLB', 'PGA', 'Premier League']

const productPages = [
  {
    href: '/product/examples',
    title: 'Examples',
  },
  {
    href: '/product/data',
    title: 'Data Coverage',
  },
]
---

<TabbedLayout
  {meta}
  title="The elephant of sports and financial information."
  prefixPath={Astro.props.prefixPath}
  pages={productPages}
  {...rest}
>
  <div class="flex flex-wrap gap-6 md:gap-12 py-12">
    <div class="w-full md:w-64 text-sm md:text-base text-[#333]">
      <div class="block md:hidden">
        <select
          id="select"
          class="w-full font-semibold text-sm text-primary border border-[#e4e4e4] p-[0.5em]"
        >
          {
            domains.map((domain) => (
              <option
                value={
                  domain === 'Premier League' ? 'fc' : domain.toLowerCase()
                }
                selected={domain.toLowerCase() === league}
              >
                {domain}
              </option>
            ))
          }
        </select>
      </div>
      <ul class="hidden md:block">
        {
          domains.map((domain) => (
            <li
              class={`rounded-md hover:bg-[#f4f6f9] ${
                ((domain === 'Premier League' && league === 'fc') ||
                  league === domain.toLowerCase()) &&
                'font-semibold bg-[#f4f6f9]'
              }`}
            >
              <a
                class="block p-3 cursor-pointer"
                href={`${prefixPath}/${
                  domain === 'Premier League' ? 'fc' : domain.toLowerCase()
                }`}
              >
                {domain}
              </a>
            </li>
          ))
        }
      </ul>
    </div>
    <div class="flex-1">
      <slot />
    </div>
  </div>
</TabbedLayout>

<script define:vars={{ prefixPath }}>
  const onChange = (e) => {
    window.location.pathname = `${prefixPath}/${e.target.value}`
  }
  document.getElementById('select')?.addEventListener('change', onChange)
</script>
