---
import Layout from '@layouts/main.astro'
import Header from '@components/header.astro'
import Container from '@components/container.astro'
import { getAsksIndex, ASK_LIMIT, type Ask } from '@statmuse/core/asks'

const { league } = Astro.params

const dateFromParam = (x: string) => {
  const date = new Date(x)
  if (date.toString() !== 'Invalid Date') {
    return date
  }
  return
}

const parseSearchParams = (params: URLSearchParams) => {
  const next = (params.get('n') || '').replaceAll('_', ':')
  const previous = (params.get('p') || '').replaceAll('_', ':')
  const page = params.get('page') || undefined
  return {
    next: dateFromParam(next),
    previous: dateFromParam(previous),
    page,
  }
}

type SearchParams = ReturnType<typeof parseSearchParams>

type PaginationOptions = {
  current_page?: 'first-last' | 'first' | 'last'
  n?: string
  p?: string
}

const paginate = (
  asks: Ask[],
  { next, previous, page }: SearchParams
): PaginationOptions => {
  if (asks.length === 0) return {}

  if (!next && !previous && !page) {
    console.log(asks[asks.length - 1])
    return {
      current_page: asks.length <= ASK_LIMIT ? 'first-last' : 'first',
      n:
        asks.length <= ASK_LIMIT
          ? undefined
          : asks[asks.length - 1].last_web_search_at
              ?.toISOString()
              .replaceAll(':', '_'),
    }
  }

  if (page && page === 'last') {
    return {
      current_page: asks.length <= ASK_LIMIT ? 'first-last' : 'last',
      p:
        asks.length <= ASK_LIMIT
          ? undefined
          : asks[0].last_web_search_at?.toISOString().replaceAll(':', '_'),
    }
  }

  if (next && asks.length <= ASK_LIMIT) {
    return {
      current_page: 'last',
      p: asks[0].last_web_search_at?.toISOString().replaceAll(':', '_'),
    }
  }

  if (previous && asks.length <= ASK_LIMIT) {
    return {
      current_page: 'first',
      n: asks[asks.length - 1].last_web_search_at
        ?.toISOString()
        .replaceAll(':', '_'),
    }
  }

  return {
    n: asks[asks.length - 1].last_web_search_at
      ?.toISOString()
      .replaceAll(':', '_'),
    p: asks[0].last_web_search_at?.toISOString().replaceAll(':', '_'),
  }
}

const searchParams = parseSearchParams(Astro.url.searchParams)

const leagues = ['NBA', 'NFL', 'NHL', 'MLB', 'PGA']

let asks = await getAsksIndex(league ? [league] : undefined, searchParams)

const paginationOptions = paginate(asks, searchParams)

if (
  searchParams.previous ||
  (searchParams.page && searchParams.page === 'last')
) {
  asks = asks.slice(1)
} else {
  asks = asks.slice(0, ASK_LIMIT)
}

const headline = (str?: string) => {
  if (str && leagues.includes(str.toUpperCase())) {
    return `Trending ${str.toUpperCase()} Searches`
  }

  if (str === 'fantasy') {
    return 'Trending Fantasy Football Searches'
  }

  if (str === 'money') {
    return 'Trending Finance Searches'
  }
}

const createLink = (league?: string, params?: Record<string, string>) => {
  let link = league ? `/${league}/questions` : '/questions'
  if (params) {
    link = link + `?${new URLSearchParams(params).toString()}`
  }
  return link
}

const meta = {}
---

<Layout>
  <Header />
  <Container>
    <nav style="margin-top: 15px;">
      <div style="display: flex; gap: 10px;">
        {
          ['All', ...leagues].map((x) => (
            <a
              class={`flex items-center justify-center min-w-[80px] border border-primary rounded-md hover:no-underline hover:text-white hover:bg-primary p-[5px] ${
                x.toLowerCase() === (league || 'All')
                  ? 'bg-primary text-white'
                  : 'text-primary'
              } %>`}
              href={
                x === 'All' ? '/questions' : `/${x.toLowerCase()}/questions`
              }
              set:html={x}
            />
          ))
        }
      </div>
      <div style="display: flex; gap: 10px; margin-top: 10px;">
        {
          ['Fantasy Football', 'Money'].map((x) => (
            <a
              class={`flex items-center justify-center min-w-[80px] border border-secondary rounded-md hover:no-underline hover:text-white hover:bg-secondary p-[5px] ${
                x.toLowerCase().includes(league || '')
                  ? 'bg-secondary text-white'
                  : 'text-secondary'
              } %>`}
              href={x === 'Money' ? '/money/questions' : '/fantasy/questions'}
              set:html={x}
            />
          ))
        }
      </div>
    </nav>
  </Container>
  <Container>
    <section>
      <h2 class="text-2xl font-semibold my-5">{headline(league)}</h2>
      <div class="space-y-5">
        {
          asks.map((ask) => (
            <article class="flex">
              <div
                class="hidden sm:block h-24 w-36 rounded-lg mr-2.5 overflow-hidden"
                style={`background: ${ask.hex_background}`}
              >
                <a
                  class="h-full flex justify-center items-end"
                  href="<%= ask_path(@conn, ask) %>"
                >
                  <img
                    class="h-[90%]"
                    src={ask.image_url}
                    alt="player illustration"
                  />
                </a>
              </div>
              <div class="flex-1 flex flex-col">
                <h3 class="text-lg font-semibold">
                  <a href="<%= ask_path(@conn, ask) %>">{ask.query}</a>
                </h3>
                <div class="italic opacity-50">{ask.last_web_search_at}</div>
                <div
                  class="flex-1 flex items-center border-l-2 border-secondary pl-1.5"
                  set:html={ask.answer_html}
                />
              </div>
            </article>
          ))
        }
      </div>
    </section>

    <ul class="text-center my-10 space-x-2">
      <li class="inline-block">
        <a
          href={createLink(league)}
          class=`block p-1 border-b-2 border-transparent hover:border-secondary hover:no-underline ${['first', 'first-last'].includes(paginationOptions.current_page || '') ? 'text-black pointer-events-none' : ''}`
        >
          « First
        </a>
      </li>
      <li class="inline-block">
        <a
          href={createLink(league, { p: paginationOptions.p || '' })}
          class=`block p-1 border-b-2 border-transparent hover:border-secondary hover:no-underline ${paginationOptions.p ? '' : 'text-[#c5c9cc] pointer-events-none'}`
        >
          &lt; Previous
        </a>
      </li>
      <li class="inline-block">
        <a
          href={createLink(league, { n: paginationOptions.n || '' })}
          class=`block p-1 border-b-2 border-transparent hover:border-secondary hover:no-underline ${paginationOptions.n ? '' : 'text-[#c5c9cc] pointer-events-none'}`
        >
          Next &gt;
        </a>
      </li>
      <li class="inline-block">
        <a
          href={createLink(league, { page: 'last' })}
          class=`block p-1 border-b-2 border-transparent hover:border-secondary hover:no-underline ${['last', 'first-last'].includes(paginationOptions.current_page || '') ? 'text-black pointer-events-none' : ''}`
        >
          Last »
        </a>
      </li>
    </ul>
  </Container>
</Layout>
