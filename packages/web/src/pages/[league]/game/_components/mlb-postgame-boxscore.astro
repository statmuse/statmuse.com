---
import { getGames, getPlayByPlay, getStandingsRaw } from '@lib/gamera'
import Layout from './layout.astro'
import type { MlbGameDataResponse, MlbStatKey } from '@statmuse/core/gamera'
import { find } from 'lodash-es'
import PostgameHero from './postgame-hero.astro'
import GameInfo from './game-info.astro'
import Schedule from './schedule.astro'
import Standings from './standings.astro'
import Linescore from './linescore.svelte'
import PlayByPlay from './play-by-play.svelte'
import BattingStats from './batting-stats.svelte'
import PitchingStats from './pitching-stats.svelte'
import GameSummary from './game-summary.astro'
import * as store from './stores'
import { Caching } from '@lib/caching'
import PlayerModal from './player-modal.svelte'
import GameState from './game-state.svelte'
import BattingSummary from './batting-summary.svelte'

interface Props {
  gameData: MlbGameDataResponse<MlbStatKey>
  gameId: string
}

const { gameData, gameId } = Astro.props

const {
  seasonYearDisplay: seasonYear,
  awayTeam: awayTeamModel,
  homeTeam: homeTeamModel,
  teams,
  venue,
  weather,
  officials,
  gameTimestamp,
  summary,
} = gameData

const [awayTeamGames, standings, playByPlay] = await Promise.all([
  getGames({
    context: Astro,
    domain: 'mlb',
    teamId: awayTeamModel.teamId,
    seasonYear,
    gameState: ['completed', 'inProgress', 'scheduled'],
  }),
  getStandingsRaw({ context: Astro, domain: 'mlb' }),
  getPlayByPlay({ context: Astro, gameId }),
])

store.init({ gameData, playByPlay })

const awayTeam = find(teams, { teamId: awayTeamModel.teamId })
const homeTeam = find(teams, { teamId: homeTeamModel.teamId })

Caching.swr(Astro)
---

<Layout status={gameData.gameStatus} {awayTeam} {homeTeam} useContainerQuery>
  <PostgameHero
    slot="hero"
    timestamp={gameTimestamp}
    {awayTeam}
    awayRecord={awayTeamModel.record}
    {homeTeam}
    homeRecord={homeTeamModel.record}
  />

  <div slot="summary" class="flex flex-col gap-3">
    <Linescore {awayTeam} {homeTeam} final />
    <div class="flex gap-3">
      <div class="flex-1 flex flex-col gap-3">
        <div class="group/plays hidden @xl/boxscore:block">
          <div
            class="bg-gray-6 dark:bg-gray-4 text-gray-5 border border-gray-6 dark:border-gray-3 flex text-center mb-3 rounded-full relative overflow-clip"
          >
            <div
              class="absolute h-full w-1/2 bg-gray-8 dark:bg-gray-7 rounded-full left-0 group-has-[#scoring:checked]/plays:translate-x-0 group-has-[#all:checked]/plays:translate-x-full transition-transform ease-out"
            >
            </div>
            <label
              for="scoring"
              class:list={{
                'flex-1 py-1 hover:cursor-pointer relative': true,
                'group-has-[#scoring:checked]/plays:text-gray-2': true,
              }}
            >
              Scoring Plays
            </label>
            <label
              for="all"
              class:list={{
                'flex-1 py-1 hover:cursor-pointer relative': true,
                'group-has-[#all:checked]/plays:text-gray-2': true,
              }}
            >
              All Plays
            </label>
          </div>
          <div class="hidden has-[#scoring:checked]:flex flex-col gap-3">
            <input
              class="absolute opacity-0"
              type="radio"
              name="plays"
              id="scoring"
              checked
            />
            <PlayByPlay {awayTeam} {homeTeam} scoring />
          </div>
          <div class="hidden has-[#all:checked]:flex flex-col gap-3">
            <input
              class="absolute opacity-0"
              type="radio"
              name="plays"
              id="all"
            />
            <PlayByPlay {awayTeam} {homeTeam} />
          </div>
        </div>
        <div class="@xl/boxscore:hidden flex flex-col gap-3">
          <PlayByPlay {awayTeam} {homeTeam} scoring />
          <Schedule
            domain="MLB"
            teams={teams ?? []}
            currentGameId={Number.parseInt(gameId)}
            games={awayTeamGames?.games}
          />
          <Standings
            {standings}
            awayTeamId={awayTeamModel.teamId}
            homeTeamId={homeTeamModel.teamId}
          />
          <GameSummary {summary} />
          <GameInfo {venue} {weather} {officials} {gameTimestamp} />
        </div>
      </div>
      <div
        class="flex-1 hidden @xl/boxscore:flex flex-col gap-3 overflow-hidden"
      >
        <div class="group/teams">
          <div
            class="bg-gray-6 dark:bg-gray-4 text-gray-5 border border-gray-6 dark:border-gray-3 flex text-center mb-3 rounded-full relative overflow-clip"
          >
            <div
              class="absolute h-full w-1/2 bg-gray-8 dark:bg-gray-7 rounded-full left-0 group-has-[#away-box:checked]/teams:translate-x-0 group-has-[#home-box:checked]/teams:translate-x-full transition-transform ease-out"
            >
            </div>
            <label
              for="away-box"
              class:list={{
                'flex-1 py-1 hover:cursor-pointer relative': true,
                'group-has-[#away-box:checked]/teams:text-gray-2': true,
              }}
            >
              {awayTeam.nickname}
            </label>
            <label
              for="home-box"
              class:list={{
                'flex-1 py-1 hover:cursor-pointer relative': true,
                'group-has-[#home-box:checked]/teams:text-gray-2': true,
              }}
            >
              {homeTeam.nickname}
            </label>
          </div>
          <div class="hidden has-[#away-box:checked]:flex flex-col gap-3">
            <input
              class="absolute opacity-0"
              type="radio"
              name="box"
              id="away-box"
              checked
            />
            <BattingStats client:load teamKey="away" final />
            <BattingSummary teamKey="away" />
            <PitchingStats teamKey="away" />
          </div>
          <div class="hidden has-[#home-box:checked]:flex flex-col gap-3">
            <input
              class="absolute opacity-0"
              type="radio"
              name="box"
              id="home-box"
            />
            <BattingStats client:load teamKey="home" final />
            <BattingSummary teamKey="home" />
            <PitchingStats teamKey="home" />
          </div>
        </div>
        <Schedule
          domain="MLB"
          teams={teams ?? []}
          currentGameId={Number.parseInt(gameId)}
          games={awayTeamGames?.games}
        />
        <Standings
          {standings}
          awayTeamId={awayTeamModel.teamId}
          homeTeamId={homeTeamModel.teamId}
        />
        <GameSummary {summary} />
        <GameInfo {venue} {weather} {officials} {gameTimestamp} />
      </div>
    </div>
  </div>

  <Fragment slot="away">
    <BattingStats client:load teamKey="away" final />
    <BattingSummary teamKey="away" />
    <PitchingStats teamKey="away" />
  </Fragment>

  <Fragment slot="home">
    <BattingStats client:load teamKey="home" final />
    <BattingSummary teamKey="home" />
    <PitchingStats teamKey="home" />
  </Fragment>

  <PlayByPlay slot="plays" {awayTeam} {homeTeam} />

  <GameState client:load {gameData} {playByPlay} />

  <PlayerModal client:only="svelte" slot="modal" />
</Layout>
