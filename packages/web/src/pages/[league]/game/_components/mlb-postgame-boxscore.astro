---
import { getGames, getPlayByPlay, getStandingsRaw } from '@lib/gamera'
import Layout from './layout.astro'
import { type MlbGameDataResponse } from '@statmuse/core/gamera'
import { find } from 'lodash-es'
import PostgameHero from './postgame-hero.astro'
import GameInfo from './game-info.astro'
import Schedule from './schedule.astro'
import Standings from './standings.astro'
import Linescore from './linescore.svelte'
import PlayByPlay from './play-by-play.svelte'
import BattingStats from './batting-stats.svelte'
import PitchingStats from './pitching-stats.svelte'
import {
  gameState,
  innings,
  gameScore,
  lineScore,
  players,
  lineup,
  stats,
} from './stores'
import { Caching } from '@lib/caching'

interface Props {
  gameData: MlbGameDataResponse
  gameId: string
}

const { gameData, gameId } = Astro.props

const {
  seasonYearDisplay: seasonYear,
  networkName,
  awayTeam: awayTeamModel,
  homeTeam: homeTeamModel,
  teams,
  venue,
  weather,
  officials,
  gameTimestamp,
} = gameData

const [awayTeamGames, standings, playByPlay] = await Promise.all([
  getGames({
    context: Astro,
    domain: 'mlb',
    teamId: awayTeamModel.teamId,
    seasonYear,
    gameState: ['completed', 'inProgress', 'scheduled'],
  }),
  getStandingsRaw({ context: Astro, domain: 'mlb' }),
  getPlayByPlay({ context: Astro, gameId }),
])

gameState.set({ gameData, playByPlay })
innings.set(playByPlay?.innings ?? [])
gameScore.set({
  away: gameData.awayTeam.score,
  home: gameData.homeTeam.score,
})
lineScore.set({
  away: gameData.awayTeam.lineScore,
  home: gameData.homeTeam.lineScore,
})
stats.set({
  away: gameData.awayTeam.stats,
  home: gameData.homeTeam.stats,
})
lineup.set({
  away: gameData.awayTeam.players,
  home: gameData.homeTeam.players,
})
players.set(
  gameData.players?.reduce((acc, p) => ({ ...acc, [p.id]: p }), {}) ?? {},
)

const awayTeam = find(teams, { teamId: awayTeamModel.teamId })
const homeTeam = find(teams, { teamId: homeTeamModel.teamId })

Caching.swr(Astro)
---

<Layout {awayTeam} {homeTeam}>
  <PostgameHero
    slot="hero"
    network={networkName}
    timestamp={gameTimestamp}
    {awayTeam}
    awayRecord={awayTeamModel.record}
    {homeTeam}
    homeRecord={homeTeamModel.record}
  >
    <nav
      class:list={{
        'hidden md:flex gap-3 justify-center': true,
        'overflow-x-scroll no-scrollbar': true,
        'pt-3': true,
      }}
    >
      <div class="group/nav flex flex-col gap-1.5 overflow-clip">
        <label
          class:list={{
            'cursor-pointer whitespace-nowrap': true,
          }}
          for="summary"
          set:html="Summary"
        />
        <div
          class:list={{
            'w-full h-5 -mb-2.5 bg-current rounded-2xl': true,
            'hidden group-has-[#summary:checked]:block group-has-[#plays:checked]:block group-hover/nav:block': true,
          }}
        >
        </div>
      </div>
      <div class="group/nav flex flex-col gap-1.5 overflow-clip">
        <label
          class:list={{
            'cursor-pointer whitespace-nowrap': true,
          }}
          for="away"
          set:html={awayTeam?.nickname}
        />
        <div
          class:list={{
            'w-full h-5 -mb-2.5 bg-current rounded-2xl': true,
            'hidden group-has-[#away:checked]:block group-hover/nav:block': true,
          }}
        >
        </div>
      </div>
      <div class="group/nav flex flex-col gap-1.5 overflow-clip">
        <label
          class:list={{
            'cursor-pointer whitespace-nowrap': true,
          }}
          for="home"
          set:html={homeTeam?.nickname}
        />
        <div
          class:list={{
            'w-full h-5 -mb-2.5 bg-current rounded-2xl': true,
            'hidden group-has-[#home:checked]:block group-hover/nav:block': true,
          }}
        >
        </div>
      </div>
    </nav>
  </PostgameHero>

  <div slot="summary" class="flex gap-3">
    <div class="flex-1 flex flex-col gap-3">
      <Linescore {awayTeam} {homeTeam} final />
      <div class="md:hidden flex flex-col gap-3">
        <PlayByPlay {awayTeam} {homeTeam} scoring />
      </div>
      <Schedule
        teams={teams ?? []}
        currentGameId={Number.parseInt(gameId)}
        games={awayTeamGames?.games.reverse()}
      />
      <Standings
        {standings}
        awayTeamId={awayTeamModel.teamId}
        homeTeamId={homeTeamModel.teamId}
      />
      <GameInfo {venue} {weather} {officials} />
    </div>
    <div class="group/plays flex-1 hidden md:block">
      <div
        class="bg-gray-6 dark:bg-gray-4 text-gray-5 border border-gray-6 dark:border-gray-3 flex text-center mb-3 rounded-full relative overflow-clip"
      >
        <div
          class="absolute h-full w-1/2 bg-gray-8 dark:bg-gray-7 rounded-full left-0 group-has-[#scoring:checked]/plays:translate-x-0 group-has-[#all:checked]/plays:translate-x-full transition-transform ease-out"
        >
        </div>
        <label
          for="scoring"
          class:list={{
            'flex-1 py-1 hover:cursor-pointer relative': true,
            'group-has-[#scoring:checked]/plays:text-gray-2': true,
          }}
        >
          Scoring Plays
        </label>
        <label
          for="all"
          class:list={{
            'flex-1 py-1 hover:cursor-pointer relative': true,
            'group-has-[#all:checked]/plays:text-gray-2': true,
          }}
        >
          All Plays
        </label>
      </div>
      <div class="hidden has-[#scoring:checked]:flex flex-col gap-3">
        <input
          class="absolute opacity-0"
          type="radio"
          name="plays"
          id="scoring"
          checked
        />
        <PlayByPlay {awayTeam} {homeTeam} scoring />
      </div>
      <div class="hidden has-[#all:checked]:flex flex-col gap-3">
        <input class="absolute opacity-0" type="radio" name="plays" id="all" />
        <PlayByPlay {awayTeam} {homeTeam} />
      </div>
    </div>
  </div>

  <Fragment slot="away">
    <BattingStats teamKey="away" final />
    <PitchingStats teamKey="away" />
  </Fragment>

  <Fragment slot="home">
    <BattingStats teamKey="home" final />
    <PitchingStats teamKey="home" />
  </Fragment>

  <PlayByPlay slot="plays" {awayTeam} {homeTeam} />
</Layout>
