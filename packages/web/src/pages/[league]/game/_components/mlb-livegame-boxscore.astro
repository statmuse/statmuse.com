---
import { getGames, getPlayByPlay } from '@lib/gamera'
import Layout from './layout.astro'
import {
  type MlbGameDataResponse,
  type GameraPlayerReference,
  filterScoringPlays,
  getCurrentHalfInning,
  getCurrentInningNumber,
  getCurrentOuts,
  getCurrentAtBat,
  getCurrentAtBatCount,
  getCurrentRunners,
} from '@statmuse/core/gamera'
import { find, orderBy } from 'lodash-es'
import GameInfo from './game-info.astro'
import Matchup from './matchup.svelte'
import PitchByPitch from './pitch-by-pitch.svelte'
import Linescore from './linescore.svelte'
import PlayByPlay from './play-by-play.svelte'
import LivegameHero from './livegame-hero.astro'
import BattingStats from './batting-stats.svelte'
import PitchingStats from './pitching-stats.svelte'

interface Props {
  gameData: MlbGameDataResponse
  gameId: string
}

const { gameData, gameId } = Astro.props

const {
  networkName,
  awayTeam: awayTeamModel,
  homeTeam: homeTeamModel,
  teams,
  venue,
  weather,
  officials,
  players,
} = gameData

const [homeScores, awayScores, playByPlay] = await Promise.all([
  getGames({ context: Astro, domain: 'mlb', teamId: homeTeamModel.teamId }),
  getGames({ context: Astro, domain: 'mlb', teamId: awayTeamModel.teamId }),
  getPlayByPlay({ context: Astro, gameId }),
])

const innings = playByPlay?.innings

const awayTeam = find(teams, { teamId: awayTeamModel.teamId })
const homeTeam = find(teams, { teamId: homeTeamModel.teamId })

const playerMap = players?.reduce(
  (acc, p) => ({ ...acc, [p.id]: p }),
  {} as Record<number, GameraPlayerReference>,
)

const scoringInnings = filterScoringPlays(innings ?? [])

const halfInning = getCurrentHalfInning(innings ?? [])
const inning = getCurrentInningNumber(innings ?? [])
const outs = getCurrentOuts(innings ?? [])
const atBat = getCurrentAtBat(innings ?? [])
const atBatCount = getCurrentAtBatCount(innings ?? [])
const runners = getCurrentRunners(innings ?? [])
---

<Layout {awayTeam} {homeTeam}>
  <LivegameHero
    slot="hero"
    network={networkName}
    awayScore={awayTeamModel.score}
    homeScore={homeTeamModel.score}
    {inning}
    halfInning={halfInning?.half ?? 'top'}
    {outs}
    {awayTeam}
    awayScores={awayScores && {
      ...awayScores,
      games: orderBy(awayScores.games, 'gameDate', 'desc'),
    }}
    {homeTeam}
    homeScores={homeScores && {
      ...homeScores,
      games: orderBy(homeScores.games, 'gameDate', 'desc'),
    }}
  />
  <Fragment slot="game">
    <Matchup
      client:load
      {awayTeam}
      {homeTeam}
      {awayTeamModel}
      {homeTeamModel}
      awayPlayer={playerMap?.[
        halfInning?.half === 'top'
          ? atBat?.batter.playerId ?? 0
          : atBat?.pitcher.playerId ?? 0
      ] ?? {}}
      homePlayer={playerMap?.[
        halfInning?.half === 'bottom'
          ? atBat?.batter.playerId ?? 0
          : atBat?.pitcher.playerId ?? 0
      ] ?? {}}
      halfInning={halfInning?.half ?? 'top'}
      {outs}
      balls={atBatCount.balls}
      strikes={atBatCount.strikes}
      {runners}
    />
    <PitchByPitch client:load {atBat} />
    <Linescore
      client:load
      {awayTeam}
      {homeTeam}
      {awayTeamModel}
      {homeTeamModel}
    />
    <Fragment>
      {
        scoringInnings?.map((inning) => {
          const number = inning.number
          const [topHalf, bottomHalf] = inning.halves
          return (
            <Fragment>
              {topHalf.events.length > 0 && (
                <PlayByPlay
                  inningTitle={`Top ${number}`}
                  inning={topHalf}
                  {playerMap}
                  colors={awayTeam?.colors}
                />
              )}
              {bottomHalf.events.length > 0 && (
                <PlayByPlay
                  inningTitle={`Bottom ${number}`}
                  inning={bottomHalf}
                  {playerMap}
                  colors={homeTeam?.colors}
                />
              )}
            </Fragment>
          )
        })
      }
    </Fragment>
    <GameInfo {venue} {weather} {officials} />
  </Fragment>
  <Fragment slot="away">
    <Linescore
      client:load
      {awayTeam}
      {homeTeam}
      {awayTeamModel}
      {homeTeamModel}
      {atBat}
      {outs}
      {runners}
      balls={atBatCount.balls}
      strikes={atBatCount.strikes}
      displayMatchup
    />
    <BattingStats
      {playerMap}
      lineup={awayTeamModel.players}
      splits={awayTeamModel.stats?.splits}
    />
    <PitchingStats
      {playerMap}
      lineup={awayTeamModel.players}
      splits={awayTeamModel.stats?.splits}
    />
  </Fragment>
  <Fragment slot="home">
    <Linescore
      client:load
      {awayTeam}
      {homeTeam}
      {awayTeamModel}
      {homeTeamModel}
      {atBat}
      {outs}
      {runners}
      balls={atBatCount.balls}
      strikes={atBatCount.strikes}
      displayMatchup
    />
    <BattingStats
      {playerMap}
      lineup={homeTeamModel.players}
      splits={homeTeamModel.stats?.splits}
    />
    <PitchingStats
      {playerMap}
      lineup={homeTeamModel.players}
      splits={homeTeamModel.stats?.splits}
    />
  </Fragment>
  <Fragment slot="plays">
    {
      innings?.map((inning) => {
        const number = inning.number
        const [topHalf, bottomHalf] = inning.halves

        return (
          <Fragment>
            <PlayByPlay
              inningTitle={`Top ${number}`}
              inning={topHalf}
              {playerMap}
            />
            <PlayByPlay
              inningTitle={`Bottom ${number}`}
              inning={bottomHalf}
              {playerMap}
            />
          </Fragment>
        )
      })
    }
  </Fragment>
</Layout>
