---
import { getGames, getPlayByPlay } from '@lib/gamera'
import Layout from './layout.astro'
import { type MlbGameDataResponse } from '@statmuse/core/gamera'
import { find, orderBy } from 'lodash-es'
import GameInfo from './game-info.astro'
import Matchup from './matchup.svelte'
import PitchByPitch from './pitch-by-pitch.svelte'
import Linescore from './linescore.svelte'
import PlayByPlay from './play-by-play.svelte'
import LivegameHero from './livegame-hero.astro'
import BattingStats from './batting-stats.svelte'
import PitchingStats from './pitching-stats.svelte'
import GameState from './game-state.svelte'
import * as stores from './stores'

interface Props {
  gameData: MlbGameDataResponse
  gameId: string
}

const { gameData, gameId } = Astro.props

const {
  networkName,
  awayTeam: awayTeamModel,
  homeTeam: homeTeamModel,
  teams,
  venue,
  weather,
  officials,
} = gameData

const [homeScores, awayScores, playByPlay] = await Promise.all([
  getGames({ context: Astro, domain: 'mlb', teamId: homeTeamModel.teamId }),
  getGames({ context: Astro, domain: 'mlb', teamId: awayTeamModel.teamId }),
  getPlayByPlay({ context: Astro, gameId }),
])

const awayTeam = find(teams, { teamId: awayTeamModel.teamId })
const homeTeam = find(teams, { teamId: homeTeamModel.teamId })

stores.gameState.set({ gameData, playByPlay })
---

<Layout {awayTeam} {homeTeam}>
  <LivegameHero
    slot="hero"
    network={networkName}
    {awayTeam}
    awayScores={awayScores && {
      ...awayScores,
      games: orderBy(awayScores.games, 'gameDate', 'desc'),
    }}
    {homeTeam}
    homeScores={homeScores && {
      ...homeScores,
      games: orderBy(homeScores.games, 'gameDate', 'desc'),
    }}
  />
  <Fragment slot="game">
    <Matchup {awayTeam} {homeTeam} />
    <PitchByPitch client:load />
    <Linescore client:load {awayTeam} {homeTeam} />
    <PlayByPlay client:load {awayTeam} {homeTeam} scoring />
    <GameInfo {venue} {weather} {officials} />
  </Fragment>
  <Fragment slot="away">
    <Linescore client:load {awayTeam} {homeTeam} displayMatchup />
    <BattingStats client:load teamKey="away" />
    <PitchingStats client:load teamKey="away" />
  </Fragment>
  <Fragment slot="home">
    <Linescore client:load {awayTeam} {homeTeam} displayMatchup />
    <BattingStats client:load teamKey="home" />
    <PitchingStats client:load teamKey="home" />
  </Fragment>
  <PlayByPlay client:load slot="plays" {awayTeam} {homeTeam} />
  <GameState client:only="svelte" {gameData} {playByPlay} />
  <!-- <Realtime client:only="svelte" /> -->
</Layout>
