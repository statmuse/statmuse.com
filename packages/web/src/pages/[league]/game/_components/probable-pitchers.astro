---
import Image from '@components/image.astro'
import Panel from '@components/panel.astro'
import type {
  GameraPlayerReference,
  MlbStatKey,
  TeamGameModel,
} from '@statmuse/core/gamera'
import { getPlayerBio, getPlayerStats } from '@lib/gamera'
import { find } from 'lodash-es'
import EntityLink from '@components/entity-link.astro'

interface Props {
  awayTeamModel: TeamGameModel<MlbStatKey>
  homeTeamModel: TeamGameModel<MlbStatKey>
  playerMap?: Record<number, GameraPlayerReference>
}

const { awayTeamModel, homeTeamModel, playerMap } = Astro.props

const homeStartingId = find(homeTeamModel.players, {
  lineup: { pitchingSequence: 1 },
})?.playerId

const awayStartingId = find(homeTeamModel.players, {
  lineup: { pitchingSequence: 1 },
})?.playerId

const homePitcherId = homeTeamModel.probablePitcher?.playerId ?? homeStartingId

const awayPitcherId = awayTeamModel?.probablePitcher?.playerId ?? awayStartingId

const [homePlayerStats, awayPlayerStats, homePitcherBio, awayPitcherBio] =
  await Promise.all([
    homePitcherId
      ? getPlayerStats({
          context: Astro,
          domain: 'MLB',
          player: `player-${homePitcherId}`,
          params: {},
        })
      : undefined,
    awayPitcherId
      ? getPlayerStats({
          context: Astro,
          domain: 'MLB',
          player: `player-${awayPitcherId}`,
          params: {},
        })
      : undefined,
    homePitcherId
      ? getPlayerBio(Astro, 'MLB', `player-${homePitcherId}`)
      : undefined,
    awayPitcherId
      ? getPlayerBio(Astro, 'MLB', `player-${awayPitcherId}`)
      : undefined,
  ])

const homePitcherStats = find(homePlayerStats?.grids, {
  name: 'Regular Season',
})?.rows.slice(-1)[0]
const awayPitcherStats = find(awayPlayerStats?.grids, {
  name: 'Regular Season',
})?.rows.slice(-1)[0]

type StatRow = typeof homePitcherStats

const stats = [
  {
    key: 'W',
    metric: 'W-L',
    display: (stat: StatRow) =>
      stat ? `${stat?.W.display}-${stat?.L.display}` : '',
    compare: (a: StatRow, b: StatRow) => a?.W.value > b?.W.value,
  },
  {
    key: 'ERA',
    compare: (a: StatRow, b: StatRow) => a?.ERA.value < b?.ERA.value,
  },
  { key: 'SO', compare: (a: StatRow, b: StatRow) => a?.SO.value > b?.SO.value },
  { key: 'BB', compare: (a: StatRow, b: StatRow) => a?.BB.value < b?.BB.value },
  {
    key: 'WHIP',
    compare: (a: StatRow, b: StatRow) => a?.WHIP.value < b?.WHIP.value,
  },
  { key: 'H', compare: (a: StatRow, b: StatRow) => a?.H.value < b?.H.value },
  { key: 'HR', compare: (a: StatRow, b: StatRow) => a?.HR.value < b?.HR.value },
  { key: 'IP', compare: (a: StatRow, b: StatRow) => a?.IP.value > b?.IP.value },
]

const homeTeam = homePitcherBio?.team
const awayTeam = awayPitcherBio?.team

const awayPlayer = playerMap?.[awayPitcherId ?? 0]
const homePlayer = playerMap?.[homePitcherId ?? 0]
---

{
  (homePitcherId || awayPitcherId) && (
    <Panel class="!p-0">
      <div class="relative flex justify-center py-2">
        <EntityLink
          entity={awayTeam?.entity}
          class="flex gap-1 absolute left-3 top-2 text-inherit"
        >
          <Image
            src={awayTeam?.logoImageUrl ?? ''}
            alt={awayTeam?.name ?? ''}
            width={60}
            height={60}
            class="w-6 h-6 object-contain"
          />
          {awayTeam?.abbreviation}
        </EntityLink>

        <h3 class="font-semibold">
          {homeStartingId && awayStartingId ? 'Starting' : 'Probable'} Pitchers
        </h3>

        <EntityLink
          entity={homeTeam?.entity}
          class="flex gap-1 absolute right-3 top-2 text-inherit"
        >
          {homeTeam?.abbreviation}
          <Image
            src={homeTeam?.logoImageUrl ?? ''}
            alt={homeTeam?.name ?? ''}
            width={60}
            height={60}
            class="w-6 h-6 object-contain"
          />
        </EntityLink>
      </div>
      <div class="flex justify-between px-3 border-b border-gray-6 dark:border-gray-4">
        <EntityLink entity={awayPlayer?.entity}>
          <Image
            src={awayPitcherBio?.bustImageUrl ?? ''}
            alt={awayPitcherBio?.usedName ?? ''}
            width={120}
            height={90}
            class="h-[90px] object-contain object-left"
          />
        </EntityLink>
        <EntityLink entity={homePlayer?.entity}>
          <Image
            src={homePitcherBio?.bustImageUrl ?? ''}
            alt={homePitcherBio?.usedName ?? ''}
            width={120}
            height={90}
            class="h-[90px] object-contain object-right"
          />
        </EntityLink>
      </div>
      <div class="divide-y divide-gray-6 dark:divide-gray-4 *:px-1 *:py-1">
        <div class="flex justify-between !px-3">
          <div>
            <EntityLink
              entity={awayPlayer?.entity}
              class="font-semibold text-inherit"
            >
              {awayPitcherBio?.usedName}
            </EntityLink>
            {awayPitcherBio && (
              <p class="text-[16px] text-gray-5">{`${
                awayPitcherBio.throwsHandedness === 'right' ? 'RH' : 'LH'
              }${awayPitcherBio.position} #${awayPitcherBio.jerseyNumber}`}</p>
            )}
          </div>
          <div class="text-right">
            <EntityLink
              entity={homePlayer?.entity}
              class="font-semibold text-inherit"
            >
              {homePitcherBio?.usedName}
            </EntityLink>
            {homePitcherBio && (
              <p class="text-[16px] text-gray-5">{`${
                homePitcherBio.throwsHandedness === 'right' ? 'RH' : 'LH'
              }${homePitcherBio?.position} #${
                homePitcherBio?.jerseyNumber
              }`}</p>
            )}
          </div>
        </div>
        {stats.map((stat) => (
          <div class="flex justify-center relative">
            <p
              class="absolute top-1 left-1 px-2 rounded-2xl"
              style={
                stat.compare(awayPitcherStats, homePitcherStats)
                  ? {
                      background: awayTeam?.colors.backgroundColor,
                      color: awayTeam?.colors.foregroundColor,
                    }
                  : {}
              }
            >
              {stat.display
                ? stat.display(awayPitcherStats)
                : awayPitcherStats && awayPitcherStats[stat.key]?.display}
            </p>
            <p class="text-gray-5">{stat.metric ?? stat.key}</p>
            <p
              class="absolute top-1 right-1 px-2 rounded-2xl"
              style={
                stat.compare(homePitcherStats, awayPitcherStats)
                  ? {
                      background: homeTeam?.colors.backgroundColor,
                      color: homeTeam?.colors.foregroundColor,
                    }
                  : {}
              }
            >
              {stat.display
                ? stat.display(homePitcherStats)
                : homePitcherStats && homePitcherStats[stat.key]?.display}
            </p>
          </div>
        ))}
      </div>
    </Panel>
  )
}
