---
import Layout from './layout.astro'
import { find } from 'lodash-es'
import GameInfo from './game-info.astro'
import ProbablePitchers from './probable-pitchers.astro'
import TeamStats from './team-stats.astro'
import Injuries from './injuries.astro'
import Schedule from './schedule.astro'
import Standings from './standings.astro'
import LastGames from './last-games.astro'
import {
  getGames,
  getInjuries,
  getStandingsRaw,
  getTeamSeasonStats,
  getTeamSeasonPlayerStats,
} from '@lib/gamera'
import type { MlbGameDataResponse, MlbStatKey } from '@statmuse/core/gamera'
import TeamPlayerStats from './team-player-stats.astro'
import PregameHero from './pregame-hero.astro'
import Odds from './odds.astro'
import dayjs from 'dayjs'
import duration from 'dayjs/plugin/duration'
import { Caching } from '@lib/caching'

dayjs.extend(duration)

interface Props {
  gameData: MlbGameDataResponse<MlbStatKey>
  gameId: string
}

const { gameData, gameId } = Astro.props

const {
  seasonYearDisplay: seasonYear,
  teams,
  awayTeam: awayTeamModel,
  homeTeam: homeTeamModel,
  weather,
  officials,
  venue,
  players,
  networkName,
  gameTimestamp,
  odds,
} = gameData

const [
  homeTeamGames,
  awayTeamGames,
  homeTeamSeasonStats,
  awayTeamSeasonStats,
  injuries,
  standings,
  awayTeamPlayerStats,
  homeTeamPlayerStats,
] = await Promise.all([
  getGames({
    context: Astro,
    domain: 'mlb',
    teamId: homeTeamModel.teamId,
    seasonYear,
    gameState: ['completed', 'inProgress', 'scheduled'],
  }),
  getGames({
    context: Astro,
    domain: 'mlb',
    teamId: awayTeamModel.teamId,
    seasonYear,
    gameState: ['completed', 'inProgress', 'scheduled'],
  }),
  getTeamSeasonStats({
    context: Astro,
    domain: 'MLB',
    team: `team-${homeTeamModel.teamId}`,
    year: gameData.seasonYearDisplay ?? '',
    params: {},
  }),
  getTeamSeasonStats({
    context: Astro,
    domain: 'MLB',
    team: `team-${awayTeamModel.teamId}`,
    year: gameData.seasonYearDisplay ?? '',
    params: {},
  }),
  getInjuries({ context: Astro }),
  getStandingsRaw({ context: Astro, domain: 'mlb' }),
  getTeamSeasonPlayerStats({
    context: Astro,
    domain: 'MLB',
    team: `team-${awayTeamModel.teamId}`,
    year: gameData.seasonYearDisplay ?? '',
    params: {},
  }),
  getTeamSeasonPlayerStats({
    context: Astro,
    domain: 'MLB',
    team: `team-${homeTeamModel.teamId}`,
    year: gameData.seasonYearDisplay ?? '',
    params: {},
  }),
])

const awayTeam = find(teams, { teamId: awayTeamModel.teamId })
const homeTeam = find(teams, { teamId: homeTeamModel.teamId })

const awayTeamInjuries = find(
  injuries?.teams,
  (t) => t.team.teamId === awayTeamModel.teamId,
)
const homeTeamInjuries = find(
  injuries?.teams,
  (t) => t.team.teamId === homeTeamModel.teamId,
)

const timeUntilStart = dayjs.duration(
  dayjs(gameData.gameTimestamp).diff(dayjs()),
)

if (timeUntilStart.asHours() > 24) {
  Caching.swr(Astro, { maxage: 3600, revalidate: 82800 })
} else if (timeUntilStart.asHours() > 6) {
  Caching.swr(Astro, { maxage: 900, revalidate: 21600 })
} else {
  Caching.swr(Astro, { maxage: 300, revalidate: 600 })
}
---

<Layout {awayTeam} {homeTeam}>
  <PregameHero
    slot="hero"
    network={networkName}
    timestamp={gameTimestamp}
    {awayTeam}
    awayTeamGames={awayTeamGames?.games.filter((g) => g.type === 'completed')}
    {homeTeam}
    homeTeamGames={homeTeamGames?.games.filter((g) => g.type === 'completed')}
  >
    <nav
      class:list={{
        'hidden md:flex gap-3 justify-center': true,
        'overflow-x-scroll no-scrollbar': true,
        'pt-3': true,
      }}
    >
      <div class="group/nav flex flex-col gap-1.5 overflow-clip">
        <label
          class:list={{
            'cursor-pointer whitespace-nowrap': true,
          }}
          for="preview"
          set:html="Preview"
        />
        <div
          class:list={{
            'w-full h-5 -mb-2.5 bg-current rounded-2xl': true,
            'hidden group-has-[#preview:checked]:block group-hover/nav:block': true,
          }}
        >
        </div>
      </div>
      <div class="group/nav flex flex-col gap-1.5 overflow-clip">
        <label
          class:list={{
            'cursor-pointer whitespace-nowrap': true,
          }}
          for="away"
          set:html={awayTeam?.nickname}
        />
        <div
          class:list={{
            'w-full h-5 -mb-2.5 bg-current rounded-2xl': true,
            'hidden group-has-[#away:checked]:block group-hover/nav:block': true,
          }}
        >
        </div>
      </div>
      <div class="group/nav flex flex-col gap-1.5 overflow-clip">
        <label
          class:list={{
            'cursor-pointer whitespace-nowrap': true,
          }}
          for="home"
          set:html={homeTeam?.nickname}
        />
        <div
          class:list={{
            'w-full h-5 -mb-2.5 bg-current rounded-2xl': true,
            'hidden group-has-[#home:checked]:block group-hover/nav:block': true,
          }}
        >
        </div>
      </div>
    </nav>
  </PregameHero>
  <div slot="preview" class="space-y-3 gap-3 justify-center md:columns-2">
    <Odds {odds} {awayTeam} {homeTeam} />
    <ProbablePitchers {awayTeamModel} {homeTeamModel} />
    <TeamStats
      {awayTeam}
      {homeTeam}
      {homeTeamSeasonStats}
      {awayTeamSeasonStats}
    />
    <Injuries {awayTeamInjuries} {homeTeamInjuries} />
    <Schedule
      teams={teams ?? []}
      currentGameId={Number.parseInt(gameId)}
      games={awayTeamGames?.games.reverse()}
    />
    <Standings
      {standings}
      awayTeamId={awayTeamModel.teamId}
      homeTeamId={homeTeamModel.teamId}
    />
    <LastGames
      {teams}
      {awayTeamModel}
      {homeTeamModel}
      awayTeamResults={awayTeamGames && {
        ...awayTeamGames,
        games: awayTeamGames.games.filter((g) => g.type === 'completed'),
      }}
      homeTeamResults={homeTeamGames && {
        ...homeTeamGames,
        games: homeTeamGames.games.filter((g) => g.type === 'completed'),
      }}
    />
    <GameInfo {venue} {weather} {officials} />
  </div>

  <TeamPlayerStats
    slot="away"
    {players}
    teamModel={awayTeamModel}
    teamPlayerStats={awayTeamPlayerStats}
  />

  <TeamPlayerStats
    slot="home"
    {players}
    teamModel={homeTeamModel}
    teamPlayerStats={homeTeamPlayerStats}
  />
</Layout>
