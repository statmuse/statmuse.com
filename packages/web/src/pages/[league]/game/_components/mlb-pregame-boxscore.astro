---
import Layout from './layout.astro'
import { find } from 'lodash-es'
import GameInfo from './game-info.astro'
import ProbablePitchers from './probable-pitchers.astro'
import TeamStats from './team-stats.astro'
import Injuries from './injuries.astro'
import Schedule from './schedule.astro'
import Standings from './standings.astro'
import LastGames from './last-games.astro'
import {
  getGames,
  getInjuries,
  getStandingsRaw,
  getTeamSeasonStats,
  getTeamSeasonPlayerStats,
} from '@lib/gamera'
import type { MlbGameDataResponse } from '@statmuse/core/gamera'
import TeamPlayerStats from './team-player-stats.astro'
import PregameHero from './pregame-hero.astro'
import Odds from './odds.astro'

interface Props {
  gameData: MlbGameDataResponse
  gameId: string
}

const { gameData, gameId } = Astro.props

const {
  seasonYearDisplay: seasonYear,
  teams,
  awayTeam: awayTeamModel,
  homeTeam: homeTeamModel,
  weather,
  officials,
  venue,
  players,
  networkName,
  gameTimestamp,
  odds,
} = gameData

const [
  homeTeamGames,
  awayTeamGames,
  homeTeamSeasonStats,
  awayTeamSeasonStats,
  injuries,
  standings,
  awayTeamPlayerStats,
  homeTeamPlayerStats,
] = await Promise.all([
  getGames({
    context: Astro,
    domain: 'mlb',
    teamId: homeTeamModel.teamId,
    seasonYear,
    gameState: ['completed', 'inProgress', 'scheduled'],
  }),
  getGames({
    context: Astro,
    domain: 'mlb',
    teamId: awayTeamModel.teamId,
    seasonYear,
    gameState: ['completed', 'inProgress', 'scheduled'],
  }),
  getTeamSeasonStats({
    context: Astro,
    domain: 'MLB',
    team: `team-${homeTeamModel.teamId}`,
    year: gameData.seasonYearDisplay ?? '',
    params: {},
  }),
  getTeamSeasonStats({
    context: Astro,
    domain: 'MLB',
    team: `team-${awayTeamModel.teamId}`,
    year: gameData.seasonYearDisplay ?? '',
    params: {},
  }),
  getInjuries({ context: Astro }),
  getStandingsRaw({ context: Astro, domain: 'mlb' }),
  getTeamSeasonPlayerStats({
    context: Astro,
    domain: 'MLB',
    team: `team-${awayTeamModel.teamId}`,
    year: gameData.seasonYearDisplay ?? '',
    params: {},
  }),
  getTeamSeasonPlayerStats({
    context: Astro,
    domain: 'MLB',
    team: `team-${homeTeamModel.teamId}`,
    year: gameData.seasonYearDisplay ?? '',
    params: {},
  }),
])

const awayTeam = find(teams, { teamId: awayTeamModel.teamId })
const homeTeam = find(teams, { teamId: homeTeamModel.teamId })

const awayTeamInjuries = find(
  injuries?.teams,
  (t) => t.team.teamId === awayTeamModel.teamId,
)
const homeTeamInjuries = find(
  injuries?.teams,
  (t) => t.team.teamId === homeTeamModel.teamId,
)
---

<Layout {awayTeam} {homeTeam}>
  <PregameHero
    slot="hero"
    network={networkName}
    timestamp={gameTimestamp}
    {awayTeam}
    awayTeamGames={awayTeamGames?.games.filter((g) => g.type === 'completed')}
    {homeTeam}
    homeTeamGames={homeTeamGames?.games.filter((g) => g.type === 'completed')}
  />
  <Fragment slot="game">
    <Odds {odds} {awayTeam} {homeTeam} />
    <ProbablePitchers {awayTeamModel} {homeTeamModel} />
    <TeamStats
      {awayTeam}
      {homeTeam}
      {homeTeamSeasonStats}
      {awayTeamSeasonStats}
    />
    <Injuries {awayTeamInjuries} {homeTeamInjuries} />
    <Schedule
      teams={teams ?? []}
      currentGameId={Number.parseInt(gameId)}
      games={awayTeamGames?.games}
    />
    <Standings
      {standings}
      awayTeamId={awayTeamModel.teamId}
      homeTeamId={homeTeamModel.teamId}
    />
    <LastGames
      {teams}
      {awayTeamModel}
      {homeTeamModel}
      awayTeamResults={awayTeamGames && {
        ...awayTeamGames,
        games: awayTeamGames.games.filter((g) => g.type === 'completed'),
      }}
      homeTeamResults={homeTeamGames && {
        ...homeTeamGames,
        games: homeTeamGames.games.filter((g) => g.type === 'completed'),
      }}
    />
    <GameInfo {venue} {weather} {officials} />
  </Fragment>
  <TeamPlayerStats
    slot="away"
    {players}
    teamModel={awayTeamModel}
    teamPlayerStats={awayTeamPlayerStats}
  />
  <TeamPlayerStats
    slot="home"
    {players}
    teamModel={homeTeamModel}
    teamPlayerStats={homeTeamPlayerStats}
  />
</Layout>
