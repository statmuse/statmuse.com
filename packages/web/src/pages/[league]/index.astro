---
import HomeLayout from '@layouts/home.astro'
import HomeContent from '@components/home/home-content.astro'
import { Caching } from '@lib/caching'
import { examples } from '@lib/examples'
import { createAskPath } from '@statmuse/core/path'
import { NOT_FOUND_404 } from '@lib/response'
import { leagueToDomain, type LeagueParam } from '@lib/params'
import { listLatestMusings, type LatestMusing } from '@statmuse/core/musing'
import {
  homeLeadersByDomain,
  homeRankingsByDomain,
  homeBettingByDomain,
} from '@lib/related-content'
import { find } from 'lodash-es'
import { getStandings } from '@lib/standings'
import type { GameraPlayerProfileResponse } from '@statmuse/core/gamera'
import { getPlayerProfile } from '@lib/player'
import type { TrendingItem } from 'src/types'
import type {
  PlayerLeadersResponse,
  TeamRankingsResponse,
} from '@lib/related-content'
import type { GetStandingsResponse } from '@lib/standings'
import { getTeamSeasonBio } from '@lib/team'

const leaguePaths = ['nba', 'nfl', 'mlb', 'nhl', 'pga', 'fc']
if (!Astro.params.league || !leaguePaths.includes(Astro.params.league))
  return NOT_FOUND_404

const league = Astro.params.league as LeagueParam
const domain = leagueToDomain(league)

const meta = {
  title: `${league === 'fc' ? 'FC' : league.toUpperCase()} Stats`,
  description:
    league === 'fc' || league === 'pga'
      ? `Instant answers to your ${
          league === 'pga' ? league.toUpperCase() : 'Premier League and LaLiga'
        } questions. Stats, scores, bios, records and more — just ask.`
      : `Instant answers to your ${league.toUpperCase()} questions. Stats, scores, bios, records, odds and more — just ask.`,
  facebook: {
    imageUrl:
      league === 'fc'
        ? `${Astro.url.origin}/images/sm-fc-meta-banner.jpg`
        : undefined,
  },
  twitter: {
    imageUrl:
      league === 'fc'
        ? `${Astro.url.origin}/images/sm-fc-meta-banner.jpg`
        : undefined,
  },
}

let musings: LatestMusing[] | undefined
let leaders: PlayerLeadersResponse
let rankings: TeamRankingsResponse | undefined
let laligaLeaders: PlayerLeadersResponse
let laligaRankings: TeamRankingsResponse | undefined
let trendingSearches: TrendingItem['datasets'][number] | undefined
let trendingPlayers: TrendingItem['datasets'][number] | undefined
let trendingTeams: TrendingItem['datasets'][number] | undefined
let betting: TeamRankingsResponse | undefined
let standings: GetStandingsResponse
let profile: GameraPlayerProfileResponse | undefined
let trendingData: TrendingItem | undefined

if (domain !== 'PGA') {
  ;[musings, leaders, rankings, betting, standings] = await Promise.all([
    listLatestMusings(domain),
    homeLeadersByDomain({
      context: Astro,
      domain,
      ...(league === 'fc' ? { league: 'epl' } : {}),
    }),
    homeRankingsByDomain({
      context: Astro,
      domain,
      ...(league === 'fc' ? { league: 'epl' } : {}),
    }),
    homeBettingByDomain({ context: Astro, domain }),
    getStandings({ context: Astro, domain }),
  ])

  if (league === 'fc') {
    ;[laligaLeaders, laligaRankings] = await Promise.all([
      homeLeadersByDomain({ context: Astro, domain, league: 'lal' }),
      homeRankingsByDomain({ context: Astro, domain, league: 'lal' }),
    ])
  }

  if (rankings) {
    const teams = await Promise.all(
      rankings?.map(
        (r) =>
          r &&
          getTeamSeasonBio({
            context: Astro,
            domain: r.teams[0].entity.domain,
            team: r.teams[0].entity.id,
            year: r.teams[0].entity.id,
          }),
      ),
    )

    for (const index in teams) {
      const team = teams[index]
      const rank = rankings[index]
      if (team && rank) {
        rank.images = team.teamRepresentatives.map((r) => r.url)
      }
    }
  }

  if (laligaRankings) {
    const teams = await Promise.all(
      laligaRankings?.map(
        (r) =>
          r &&
          getTeamSeasonBio({
            context: Astro,
            domain: r.teams[0].entity.domain,
            team: r.teams[0].entity.id,
            year: r.teams[0].entity.id,
          }),
      ),
    )

    for (const index in teams) {
      const team = teams[index]
      const rank = laligaRankings[index]
      if (team && rank) {
        rank.images = team.teamRepresentatives.map((r) => r.url)
      }
    }
  }

  if (betting) {
    const teams = await Promise.all(
      betting?.map(
        (r) =>
          r &&
          getTeamSeasonBio({
            context: Astro,
            domain: r.teams[0].entity.domain,
            team: r.teams[0].entity.id,
            year: r.teams[0].entity.id,
          }),
      ),
    )
    for (const index in teams) {
      const team = teams[index]
      const bet = betting[index]
      if (team && bet) {
        bet.images = team.teamRepresentatives.map((r) => r.url)
      }
    }
  }

  trendingData = Astro.locals.trendingData
  trendingSearches = find(trendingData?.datasets, { name: 'Searches' })
  trendingPlayers = find(trendingData?.datasets, { name: 'Players' })
  trendingTeams = find(trendingData?.datasets, { name: 'Teams' })

  const oneWeekAgo = new Date()
  oneWeekAgo.setDate(oneWeekAgo.getDate() - 7)

  for (const player of trendingPlayers?.items.slice(0, 10) ?? []) {
    if (
      !player.latestAppearanceDate ||
      new Date(player.latestAppearanceDate) < oneWeekAgo
    )
      continue

    const playerSlug = player.uri.split('/')[3]
    profile = await getPlayerProfile(Astro, domain, playerSlug)
    if (profile?.recentGames) break
  }
}

Caching.swr(Astro)
---

<HomeLayout {meta} {league}>
  <HomeContent
    {domain}
    {musings}
    {profile}
    leaders={laligaLeaders && leaders
      ? [leaders, laligaLeaders]
      : leaders
      ? [leaders]
      : undefined}
    rankings={laligaRankings && rankings
      ? [rankings, laligaRankings]
      : rankings
      ? [rankings]
      : undefined}
    {betting}
    {standings}
    {trendingPlayers}
    {trendingTeams}
    {trendingSearches}
    examples={examples[league ?? 'nba']}
  />
</HomeLayout>
