---
import TeamLayout from '@layouts/team.astro'
import Grid from '@components/grid.svelte'
import { getUrlForEntity } from '@statmuse/core/gamera'
import { getTeamSeasonBio, getTeamSeasonRoster } from '@lib/team'
import { getLeagueKeywords } from '@lib/meta'
import { Caching } from '@lib/caching'
import { NOT_FOUND_404 } from '@lib/response'
import { leagueToDomain, type LeagueParam } from '@lib/params'

const league = Astro.params.league as LeagueParam
const team = Astro.params.team
const year = Astro.params.year
if (!team || !league || !year) return NOT_FOUND_404

const domain = leagueToDomain(league)
const bio = await getTeamSeasonBio({ context: Astro, domain, team, year })
const roster = await getTeamSeasonRoster({ context: Astro, domain, team, year })
if (!bio || !roster) return NOT_FOUND_404

if (!bio.hasRoster) {
  return Astro.redirect(`/${league}/club/${team}/fixtures/${year}`)
}

const title = `${bio.name} ${year} Roster`
const description = `The ${year} ${bio.name} roster for the premier league season`
const keywords = `${getLeagueKeywords(domain)} ${year} ${
  bio.name
} club roster stats statistics`
const canonical = {
  url: `${getUrlForEntity({
    type: 'teamSeason',
    domain,
    id: bio.teamId.toString(),
    display: bio.name,
  })}/roster/${year}`,
  rewrite: true,
}
const meta = { title, description, keywords, canonical }

Caching.swr(Astro)
---

<TeamLayout {bio} {meta} page="roster">
  <div class="mb-5">
    {
      roster?.grid && (
        <div class="mb-5">
          <h3 class="font-semibold text-team-primary mb-0.5">
            {roster.grid.name}
          </h3>
          <Grid
            client:load
            data={roster?.grid}
            columnStyles={{ 'NO.': 'w-2', IMAGE: 'w-2', default: 'w-20' }}
            stickyColumns={['NAME']}
            fullWidth={false}
          />
        </div>
      )
    }
  </div>
</TeamLayout>
