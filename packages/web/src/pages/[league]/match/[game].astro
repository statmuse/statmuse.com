---
import Layout from '@layouts/main.astro'
import Header from '@components/header.astro'
import Container from '@components/container.astro'
import Image from '@components/image.astro'
import { Caching } from '@lib/caching'
import { getGame } from '@lib/game'
import { NOT_FOUND_404 } from '@lib/response'
import { type LeagueParam, leagueToDomain } from '@lib/params'
import type { AnalyticsPageviewProperties } from '@lib/analytics'
import { imageForgeUrl } from '@statmuse/core/path'
import { tokensToText } from '@statmuse/core/gamera'
import type { EplHistoricalBoxScore } from '@statmuse/core/gamera'
import { orderBy, groupBy } from 'lodash-es'
import Goal from '@components/icons/goal.astro'
import Substitution from '@components/icons/substitution.astro'
import SoccerLineup from '@components/soccer-lineup.astro'
import SubArrow from '@components/icons/sub-arrow.astro'
import EntityLink from '@components/entity-link.astro'

const league = Astro.params.league as LeagueParam
const game = Astro.params.game
if (!game || !league) return NOT_FOUND_404

const domain = leagueToDomain(league) as 'EPL'
const data = await getGame({ context: Astro, domain, game })

if (!data) return NOT_FOUND_404
if (data.type === 'error') return NOT_FOUND_404

const boxscoreData = data.visual.detail[0] as EplHistoricalBoxScore
const homeTeam = boxscoreData.homeTeam
const awayTeam = boxscoreData.awayTeam

const subject = data.visual.summary.subject
const preferredDomain = domain.toLowerCase()

const plays = orderBy(
  boxscoreData.gameSummary.map((play) => ({
    ...play,
    side:
      (play.eventType !== 'own_goal' && play.team === homeTeam.name) ||
      (play.eventType === 'own_goal' && play.team === awayTeam.name)
        ? 'home'
        : 'away',
    minuteRaw: play.minute.split("'").reduce((t, c) => t + Number(c), 0),
  })),
  'minuteRaw',
)

type Play = (typeof plays)[0]

const playsByPeriod = groupBy(plays, 'period')

const homeGoals = plays.filter(
  (p) =>
    ((p.eventType === 'goal' || p.eventType === 'penalty_goal') &&
      p.team === homeTeam.name) ||
    (p.eventType === 'own_goal' && p.team === awayTeam.name),
)
const awayGoals = plays.filter(
  (p) =>
    ((p.eventType === 'goal' || p.eventType === 'penalty_goal') &&
      p.team === awayTeam.name) ||
    (p.eventType === 'own_goal' && p.team === homeTeam.name),
)

const homeTeamGoals = plays
  .filter(
    (p) =>
      (p.eventType === 'goal' || p.eventType === 'penalty_goal') &&
      p.team === homeTeam.name,
  )
  .map((p) => p.playerName)
const awayTeamGoals = plays
  .filter(
    (p) =>
      (p.eventType === 'goal' || p.eventType === 'penalty_goal') &&
      p.team === awayTeam.name,
  )
  .map((p) => p.playerName)
const homeTeamOwnGoals = plays
  .filter((p) => p.eventType === 'own_goal' && p.team === homeTeam.name)
  .map((p) => p.playerName)
const awayTeamOwnGoals = plays
  .filter((p) => p.eventType === 'own_goal' && p.team === awayTeam.name)
  .map((p) => p.playerName)
const homeTeamYellows = plays
  .filter((p) => p.eventType === 'yellow_card' && p.team === homeTeam.name)
  .map((p) => p.playerName)
const awayTeamYellows = plays
  .filter((p) => p.eventType === 'yellow_card' && p.team === awayTeam.name)
  .map((p) => p.playerName)
const homeTeamReds = plays
  .filter((p) => p.eventType === 'red_card' && p.team === homeTeam.name)
  .map((p) => p.playerName)
const awayTeamReds = plays
  .filter((p) => p.eventType === 'red_card' && p.team === awayTeam.name)
  .map((p) => p.playerName)
const homeTeamYellowReds = plays
  .filter((p) => p.eventType === 'yellow_red_card' && p.team === homeTeam.name)
  .map((p) => p.playerName)
const awayTeamYellowReds = plays
  .filter((p) => p.eventType === 'yellow_red_card' && p.team === awayTeam.name)
  .map((p) => p.playerName)
const homeTeamSubIns = plays
  .filter((p) => p.eventType === 'substitution' && p.team === homeTeam.name)
  .map((p) => p.playerName)
const awayTeamSubIns = plays
  .filter((p) => p.eventType === 'substitution' && p.team === awayTeam.name)
  .map((p) => p.playerName)
const homeTeamSubOuts = plays
  .filter((p) => p.eventType === 'substitution' && p.team === homeTeam.name)
  .map((p) => p.relatedPlayerName)
const awayTeamSubOuts = plays
  .filter((p) => p.eventType === 'substitution' && p.team === awayTeam.name)
  .map((p) => p.relatedPlayerName)

const homeSubs = orderBy(
  homeTeam.lineup?.filter(
    (p) => !p.isStarter && homeTeamSubIns.includes(p.entity.display),
  ),
  'shirtNumber',
)
const homeBench = orderBy(
  homeTeam.lineup?.filter(
    (p) => !p.isStarter && !homeTeamSubIns.includes(p.entity.display),
  ),
  'shirtNumber',
)

const awaySubs = orderBy(
  awayTeam.lineup?.filter(
    (p) => !p.isStarter && awayTeamSubIns.includes(p.entity.display),
  ),
  'shirtNumber',
)
const awayBench = orderBy(
  awayTeam.lineup?.filter(
    (p) => !p.isStarter && !awayTeamSubIns.includes(p.entity.display),
  ),
  'shirtNumber',
)

const homeTeamStats = boxscoreData.teamDetail.homeTeam
const awayTeamStats = boxscoreData.teamDetail.awayTeam

const homeTeamColors = homeTeam.lineup[0].colors
const awayTeamColors = awayTeam.lineup[0].colors

const lastName = (name: string) => name.split(' ')[name.split(' ').length - 1]

const meta = {
  title: tokensToText(data.nlg.text.answer),
  pageType: 'game',
  facebook: {
    imageUrl: imageForgeUrl({
      url: data.visual.summary.subject.imageUrl,
      bgColor: subject.colors.background,
      type: 'facebook',
    }),
  },
  twitter: {
    imageUrl: imageForgeUrl({
      url: data.visual.summary.subject.imageUrl,
      bgColor: subject.colors.background,
      type: 'twitter',
    }),
  },
}

Caching.swr(Astro)
---

<Layout
  colors={{ foreground: '#000', background: '#e0e0e0' }}
  {meta}
  analytics={{
    is_search: true,
    page_domain: preferredDomain as AnalyticsPageviewProperties['page_domain'],
    page_type: 'game',
  }}
>
  <Header {preferredDomain} share={{ url: Astro.url.href }} />
  <Container class="mb-5 bg-team-primary text-team-secondary py-5 space-y-5">
    <div class="flex gap-2 md:gap-8 md:items-center justify-center">
      <div
        class="flex-1 flex flex-col-reverse md:flex-row gap-1 md:gap-4 items-center justify-end"
      >
        <div class="text-center md:text-right">
          <EntityLink class="text-current" entity={homeTeam.entity}>
            <h1 class="font-semibold md:text-3xl">
              {homeTeam.name}
            </h1>
          </EntityLink>
          <p class="text-[0.8rem] uppercase tracking-[0.07rem]">
            {homeTeam.record}
          </p>
        </div>
        <EntityLink entity={homeTeam.entity}>
          <Image
            class="w-20 h-20 object-contain"
            src={homeTeam.logoUrl}
            alt={homeTeam.abbrev}
            width={200}
            height={200}
            loading="eager"
          />
        </EntityLink>
      </div>
      <div class="h-fit flex items-center gap-4 md:gap-8 mt-5 md:mt-0">
        <p class="text-4xl font-semibold">
          {homeTeam.score}
        </p>
        <p class="text-[0.8rem] uppercase tracking-[0.07rem] mx-4">
          {boxscoreData.completedGameStatus}
        </p>
        <p class="text-4xl font-semibold">
          {awayTeam.score}
        </p>
      </div>
      <div
        class="flex-1 flex flex-col-reverse md:flex-row-reverse gap-1 md:gap-4 items-center justify-end"
      >
        <div class="text-center md:text-left">
          <EntityLink class="text-current" entity={awayTeam.entity}>
            <h1 class="font-semibold md:text-3xl">
              {awayTeam.name}
            </h1>
          </EntityLink>
          <p class="text-[0.8rem] uppercase tracking-[0.07rem]">
            {awayTeam.record}
          </p>
        </div>
        <EntityLink class="text-current" entity={awayTeam.entity}>
          <Image
            class="w-20 h-20 object-contain"
            src={awayTeam.logoUrl}
            alt={awayTeam.abbrev}
            width={200}
            height={200}
            loading="eager"
          />
        </EntityLink>
      </div>
    </div>
    <div class="flex items-start justify-center">
      <div class="flex-1 text-right mx-0.5">
        {
          homeGoals.map((play) => (
            <p class="text-sm">{`${lastName(play.playerName)} ${play.minute}${
              play.eventType === 'own_goal'
                ? ' (OG)'
                : play.eventType === 'penalty_goal'
                ? ' (PK)'
                : ''
            }`}</p>
          ))
        }
      </div>
      <Goal class="w-5 shrink-0 mx-4 md:mx-24" color="#000" />
      <div class="flex-1 mx-0.5">
        {
          awayGoals.map((play) => (
            <p class="text-sm">{`${lastName(play.playerName)} ${play.minute}${
              play.eventType === 'own_goal'
                ? ' (OG)'
                : play.eventType === 'penalty_goal'
                ? ' (PK)'
                : ''
            }`}</p>
          ))
        }
      </div>
    </div>
  </Container>
  <Container>
    <div
      class="grid grid-cols-[repeat(auto-fit,_minmax(300px,_1fr))] gap-5 mb-5"
    >
      <div>
        <p class="font-semibold text-[#b8b8b8]">Timeline</p>
        <div
          class="flex justify-between bg-team-primary text-team-secondary rounded py-1"
        >
          <div class="flex items-center">
            <Image
              class="w-4 h-4 mx-1.5 object-contain"
              src={homeTeam.logoUrl}
              alt={homeTeam.abbrev}
              width={50}
              height={50}
              loading="eager"
            />
            <span class="text-[0.8rem] uppercase tracking-[0.07rem]">
              {homeTeam.abbrev}
            </span>
          </div>
          <div class="flex items-center flex-row-reverse">
            <Image
              class="w-4 h-4 mx-1.5 object-contain"
              src={awayTeam.logoUrl}
              alt={awayTeam.abbrev}
              width={50}
              height={50}
              loading="eager"
            />
            <span class="text-[0.8rem] uppercase tracking-[0.07rem]">
              {awayTeam.abbrev}
            </span>
          </div>
        </div>
        <div>
          {
            (() => {
              const renderPlays = (plays: Play[]) =>
                plays.map((play) => (
                  <div
                    class:list={[
                      'flex items-center py-0.5 border-b border-[#c7c8ca]',
                      { 'flex-row-reverse': play.side === 'away' },
                    ]}
                  >
                    <span
                      class:list={[
                        'w-8 relative',
                        {
                          'ml-1': play.side === 'home',
                          'mr-1': play.side === 'away',
                        },
                      ]}
                    >
                      {(() => {
                        const [minute, extraTime] = play.minute.split('+')
                        if (extraTime) {
                          return (
                            <>
                              {minute}
                              <span class="text-xs absolute">
                                +{extraTime.replace("'", '')}
                              </span>
                            </>
                          )
                        }
                        return minute
                      })()}
                    </span>
                    {play.eventType === 'yellow_card' ? (
                      <div class="w-5 h-4 mx-2">
                        <span class="block h-4 w-3 bg-yellow-300 mx-auto" />
                      </div>
                    ) : play.eventType === 'red_card' ? (
                      <div class="w-5 h-4 mx-2">
                        <span class="block h-4 w-3 bg-red-600 mx-auto" />
                      </div>
                    ) : play.eventType === 'yellow_red_card' ? (
                      <div class="inline-block h-4 w-5 bg-yellow-300 mx-2 relative">
                        <span class="absolute right-0 h-4 w-3 bg-red-600" />
                      </div>
                    ) : play.eventType === 'goal' ||
                      play.eventType === 'penalty_goal' ||
                      play.eventType === 'own_goal' ? (
                      <Goal
                        class="w-5 mx-2 shrink-0"
                        color={
                          play.eventType === 'own_goal' ? '#ed1c24' : '#000'
                        }
                      />
                    ) : play.eventType === 'substitution' ? (
                      <Substitution class="w-5 mx-2 shrink-0" />
                    ) : null}
                    {play.eventType !== 'substitution' ? (
                      <p>{`${play.playerName}${
                        play.eventType === 'own_goal'
                          ? ' (OG)'
                          : play.eventType === 'penalty_goal'
                          ? ' (PK)'
                          : ''
                      }`}</p>
                    ) : (
                      <div
                        class:list={{
                          'text-right': play.team === awayTeam.name,
                        }}
                      >
                        <p class="text-[#00a14b]">{play.playerName}</p>
                        <p class="text-[#ed1c24]">{play.relatedPlayerName}</p>
                      </div>
                    )}
                  </div>
                ))

              return (
                <>
                  {renderPlays(playsByPeriod['1st Half'])}
                  <div class="text-center text-[0.8rem] text-[#969ca1] uppercase tracking-[0.07rem] py-1.5 border-b border-[#c7c8ca]">
                    half time
                  </div>
                  {renderPlays(playsByPeriod['2nd Half'])}
                  <div class="text-center text-[0.8rem] text-[#969ca1] uppercase tracking-[0.07rem] py-1.5 border-b border-[#c7c8ca]">
                    full time
                  </div>
                </>
              )
            })()
          }
        </div>
      </div>
      <div>
        <p class="font-semibold text-[#b8b8b8]">Lineups</p>
        <SoccerLineup
          homeTeam={{
            name: homeTeam.abbrev,
            logoUrl: homeTeam.logoUrl,
            formation: homeTeamStats.formation,
            lineup: homeTeam.lineup,
            goals: homeTeamGoals,
            ownGoals: homeTeamOwnGoals,
            yellows: homeTeamYellows,
            reds: homeTeamReds,
            yellowReds: homeTeamYellowReds,
            subOuts: homeTeamSubOuts,
          }}
          awayTeam={{
            name: awayTeam.abbrev,
            logoUrl: awayTeam.logoUrl,
            formation: awayTeamStats.formation,
            lineup: awayTeam.lineup,
            goals: awayTeamGoals,
            ownGoals: awayTeamOwnGoals,
            yellows: awayTeamYellows,
            reds: awayTeamReds,
            yellowReds: awayTeamYellowReds,
            subOuts: awayTeamSubOuts,
          }}
        />
        <div class="flex justify-between py-1.5 mt-2 q">
          <div class="flex items-center">
            <Image
              class="w-4 h-4 mx-1.5 object-contain"
              src={homeTeam.logoUrl}
              alt={homeTeam.abbrev}
              width={50}
              height={50}
              loading="eager"
            />
            <span class="text-[0.8rem] uppercase tracking-[0.07rem]">
              {homeTeam.abbrev}
            </span>
          </div>
          <p class="text-[0.8rem] uppercase tracking-[0.07rem]">substitutes</p>
          <div class="flex items-center flex-row-reverse">
            <Image
              class="w-4 h-4 mx-1.5 object-contain"
              src={awayTeam.logoUrl}
              alt={awayTeam.abbrev}
              width={50}
              height={50}
              loading="eager"
              q
            />
            <span class="text-[0.8rem] uppercase tracking-[0.07rem]">
              {awayTeam.abbrev}
            </span>
          </div>
        </div>
        <div class="flex">
          <div class="flex-1">
            {
              homeSubs.map((player) => (
                <div class="flex items-center py-0.5">
                  <>
                    <p class="w-[19px] mx-1">{player.shirtNumber}</p>
                    <EntityLink
                      entity={player.entity}
                      class="text-current whitespace-nowrap"
                    >
                      {player.entity.display}
                    </EntityLink>
                    <SubArrow class="w-4 h-4 ml-1 shrink-0" color="#00a14b" />
                    {(() => {
                      if (homeTeamReds.includes(player.entity.display)) {
                        return <div class="w-3 h-4 bg-red-600 ml-0.5" />
                      }
                      if (homeTeamYellowReds.includes(player.entity.display)) {
                        return (
                          <div class="w-4 h-4 bg-yellow-300 relative ml-0.5">
                            <div class="w-3 h-4 bg-red-600 absolute right-0" />
                          </div>
                        )
                      }
                      if (homeTeamYellows.includes(player.entity.display)) {
                        return <div class="w-3 h-4 bg-yellow-300 ml-0.5" />
                      }
                    })()}
                    {homeTeamGoals.includes(player.entity.display) && (
                      <Goal class="w-4 h-4 ml-0.5 shrink-0" color="#000" />
                    )}
                  </>
                </div>
              ))
            }
            {
              homeBench.map((player) => (
                <div class="flex items-center py-0.5">
                  <>
                    <p class="w-[19px] mx-1">{player.shirtNumber}</p>
                    <EntityLink
                      entity={player.entity}
                      class="text-current whitespace-nowrap"
                    >
                      {player.entity.display}
                    </EntityLink>
                  </>
                </div>
              ))
            }
          </div>
          <div class="flex-1">
            {
              awaySubs.map((player) => (
                <div class="flex flex-row-reverse items-center py-0.5">
                  <>
                    <p class="w-[19px] mx-1 text-right">{player.shirtNumber}</p>
                    <EntityLink
                      entity={player.entity}
                      class="text-current whitespace-nowrap"
                    >
                      {player.entity.display}
                    </EntityLink>
                    <SubArrow class="w-4 h-4 mr-1 shrink-0" color="#00a14b" />
                    {(() => {
                      if (awayTeamReds.includes(player.entity.display)) {
                        return <div class="w-3 h-4 bg-red-600 mr-0.5" />
                      }
                      if (awayTeamYellowReds.includes(player.entity.display)) {
                        return (
                          <div class="w-4 h-4 bg-yellow-300 relative mr-0.5">
                            <div class="w-3 h-3 bg-red-600 absolute right-0" />
                          </div>
                        )
                      }
                      if (awayTeamYellows.includes(player.entity.display)) {
                        return <div class="w-3 h-4 bg-yellow-300 mr-0.5" />
                      }
                    })()}
                    {awayTeamGoals.includes(player.entity.display) && (
                      <Goal class="w-4 h-4 mr-0.5 shrink-0" color="#000" />
                    )}
                  </>
                </div>
              ))
            }
            {
              awayBench.map((player) => (
                <div class="flex flex-row-reverse items-center py-0.5">
                  <>
                    <p class="w-[19px] mx-1 text-right">{player.shirtNumber}</p>
                    <EntityLink
                      entity={player.entity}
                      class="text-current whitespace-nowrap"
                    >
                      {player.entity.display}
                    </EntityLink>
                  </>
                </div>
              ))
            }
          </div>
        </div>
      </div>
      <div>
        <p class="font-semibold text-[#b8b8b8]">Stats</p>
        <div
          class="flex justify-between bg-team-primary text-team-secondary rounded py-1"
        >
          <div class="flex items-center">
            <Image
              class="w-4 h-4 mx-1.5 object-contain"
              src={homeTeam.logoUrl}
              alt={homeTeam.abbrev}
              width={50}
              height={50}
              loading="eager"
            />
            <span class="text-[0.8rem] uppercase tracking-[0.07rem]">
              {homeTeam.abbrev}
            </span>
          </div>
          <div class="flex items-center flex-row-reverse">
            <Image
              class="w-4 h-4 mx-1.5 object-contain"
              src={awayTeam.logoUrl}
              alt={awayTeam.abbrev}
              width={50}
              height={50}
              loading="eager"
            />
            <span class="text-[0.8rem] uppercase tracking-[0.07rem]">
              {awayTeam.abbrev}
            </span>
          </div>
        </div>
        <p class="text-center py-0.5">Possession %</p>
        <div class="flex pb-1 border-b border-[#c7c8ca] relative">
          <div
            class="text-xs py-1.5 pl-1.5 rounded-l-full"
            style={{
              width: homeTeamStats.possessionPercentage + '%',
              color: homeTeamColors.foregroundColor,
              backgroundColor: homeTeamColors.backgroundColor,
            }}
          >
            {homeTeamStats.possessionPercentage + '%'}
          </div>
          <div
            style={{
              left: homeTeamStats.possessionPercentage + '%',
              width: '1px',
            }}
            class="absolute h-full bg-white"
          >
          </div>
          <div
            class="flex-1 text-team-primary text-xs py-1.5 pr-1.5 rounded-r-full text-right"
            style={{
              color: awayTeamColors.foregroundColor,
              backgroundColor: awayTeamColors.backgroundColor,
            }}
          >
            {awayTeamStats.possessionPercentage + '%'}
          </div>
        </div>

        <div class="flex py-0.5 border-b border-[#c7c8ca]">
          <p class="ml-1">{homeTeamStats.shotsOnTarget}</p>
          <p class="flex-1 text-center">Shots on target</p>
          <p class="mr-1">{awayTeamStats.shotsOnTarget}</p>
        </div>
        <div class="flex py-0.5 border-b border-[#c7c8ca]">
          <p class="ml-1">{homeTeamStats.shots}</p>
          <p class="flex-1 text-center">Shots</p>
          <p class="mr-1">{awayTeamStats.shots}</p>
        </div>
        <div class="flex py-0.5 border-b border-[#c7c8ca]">
          <p class="ml-1">{homeTeamStats.bigChances}</p>
          <p class="flex-1 text-center">Big chances</p>
          <p class="mr-1">{awayTeamStats.bigChances}</p>
        </div>
        <div class="flex py-0.5 border-b border-[#c7c8ca]">
          <p class="ml-1">{homeTeamStats.passes}</p>
          <p class="flex-1 text-center">Passes</p>
          <p class="mr-1">{awayTeamStats.passes}</p>
        </div>
        <div class="flex py-0.5 border-b border-[#c7c8ca]">
          <p class="ml-1">
            {
              Math.round(
                (homeTeamStats.passesCompleted / homeTeamStats.passes) * 1000,
              ) /
                10 +
                '%'
            }
          </p>
          <p class="flex-1 text-center">Pass accuracy</p>
          <p class="mr-1">
            {
              Math.round(
                (awayTeamStats.passesCompleted / awayTeamStats.passes) * 1000,
              ) /
                10 +
                '%'
            }
          </p>
        </div>
        <div class="flex py-0.5 border-b border-[#c7c8ca]">
          <p class="ml-1">{homeTeamStats.touches}</p>
          <p class="flex-1 text-center">Touches</p>
          <p class="mr-1">{awayTeamStats.touches}</p>
        </div>
        <div class="flex py-0.5 border-b border-[#c7c8ca]">
          <p class="ml-1">{homeTeamStats.corners}</p>
          <p class="flex-1 text-center">Corners</p>
          <p class="mr-1">{awayTeamStats.corners}</p>
        </div>
        <div class="flex py-0.5 border-b border-[#c7c8ca]">
          <p class="ml-1">{homeTeamStats.tackles}</p>
          <p class="flex-1 text-center">Tackles</p>
          <p class="mr-1">{awayTeamStats.tackles}</p>
        </div>
        <div class="flex py-0.5 border-b border-[#c7c8ca]">
          <p class="ml-1">{homeTeamStats.clearances}</p>
          <p class="flex-1 text-center">Clearances</p>
          <p class="mr-1">{awayTeamStats.clearances}</p>
        </div>
        <div class="flex py-0.5 border-b border-[#c7c8ca]">
          <p class="ml-1">{homeTeamStats.saves}</p>
          <p class="flex-1 text-center">Saves</p>
          <p class="mr-1">{awayTeamStats.saves}</p>
        </div>
        <div class="flex py-0.5 border-b border-[#c7c8ca]">
          <p class="ml-1">{homeTeamStats.offsides}</p>
          <p class="flex-1 text-center">Offsides</p>
          <p class="mr-1">{awayTeamStats.offsides}</p>
        </div>
        <div class="flex py-0.5 border-b border-[#c7c8ca]">
          <p class="ml-1">{homeTeamStats.fouls}</p>
          <p class="flex-1 text-center">Fouls</p>
          <p class="mr-1">{awayTeamStats.fouls}</p>
        </div>
        <div class="flex py-0.5 border-b border-[#c7c8ca]">
          <p class="ml-1">{homeTeamStats.yellowCards}</p>
          <p class="flex-1 text-center">Yellow cards</p>
          <p class="mr-1">{awayTeamStats.yellowCards}</p>
        </div>
        <div class="flex py-0.5 border-b border-[#c7c8ca]">
          <p class="ml-1">{homeTeamStats.redCards}</p>
          <p class="flex-1 text-center">Red cards</p>
          <p class="mr-1">{awayTeamStats.redCards}</p>
        </div>
      </div>
    </div>
  </Container>
</Layout>
