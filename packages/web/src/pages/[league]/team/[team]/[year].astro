---
import TeamLayout from '@layouts/team.astro'
import Grid from '@components/grid.astro'
import TeamLeaders from '@components/leaders.astro'
import PlayerGallery from '@components/gallery.astro'

import {
  GameraDomain,
  tokensToText,
  tokensToHtml,
  getUrlForEntity,
} from '@statmuse/core/gamera'
import { getTeamFranchiseLatestSeason, getTeamSeasonOverview } from '@lib/team'
import { getLeagueKeywords } from '@lib/meta'

interface Props {
  league?: string
  team?: string
  year?: string
  query?: string
}

const query = Astro.props.query
const league = Astro.props.league || Astro.params.league
const team = Astro.props.team || Astro.params.team
let year = Astro.props.year || Astro.params.year

if (!team || !league || !year) {
  return new Response(null, { status: 404, statusText: 'Not found' })
}

const domain = league.toUpperCase() as GameraDomain
let response = await getTeamSeasonOverview({
  domain,
  team,
  year,
})

// re-fetch team season overview from latest season if initial reponse has no stats
if (response && !response.bio.hasStats && Astro.request.method === 'POST') {
  const latestSeason = await getTeamFranchiseLatestSeason({
    domain: league as GameraDomain,
    teamId: response.teamId.toString(),
  })
  year = latestSeason?.entity.id.split('/')[1] as string
  response = await getTeamSeasonOverview({
    domain,
    team,
    year,
  })
}

if (!response) {
  return new Response(null, { status: 404, statusText: 'Not found' })
}

const { bio, scoresAndSchedule, teamLeaders, standings, stats, playerGallery } =
  response

const summary = bio.summaryNlg ? tokensToHtml(bio.summaryNlg) : undefined

const title = `${year} ${bio.name} Team & Player Stats`
const description = bio.summaryNlg
  ? tokensToText(bio.summaryNlg)
  : `The ${year} ${bio.name} team and player stats for the ${domain} regular season and playoffs`
const keywords = `${getLeagueKeywords(domain)} ${year} ${
  bio.name
} team player stats statistics`
const canonical = {
  url: `${getUrlForEntity({
    type: 'teamSeason',
    domain,
    id: bio.teamId.toString(),
    display: bio.name,
  })}/${year}`,
  rewrite: true,
}
const meta = { title, description, keywords, canonical }
---

<TeamLayout {bio} {meta} {query}>
  <div>
    <div class="mb-5 leading-snug">
      <p set:html={summary} />
    </div>
    <div
      class="grid grid-cols-[repeat(auto-fit,_minmax(300px,_1fr))] gap-5 mb-5"
    >
      {
        scoresAndSchedule && (
          <Grid
            data={scoresAndSchedule}
            columnStyles={{ DATE: 'text-left', SCORE: 'text-left' }}
          >
            <a href={`schedule/${year}`}>See schedule</a>
          </Grid>
        )
      }
      {
        teamLeaders && (
          <TeamLeaders leaders={teamLeaders}>
            <a href={`roster/${year}`}>See roster</a>
          </TeamLeaders>
        )
      }
      {
        standings && (
          <Grid
            data={standings}
            columnStyles={{ DATE: 'text-left', SCORE: 'text-left' }}
          />
        )
      }
    </div>
    {
      stats &&
        (Array.isArray(stats) ? (
          stats.map((data) => (
            <Grid
              data={data}
              class="mb-5"
              columnStyles={{ DATE: 'text-left', SCORE: 'text-left' }}
            >
              <a href={`stats/${year}`}>See stats</a>
            </Grid>
          ))
        ) : (
          <Grid
            data={stats}
            class="mb-5"
            columnStyles={{ DATE: 'text-left', SCORE: 'text-left' }}
          >
            <a href={`stats/${year}`}>See stats</a>
          </Grid>
        ))
    }
    {playerGallery && <PlayerGallery images={playerGallery} class="mb-5" />}
  </div>
</TeamLayout>
