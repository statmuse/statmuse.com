---
import TeamLayout from '@layouts/team.astro'
import Grid from '@components/grid.svelte'

import { getUrlForEntity } from '@statmuse/core/gamera'
import { getTeamSeasonBio, getTeamSeasonRoster } from '@lib/team'
import { getLeagueKeywords } from '@lib/meta'
import { Caching } from '@lib/caching'
import { NOT_FOUND_404 } from '@lib/response'
import { leagueToDomain, type LeagueParam } from '@lib/params'

const league = Astro.params.league as LeagueParam
const team = Astro.params.team
const year = Astro.params.year
if (!team || !league || !year) return NOT_FOUND_404

const domain = leagueToDomain(league)
const bio = await getTeamSeasonBio({ context: Astro, domain, team, year })
const roster = await getTeamSeasonRoster({ context: Astro, domain, team, year })
if (!bio || !roster) return NOT_FOUND_404

if (!bio.hasRoster) {
  return Astro.redirect(`/${league}/team/${team}/schedule/${year}`)
}

const title = `${bio.name} ${year} Roster`
const description = `The ${year} ${bio.name} roster for the ${domain} regular season and playoffs`
const keywords = `${getLeagueKeywords(domain)} ${year} ${
  bio.name
} team roster stats statistics`
const canonical = {
  url: `${getUrlForEntity({
    type: 'teamSeason',
    domain,
    id: bio.teamId.toString(),
    display: bio.name,
  })}/roster/${year}`,
  rewrite: true,
}
const meta = { title, description, keywords, canonical }

Caching.swr(Astro)
---

<TeamLayout {bio} {meta} page="roster">
  {
    roster?.grid && (
      <Grid
        client:load
        title={roster.grid.name}
        data={roster?.grid}
        columnStyles={{ 'NO.': 'w-2', IMAGE: 'w-2', default: 'w-20' }}
        stickyColumns={['NAME']}
        fullWidth={false}
      />
    )
  }
</TeamLayout>
