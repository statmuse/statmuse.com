---
import TeamLayout from '@layouts/team.astro'
import Grid from '@components/grid.astro'

import { getUrlForEntity, type GameraDomain } from '@statmuse/core/gamera'
import { getTeamSeasonBio, getTeamSeasonGameResults } from '@lib/team'
import { getLeagueKeywords } from '@lib/meta'

const { league, team, year } = Astro.params
if (!team || !league || !year) {
  return new Response(null, { status: 404, statusText: 'Not found' })
}

const domain = league.toUpperCase() as GameraDomain
const bio = await getTeamSeasonBio({ domain, team, year })
const gameResults = await getTeamSeasonGameResults({ domain, team, year })
if (!bio || !gameResults) {
  return new Response(null, { status: 404, statusText: 'Not found' })
}

const title = `${year} ${bio.name} Schedule & Results`
const description = `The ${year} ${bio.name} schedule and results for the ${domain} regular season and playoffs`
const keywords = `${getLeagueKeywords(domain)} ${year} ${
  bio.name
} team schedule results stats statistics`
const canonical = {
  url: `${getUrlForEntity({
    type: 'teamSeason',
    domain,
    id: bio.teamId.toString(),
    display: bio.name,
  })}/schedule/${year}`,
  rewrite: true,
}
const meta = { title, description, keywords, canonical }
---

<TeamLayout {bio} {meta}>
  <div class="space-y-5 mb-5">
    {
      gameResults?.grids &&
        gameResults.grids.map((data) => (
          <Grid
            {data}
            fullWidth={false}
            columnStyles={{
              DATE: 'text-left w-20',
              SCORE: 'text-left w-20',
              OPP: 'text-left w-20',
              RECORD: 'text-right w-20',
            }}
          />
        ))
    }
  </div>
</TeamLayout>
