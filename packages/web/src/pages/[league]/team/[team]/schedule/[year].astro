---
import TeamLayout from '@layouts/team.astro'
import Grid from '@components/grid.svelte'
import { getUrlForEntity } from '@statmuse/core/gamera'
import {
  getTeamSeasonBio,
  getTeamSeasonGameResults,
  getTeamSeasonSchedule,
} from '@lib/team'
import { getLeagueKeywords } from '@lib/meta'
import { Caching } from '@lib/caching'
import { NOT_FOUND_404 } from '@lib/response'
import { leagueToDomain, type LeagueParam } from '@lib/params'

const league = Astro.params.league as LeagueParam
const team = Astro.params.team
const year = Astro.params.year
if (!team || !league || !year) return NOT_FOUND_404

const domain = leagueToDomain(league)
const bio = await getTeamSeasonBio({ context: Astro, domain, team, year })
const gameResults = await getTeamSeasonGameResults({
  context: Astro,
  domain,
  team,
  year,
})
const schedule = await getTeamSeasonSchedule({
  context: Astro,
  domain,
  team,
  year,
})

if (!bio || !gameResults) return NOT_FOUND_404

const title = `${bio.name} ${year} Schedule & Results`
const description = `The ${year} ${bio.name} schedule and results for the ${domain} regular season and playoffs`
const keywords = `${getLeagueKeywords(domain)} ${year} ${
  bio.name
} team schedule results stats statistics`
const canonical = {
  url: `${getUrlForEntity({
    type: 'teamSeason',
    domain,
    id: bio.teamId.toString(),
    display: bio.name,
  })}/schedule/${year}`,
  rewrite: true,
}
const meta = { title, description, keywords, canonical }

Caching.swr(Astro)
---

<TeamLayout {bio} {meta} page="schedule">
  <div class="space-y-5 mb-5">
    {
      schedule?.grid && schedule.grid.columns.length > 0 && (
        <div class="mb-5">
          <h3 class="font-semibold text-team-primary mb-0.5">
            {schedule.grid.name}
          </h3>
          <Grid
            client:load
            data={schedule.grid}
            fullWidth={false}
            columnStyles={{
              DATE: 'text-left w-20',
              default: 'w-20',
            }}
          />
        </div>
      )
    }
    {
      gameResults?.grids &&
        gameResults.grids.map((data) => (
          <div class="mb-5">
            <h3 class="font-semibold text-team-primary mb-0.5">{data.name}</h3>
            <Grid
              {data}
              fullWidth={false}
              columnStyles={{
                DATE: 'text-left w-20',
                SCORE: 'text-left w-20',
                default: 'w-20',
              }}
            />
          </div>
        ))
    }
  </div>
</TeamLayout>
