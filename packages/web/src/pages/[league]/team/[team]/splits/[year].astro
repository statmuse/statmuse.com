---
import TeamLayout from '@layouts/team.astro'
import Grid from '@components/grid.astro'

import { getUrlForEntity, type GameraDomain } from '@statmuse/core/gamera'
import { getTeamSeasonBio, getTeamSeasonSplits } from '@lib/team'
import { getLeagueKeywords } from '@lib/meta'
import { Caching } from '@lib/caching'
import { NOT_FOUND_404 } from '@lib/response'

const { league, team, year } = Astro.params
if (!team || !league || !year) return NOT_FOUND_404

const params = Astro.url.searchParams
const domain = league.toUpperCase() as GameraDomain
const bio = await getTeamSeasonBio({ context: Astro, domain, team, year })
const splits = await getTeamSeasonSplits({ context: Astro, domain, team, year, params })
if (!bio || !splits) return NOT_FOUND_404

if (!bio.hasStats) {
  return Astro.redirect(`/${league}/team/${team}/schedule/${year}`)
}

const title = `${year} ${bio.name} Splits`
const description = `The ${year} ${bio.name} splits for the ${domain} regular season and playoffs`
const keywords = `${getLeagueKeywords(domain)} ${year} ${
  bio.name
} team splits stats statistics`
const canonical = {
  url: `${getUrlForEntity({
    type: 'teamSeason',
    domain,
    id: bio.teamId.toString(),
    display: bio.name,
  })}/splits/${year}`,
  rewrite: true,
}
const meta = { title, description, keywords, canonical }

Caching.swr(Astro)
---

<TeamLayout {bio} {meta} page="splits">
  <div class="space-y-5 mb-5">
    {
      splits?.grids &&
        splits.grids.map((data) => (
          <Grid
            {data}
            parameters={splits.parameters}
            columnStyles={{ SPLIT: 'w-24 min-w-[96px] text-left' }}
          />
        ))
    }
  </div>
</TeamLayout>
