---
import TeamLayout from '@layouts/team.astro'
import Grid from '@components/grid.astro'

import {
  type GameraDomain,
  getUrlForEntity,
  tokensToText,
} from '@statmuse/core/gamera'
import {
  getTeamSeasonBio,
  getTeamSeasonStats,
  getTeamSeasonPlayerStats,
} from '@lib/team'
import { getLeagueKeywords } from '@lib/meta'
import { Caching } from '@lib/caching'
import { NOT_FOUND_404 } from '@lib/response'

const { league, team, year } = Astro.params
if (!team || !league || !year) return NOT_FOUND_404

const params = Astro.url.searchParams
const domain = league.toUpperCase() as GameraDomain
const bio = await getTeamSeasonBio({ context: Astro, domain, team, year })
const stats = await getTeamSeasonStats({
  context: Astro,
  domain,
  team,
  year,
  params,
})
const playerStats = await getTeamSeasonPlayerStats({
  context: Astro,
  domain,
  team,
  year,
  params,
})
if (!bio || !stats || !playerStats) return NOT_FOUND_404

if (!bio.hasStats) {
  return Astro.redirect(`/${league}/team/${team}/schedule/${year}`)
}

const title = `${bio.name} ${year} Team & Player Stats`
const description = bio.summaryNlg
  ? tokensToText(bio.summaryNlg)
  : `The ${year} ${bio.name} team and player stats for the ${domain} regular season and playoffs`
const keywords = `${getLeagueKeywords(domain)} ${year} ${
  bio.name
} team player stats statistics`
const canonical = {
  url: `${getUrlForEntity({
    type: 'teamSeason',
    domain,
    id: bio.teamId.toString(),
    display: bio.name,
  })}/stats/${year}`,
  rewrite: true,
}
const meta = { title, description, keywords, canonical }

Caching.swr(Astro)
---

<TeamLayout {bio} {meta} page="stats">
  <div>
    {
      stats.grids.map((grid, i) => (
        <Fragment>
          <Grid class="mb-5" data={grid} parameters={stats.parameters} />
          {playerStats.grids[i] && (
            <Grid
              class="mb-5"
              data={playerStats.grids[i]}
              parameters={stats.parameters}
            />
          )}
        </Fragment>
      ))
    }
    {
      playerStats.grids.length > stats.grids.length
        ? playerStats.grids
            .slice(stats.grids.length)
            .map((grid) => (
              <Grid class="mb-5" data={grid} parameters={stats.parameters} />
            ))
        : null
    }
  </div>
</TeamLayout>
