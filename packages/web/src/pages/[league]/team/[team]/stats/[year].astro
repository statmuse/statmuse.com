---
import TeamLayout from '@layouts/team.astro'
import Grid from '@components/grid.astro'
import { getUrlForEntity, tokensToText } from '@statmuse/core/gamera'
import {
  getTeamSeasonBio,
  getTeamSeasonStats,
  getTeamSeasonPlayerStats,
} from '@lib/team'
import { getLeagueKeywords } from '@lib/meta'
import { Caching } from '@lib/caching'
import { NOT_FOUND_404 } from '@lib/response'
import { leagueToDomain, type LeagueParam } from '@lib/params'

const league = Astro.params.league as LeagueParam
const team = Astro.params.team
const year = Astro.params.year
if (!team || !league || !year) return NOT_FOUND_404

const params = Astro.url.searchParams
const domain = leagueToDomain(league)
const bio = await getTeamSeasonBio({ context: Astro, domain, team, year })
const stats = await getTeamSeasonStats({
  context: Astro,
  domain,
  team,
  year,
  params,
})
const playerStats = await getTeamSeasonPlayerStats({
  context: Astro,
  domain,
  team,
  year,
  params,
})
if (!bio || !stats || !playerStats) return NOT_FOUND_404

if (!bio.hasStats) {
  return Astro.redirect(`/${league}/team/${team}/schedule/${year}`)
}

const title = `${bio.name} ${year} Team & Player Stats`
const description = bio.summaryNlg
  ? tokensToText(bio.summaryNlg)
  : `The ${year} ${bio.name} team and player stats for the ${domain} regular season and playoffs`
const keywords = `${getLeagueKeywords(domain)} ${year} ${
  bio.name
} team player stats statistics`
const canonical = {
  url:
    `${getUrlForEntity({
      type: 'teamSeason',
      domain,
      id: bio.teamId.toString(),
      display: bio.name,
    })}/stats/${year}` + Astro.url.search,
  rewrite: true,
}
const meta = { title, description, keywords, canonical }

Caching.swr(Astro)
---

<TeamLayout {bio} {meta} page="stats">
  <div>
    {
      stats.grids.map((grid, i) => (
        <Fragment>
          <Grid
            class="mb-5"
            data={grid}
            parameters={stats.parameters}
            {domain}
          />
          {playerStats.grids[i] && (
            <Grid
              class="mb-5"
              data={playerStats.grids[i]}
              parameters={playerStats.parameters}
            />
          )}
        </Fragment>
      ))
    }
    {
      playerStats.grids.length > stats.grids.length
        ? playerStats.grids
            .slice(stats.grids.length)
            .map((grid) => (
              <Grid
                class="mb-5"
                data={grid}
                parameters={playerStats.parameters}
              />
            ))
        : null
    }
  </div>
</TeamLayout>
