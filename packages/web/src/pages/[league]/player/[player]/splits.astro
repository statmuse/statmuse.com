---
import PlayerLayout from '@layouts/player.astro'
import Grid from '@components/grid.svelte'
import GridDropdown from '@components/grid-dropdown.astro'
import { getPlayerBio, getPlayerSplits } from '@lib/player'
import { getLeagueKeywords } from '@lib/meta'
import { Caching } from '@lib/caching'
import { NOT_FOUND_404 } from '@lib/response'
import { leagueToDomain, type LeagueParam } from '@lib/params'

const league = Astro.params.league as LeagueParam
const player = Astro.params.player
if (!player || !league) return NOT_FOUND_404

const domain = leagueToDomain(league)
const params = Astro.url.searchParams
const splits = await getPlayerSplits({ context: Astro, domain, player, params })
const bio = await getPlayerBio(Astro, domain, player)
if (!splits || !bio) return NOT_FOUND_404

const { grids, parameters } = splits
const leagueKeywords = getLeagueKeywords(domain)
const seasonYear = Astro.url.searchParams.get('seasonYear')
const year = seasonYear ? ` ${seasonYear}` : ''

const title = [bio.usedName, year?.trim(), 'Splits']
  .filter((w) => !!w)
  .join(' ')
const description = `${bio.usedName}'s splits for the${year} ${domain} regular season and playoffs`
const keywords = `${leagueKeywords} ${bio.usedName}${year} splits stats statistics`
const meta = { title, description, keywords }

Caching.swr(Astro)
---

<PlayerLayout {league} {bio} {meta} page="splits">
  <div>
    {
      grids &&
        grids.map((grid) => (
          <div class="mb-5">
            <div class="flex justify-between mb-0.5">
              <h3 class="font-semibold text-team-primary">{grid.name}</h3>
              {parameters && <GridDropdown {parameters} />}
            </div>
            <Grid
              client:load
              data={grid}
              columnStyles={{ SPLIT: 'text-left w-24 min-w-[96px]' }}
            />
          </div>
        ))
    }
  </div>
</PlayerLayout>
