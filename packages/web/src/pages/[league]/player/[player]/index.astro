---
import PlayerLayout from '@layouts/player.astro'
import Grid from '@components/grid.astro'
import PlayerGallery from '@components/gallery.astro'

import {
  type GameraDomain,
  tokensToText,
  tokensToHtml,
  getUrlForEntity,
} from '@statmuse/core/gamera'
import { getPlayerProfile, getPositionName } from '@lib/player'
import { getLeagueKeywords } from '@lib/meta'
import { Caching } from '@lib/caching'
import { NOT_FOUND_404 } from '@lib/response'

interface Props {
  league?: string
  player?: string
  query?: string
}

const query = Astro.props.query
const player = Astro.props.player || Astro.params.player
const league = Astro.props.league || Astro.params.league

if (!player || !league) return NOT_FOUND_404

const domain = league.toUpperCase() as GameraDomain
const profile = await getPlayerProfile(Astro, domain, player)
if (!profile) return NOT_FOUND_404

const { bio, stats, recentGames, nextGame } = profile

const isNextGameHome =
  profile.bio.team?.abbreviation === nextGame?.homeTeam.abbreviation

const summary = bio.summaryNlg ? tokensToHtml(bio.summaryNlg) : undefined
const playerPath = getUrlForEntity({
  type: 'player',
  domain: bio.domain,
  id: bio.playerId.toString(),
  display: bio.usedName,
})

const position = getPositionName(bio)
const title = `${bio.usedName} - ${bio.team?.name || bio.domain} ${
  position || 'Player'
}`
const description = bio.summaryNlg ? tokensToText(bio.summaryNlg) : undefined
const keywords = `${getLeagueKeywords(domain)} ${
  bio.usedName
} career stats statistics`
const canonical = { url: playerPath, rewrite: true }
const meta = { title, description, keywords, canonical }

Caching.swr(Astro)
---

<PlayerLayout
  {bio}
  {meta}
  league={league.toLowerCase() === 'epl' ? 'fc' : league}
  {query}
  page="overview"
>
  <div>
    <div class="mb-5 leading-snug">
      <p set:html={summary} />
    </div>
    <div class="mb-5">
      {
        nextGame?.grid && (
          <Grid
            class="mb-5"
            data={nextGame.grid}
            title={`Next Game ${isNextGameHome ? 'vs' : '@'} ${
              isNextGameHome
                ? nextGame.awayTeam.abbreviation
                : nextGame.homeTeam.abbreviation
            }`}
          />
        )
      }
      {
        stats?.grid && (
          <Grid
            class="mb-5"
            seeAllUrl={`${playerPath}/career-stats`}
            data={stats.grid}
          />
        )
      }
      {
        recentGames?.grid && (
          <Grid
            class="mb-5"
            seeAllUrl={
              league === 'fc'
                ? `${playerPath}/matches`
                : `${playerPath}/game-log`
            }
            data={recentGames.grid}
            columnStyles={{ DATE: 'text-left', SCORE: 'text-left' }}
          />
        )
      }
      {
        recentGames?.columns && recentGames?.rows && (
          <Grid
            class="mb-5"
            seeAllUrl={
              league === 'fc'
                ? `${playerPath}/matches`
                : `${playerPath}/game-log`
            }
            data={recentGames}
            columnStyles={{ DATE: 'text-left', SCORE: 'text-left' }}
          />
        )
      }
      {
        bio.bustImageUrlGallery.length ? (
          <PlayerGallery images={bio.bustImageUrlGallery} class="mb-5" />
        ) : null
      }
    </div>
  </div>
</PlayerLayout>
