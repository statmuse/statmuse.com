---
import Grid from '@components/grid.astro'
import PlayerLayout from '@layouts/player.astro'
import { type GameraDomain, tokensToText } from '@statmuse/core/gamera'
import { getPlayerBio, getPlayerStats } from '@lib/player'
import { getLeagueKeywords } from '@lib/meta'
import { Caching } from '@lib/caching'

const { league, player } = Astro.params
if (!player || !league) {
  return new Response(null, {
    status: 404,
    statusText: 'Not found',
  })
}

const domain = league as GameraDomain
const params = Astro.url.searchParams
const stats = await getPlayerStats({
  domain,
  player,
  params,
})
const bio = await getPlayerBio(league as GameraDomain, player)
if (!stats || !bio) {
  return new Response(null, {
    status: 404,
    statusText: 'Not found',
  })
}

const { grids, parameters } = stats

const [firstParam] = Object.values(parameters)
const firstParamDisplay = firstParam
  ? firstParam.values.find((v) => v.id === firstParam.selectedValueId)?.display
  : undefined
const title = `${bio.usedName} Career Stats${
  firstParamDisplay ? ` (${firstParamDisplay})` : ''
}`
const description =
  (bio.summaryNlg && tokensToText(bio.summaryNlg)) ||
  `${bio.usedName} career stats for the ${domain} regular season and playoffs`
const keywords = `${getLeagueKeywords(bio.domain)} ${
  bio.usedName
} career stats statistics`
const meta = { title, description, keywords }

Caching.swr(Astro)
---

<PlayerLayout {league} {bio} {meta}>
  <div>
    {
      grids &&
        grids.map((grid) => (
          <Grid
            class="mb-5"
            data={grid}
            columnStyles={{ SEASON: 'text-left' }}
            {parameters}
          />
        ))
    }
  </div>
</PlayerLayout>
