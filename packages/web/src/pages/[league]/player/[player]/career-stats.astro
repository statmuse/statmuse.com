---
import Grid from '@components/grid.svelte'
import PlayerLayout from '@layouts/player.astro'
import { tokensToText } from '@statmuse/core/gamera'
import { getPlayerBio, getPlayerStats } from '@lib/player'
import { getLeagueKeywords } from '@lib/meta'
import { Caching } from '@lib/caching'
import { NOT_FOUND_404 } from '@lib/response'
import { leagueToDomain, type LeagueParam } from '@lib/params'

const league = Astro.params.league as LeagueParam
const player = Astro.params.player
if (!player || !league) return NOT_FOUND_404

const domain = leagueToDomain(league)
const params = Astro.url.searchParams
const stats = await getPlayerStats({
  context: Astro,
  domain,
  player,
  params,
})
const bio = await getPlayerBio(Astro, domain, player)
if (!stats || !bio) return NOT_FOUND_404

const { grids, parameters } = stats

let firstParamDisplay: string | undefined

if (parameters) {
  const [firstParam] = Object.values(parameters)
  firstParamDisplay = firstParam
    ? firstParam.values.find((v) => v.id === firstParam.selectedValueId)
        ?.display
    : undefined
}

const title = `${bio.usedName} Career Stats${
  firstParamDisplay ? ` (${firstParamDisplay})` : ''
}`
const description =
  (bio.summaryNlg && tokensToText(bio.summaryNlg)) ||
  `${bio.usedName} career stats for the ${domain} regular season and playoffs`
const keywords = `${getLeagueKeywords(bio.domain)} ${
  bio.usedName
} career stats statistics`
const meta = { title, description, keywords }

Caching.swr(Astro)
---

<PlayerLayout {league} {bio} {meta} page="stats" {parameters}>
  {
    grids &&
      grids.map((grid) => (
        <Grid
          title={grid.name}
          client:load
          data={grid}
          columnStyles={{ SEASON: 'text-left' }}
        />
      ))
  }
</PlayerLayout>
