---
import PlayerLayout from '@layouts/player.astro'
import {
  type GameraDomain,
  tokensToText,
  tokensToHtml,
} from '@statmuse/core/gamera'
import { formatDateString } from '@statmuse/core/time'
import { getPlayerBio } from '@lib/player'
import { getLeagueKeywords } from '@lib/meta'
import { Caching } from '@lib/caching'
import { NOT_FOUND_404 } from '@lib/response'

const { league, player } = Astro.params
if (!player || !league) return NOT_FOUND_404

const domain = league.toUpperCase() as GameraDomain
const bio = await getPlayerBio(Astro, domain, player)
if (!bio) return NOT_FOUND_404

const leagueKeywords = getLeagueKeywords(domain)
const summary = bio.summaryNlg ? tokensToHtml(bio.summaryNlg) : undefined
const title = `${bio.usedName} Bio`
const description = bio.summaryNlg ? tokensToText(bio.summaryNlg) : undefined
const keywords = `${leagueKeywords} ${bio.usedName} career stats statistics`
const meta = { title, description, keywords }
const birthdate = formatDateString(bio.birthdate)

Caching.swr(Astro)
---

<PlayerLayout {league} {bio} {meta} page="bio">
  <div>
    <div class="mb-5 leading-snug">
      <p set:html={summary} />
    </div>
    {
      bio && league !== 'epl' && (
        <table class="mb-5 border-collapse leading-tight">
          <tbody>
            {bio.birthdate && (
              <tr>
                <td>Born:</td>
                <td class="pl-4">
                  {birthdate}
                  {bio.age && ` (age ${bio.age})`}
                </td>
              </tr>
            )}
            {bio.birthplace && (
              <tr>
                <td>Birth Place:</td>
                <td class="pl-4">{bio.birthplace}</td>
              </tr>
            )}
            {bio.drafted && (
              <tr>
                <td>Drafted:</td>
                <td class="pl-4">{bio.drafted}</td>
              </tr>
            )}
            {bio.college && (
              <tr>
                <td>College:</td>
                <td class="pl-4">{bio.college}</td>
              </tr>
            )}
            {bio.experience && (
              <tr>
                <td>Experience:</td>
                <td class="pl-4">{bio.experience}</td>
              </tr>
            )}
          </tbody>
        </table>
      )
    }
    {
      bio && league === 'epl' && (
        <table class="mb-5 border-collapse leading-tight">
          <tbody>
            {bio.position && (
              <tr>
                <td>Position:</td>
                <td class="pl-4">{bio.position}</td>
              </tr>
            )}
            {bio.nationality && (
              <tr>
                <td>Nationality:</td>
                <td class="pl-4">{bio.nationality}</td>
              </tr>
            )}
            {bio.birthdate && (
              <tr>
                <td>Born:</td>
                <td class="pl-4">
                  {birthdate}
                  {bio.age && ` (age ${bio.age})`}
                </td>
              </tr>
            )}
            {bio.heightCentimeters && (
              <tr>
                <td>Height:</td>
                <td class="pl-4">{bio.heightCentimeters}</td>
              </tr>
            )}
            {bio.preferredFoot && (
              <tr>
                <td>Preferred Foot:</td>
                <td class="pl-4">{bio.preferredFoot}</td>
              </tr>
            )}
          </tbody>
        </table>
      )
    }
    {
      bio && bio.awards && bio.awards.length > 0 && (
        <div class="mb-5 leading-tight">
          <h3 class="font-semibold text-team-primary">Awards</h3>
          <ul class="list-disc list-inside">
            {bio.awards.map((award) => (
              <li>
                {award.years.length > 1 ? `${award.years.length}x ` : ''}
                {award.name}
                {` (${award.years.join(', ')})`}
              </li>
            ))}
          </ul>
        </div>
      )
    }
  </div>
</PlayerLayout>
