---
import Layout from '@layouts/base.astro'
import ErrorLayout from '@layouts/error.astro'
import { ask, getHeroProps, handleResponse } from '@lib/gamera'
import { Caching } from '@lib/caching'
import * as Enforcer from '@lib/enforcer'
import { NOT_FOUND_404 } from '@lib/response'
import { leagueToDomain, type LeagueParam } from '@lib/params'
import {
  tokensToText,
  type GameraDefaultResponse,
  type GameraResponse,
} from '@statmuse/core/gamera'
import Explore from '@components/explore.astro'
import Hero from '@components/hero.astro'
import Visuals from '@components/visuals.astro'
import AnswerCards from '@components/answer-cards.astro'
import { clean, createAskPath, imageForgeUrl } from '@statmuse/core/path'
import { description, title } from '@lib/meta'
import * as Link from '@statmuse/core/link'
import type { AnalyticsPageviewProperties } from '@lib/analytics'
import { ANSWER_CARDS_ENABLED } from 'src/config'
import { find } from 'lodash-es'

const league = Astro.params.league as LeagueParam
const domain = leagueToDomain(league).toLowerCase()
const canQuery = await Enforcer.canQuery(Astro.locals)
if (!canQuery) {
  return Astro.redirect('/auth/signup?limit')
}

const replaceHyphens = !!Astro.params.question
const question = Astro.params.question ?? Astro.url.searchParams.get('q')
if (!question) return Astro.redirect('/questions')
let query = replaceHyphens ? question.replaceAll('-', ' ') : question

const askResponse = await ask({ league: domain, query }, Astro)
if ('redirect' in askResponse) return Astro.redirect(askResponse.redirect)
const answer = askResponse.response as GameraDefaultResponse
if (!answer) return NOT_FOUND_404

const { redirectUrl } = await handleResponse(Astro, answer)
if (redirectUrl) return Astro.redirect(encodeURI(redirectUrl))

const conversationToken = answer.conversation.token
query = clean(
  tokensToText(
    answer.visual.summaryTokens?.filter((t) => t.type !== 'inferred'),
  ),
)
const preferredDomain = answer.visual.domain?.toLowerCase()

const subject = answer.visual.summary.subject
const contentReference = answer.visual.contentReference
const heroProps = getHeroProps({ imageAlt: query, response: answer })!
const meta = {
  title: title(query),
  description: description(answer),
  canonical: {
    url: createAskPath({
      domain: preferredDomain || '',
      query,
    }),
    rewrite: true,
  },
  pageType: 'ask',
  facebook: {
    imageUrl:
      heroProps?.imageUrl &&
      imageForgeUrl({
        url: heroProps.imageUrl,
        bgColor: subject.colors?.background,
        type: 'facebook',
      }),
  },
  twitter: {
    imageUrl:
      heroProps?.imageUrl &&
      imageForgeUrl({
        url: heroProps.imageUrl,
        bgColor: subject.colors?.background,
        type: 'twitter',
      }),
  },
}

const code = await Link.askShortCode(query, preferredDomain || '')

const pageType = (
  answer: GameraResponse,
): AnalyticsPageviewProperties['page_type'] => {
  if (answer.type === 'nlgPromptForMoreInfoVisualChoicesOptional')
    return 'prompt'
  if (answer.visual.detail?.find((d) => d.type === 'standings'))
    return 'standings'
  if (answer.visual.detail?.find((d) => d.type === 'schedule'))
    return 'schedule'
  if (answer.visual.detail?.find((d) => d.type.includes('BoxScore')))
    return 'game'
  return 'ask'
}

const [questionTeamId] = contentReference?.questionTags?.teamIds ?? []
const [answerTeamId] = contentReference?.answerTags?.teamIds ?? []
const teamId = questionTeamId ?? answerTeamId

const share = {
  type: 'ask' as const,
  query,
  domain: preferredDomain,
  shortCode: code?.short_code,
}

Caching.swr(Astro)
---

<ErrorLayout
  render={answer.type === 'error'}
  status={422}
  message={tokensToText(answer.visual.summary.answer)}
  {query}
  domain={answer.visual.domain}
  analytics={{
    is_search: true,
    page_type: 'ask',
    page_domain:
      answer.type === 'error'
        ? (answer.visual.domain?.toLowerCase() as AnalyticsPageviewProperties['page_domain'])
        : undefined,
    disposition: answer.disposition,
    tokenizationScore: answer.tokenizationScore,
    query,
  }}
  trending
>
  <Layout
    colors={subject?.colors}
    {meta}
    analytics={{
      is_search: true,
      page_type: pageType(answer),
      page_domain:
        preferredDomain as AnalyticsPageviewProperties['page_domain'],
      disposition: answer.disposition,
      tokenizationScore: answer.tokenizationScore,
      query,
      contentReference: answer.visual.contentReference,
      subject: answer.visual.summary.subject,
    }}
    {query}
    {conversationToken}
    {preferredDomain}
    {share}
  >
    {
      !find(answer.visual.detail, { type: 'eplHistoricalBoxScore' }) && (
        <Hero class="@lg/hero:pr-12" {...heroProps} {share} renderAdBanner />
      )
    }
    <Visuals class="" response={answer} {conversationToken} />
    <Explore {league} additionalQuestions={answer.visual.additionalQuestions} />
    {
      preferredDomain && ANSWER_CARDS_ENABLED && (
        <AnswerCards domain={leagueToDomain(league)} {teamId} />
      )
    }
  </Layout>
</ErrorLayout>
