---
import Layout from '@layouts/main.astro'
import Error from '@layouts/error.astro'
import Header from '@components/header.astro'
import Hero from '@components/hero.astro'
import Visuals from '@components/visuals.astro'
import Explore from '@components/explore.astro'
import Container from '@components/container.astro'
import {
  type GameraDefaultResponse,
  handleResponse,
  tokensToText,
} from '@statmuse/core/gamera'
import { fantasyAsk, getHeroProps } from '@lib/gamera'
import { description, title } from '@lib/meta'
import { clean, imageForgeUrl } from '@statmuse/core/path'
import { Caching } from '@lib/caching'
import * as Enforcer from '@lib/enforcer'
import * as Link from '@statmuse/core/link'
import { NOT_FOUND_404 } from '@lib/response'
import AnswerCards from '@components/answer-cards.astro'

const canQuery = await Enforcer.canQuery(Astro.locals)

if (!canQuery) {
  return Astro.redirect('/auth/signup?limit')
}

const { question } = Astro.params
if (!question) return Astro.redirect('/questions')
let query = question.replaceAll('-', ' ')
const response = (await fantasyAsk({ query }, Astro)) as
  | GameraDefaultResponse
  | undefined
if (!response) return NOT_FOUND_404

const { subject, redirectUrl, conversationToken } = handleResponse(response)
if (redirectUrl) return Astro.redirect(redirectUrl)

const heroProps = getHeroProps({ imageAlt: query, response })
query = clean(
  tokensToText(
    response.visual.summaryTokens?.filter((t) => t.type !== 'inferred'),
  ),
)

const code = await Link.askShortCode(query, 'nfl')

const meta =
  response.type !== 'error'
    ? {
        title: title(query),
        description: description(response),
        facebook: {
          imageUrl: imageForgeUrl({
            url: heroProps?.imageUrl || '',
            bgColor: subject.colors.background,
            type: 'facebook',
          }),
        },
        twitter: {
          imageUrl: imageForgeUrl({
            url: heroProps?.imageUrl || '',
            bgColor: subject.colors.background,
            type: 'twitter',
          }),
        },
      }
    : {}

Caching.swr(Astro)
---

<Error
  render={response.type === 'error'}
  status={422}
  message={tokensToText(response.visual.summary.answer)}
  {query}
  analytics={{
    is_search: true,
    page_type: 'ask',
    page_domain: 'nfl',
    disposition: response.disposition,
    tokenizationScore: response.tokenizationScore,
    query,
  }}
>
  <Layout
    {meta}
    colors={subject?.colors}
    analytics={{
      is_search: true,
      page_type: 'ask',
      page_domain: 'nfl',
      disposition: response.disposition,
      tokenizationScore: response.tokenizationScore,
      query,
    }}
  >
    <Header
      fantasy
      {query}
      {conversationToken}
      share={{ type: 'ask', shortCode: code?.short_code, url: Astro.url.href }}
      audioUrl={response.visual.summary.narrator?.answerWithIntroAudioUrl ||
        response.visual.summary.narrator?.answerAudioUrl}
    />
    {
      heroProps ? (
        <Hero
          {...heroProps}
          shareUrl={`${process.env.SHORT_LINK_URL}e/${code?.short_code}`}
        />
      ) : null
    }
    <Visuals {response} />
    <Container>
      <Explore
        domain="fantasy"
        additionalQuestions={response.visual.additionalQuestions}
      />
    </Container>

    <Container>
      <AnswerCards domain="nfl" />
    </Container>
  </Layout>
</Error>
