---
import ErrorLayout from '@layouts/error.astro'
import { handleAskResponse } from '@statmuse/core/kanedama'
import { ask } from '@lib/kanedama'
import { tokensToText } from '@statmuse/core/kanedama'
import AnswerMoney from '@components/answer-money.astro'
import { clean } from '@statmuse/core/path'

import AssetProfile from '../symbol/[symbol]/index.astro'
import { upsertFinance } from '@statmuse/core/ask'
import { Caching } from '@lib/caching'
import * as Enforcer from '@lib/enforcer'

let question: string | undefined

const canQuery = await Enforcer.canQueryFinance(Astro.locals)

if (!canQuery) {
  return Astro.redirect('/auth/signup?limit')
}

if (Astro.request.method === 'POST') {
  const data = await Astro.request.formData()
  question = data.get('question[query]')?.toString()
  if (!question) throw new Error('No query provided')
} else {
  question = Astro.url.searchParams.get('q') ?? undefined
  if (!question) return Astro.redirect('/money/questions')
}

const response = await ask({ query: question }, Astro)
if (!response)
  return new Response(null, { status: 404, statusText: 'Not found' })

const handled = handleAskResponse(response)

const query = clean(
  tokensToText(
    response.visual.summaryTokens?.filter((t) => t.type !== 'inferred'),
  ),
)

if (Astro.request.method === 'POST') {
  await upsertFinance({
    query,
    response,
    visitorId: Astro.locals.visitor.id,
    userId: Astro.locals.user?.id,
  })
}

Caching.swr(Astro)
---

<ErrorLayout
  render={response.type === 'error'}
  status={422}
  message={tokensToText(response.visual.summary.answer)}
  {query}
  analytics={{
    is_search: true,
    page_type: 'ask',
    page_domain: 'finance',
    query,
  }}
>
  {
    handled.type === 'assetEntityData' ? (
      <AssetProfile query={handled.query} symbol={handled.symbol} />
    ) : response.type === 'nlgAnswerNotPossibleVisualsRequired' ||
      response.type === 'nlgPromptForMoreInfoVisualChoicesOptional' ? (
      <AnswerMoney answer={response} />
    ) : undefined
  }
</ErrorLayout>
