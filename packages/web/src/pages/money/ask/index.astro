---
import MoneyBaseLayout from '@layouts/money-base.astro'
import Header from '@components/header.astro'
import Footer from '@components/footer.astro'
import Hero from '@components/hero.astro'
import Visuals from '@components/visuals-money.astro'
import { handleResponse } from '@statmuse/core/kanedama'
import { ask, getHeroProps } from '@lib/kanedama'
import { clean, createAskPath } from '@lib/path'
import { tokensToText } from '@statmuse/core/kanedama'
import { title } from '@lib/meta'

let question: string | undefined
let conversationToken: string | undefined

if (Astro.request.method === 'POST') {
  const data = await Astro.request.formData()
  question = data.get('question[query]')?.toString()
  conversationToken = data.get('question[conversation_token]')?.toString()
  if (!question) throw new Error('No query provided')
} else {
  question = Astro.url.searchParams.get('q') ?? undefined
  if (!question) return Astro.redirect('/money/questions')
}

const response = await ask({ query: question })
if (!response)
  return new Response(null, { status: 404, statusText: 'Not found' })

const handled = handleResponse(response)
const { subject, redirectUrl } = handled
conversationToken = handled.conversationToken ?? conversationToken
if (redirectUrl) return Astro.redirect(redirectUrl)

const query = clean(tokensToText(response.visual.summaryTokens))

const meta = {
  title: title(query),
  description:
    response.type !== 'nlgPromptForMoreInfoVisualChoicesOptional'
      ? tokensToText(response.nlg.text.answer)
      : '',
  canonical:
    response.type !== 'nlgPromptForMoreInfoVisualChoicesOptional'
      ? {
          url: createAskPath({ domain: 'money', query }),
          rewrite: true,
        }
      : undefined,
}

const heroProps = getHeroProps({ imageAlt: query, response })
---

<MoneyBaseLayout {meta} colors={subject?.colors}>
  <Header money {query} {conversationToken} />
  {heroProps ? <Hero {...heroProps} /> : null}
  <Visuals {response} {conversationToken} />
  <Footer />
</MoneyBaseLayout>
