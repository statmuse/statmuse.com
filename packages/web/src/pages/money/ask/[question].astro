---
import MoneyBaseLayout from '@layouts/money-base.astro'
import Error from '@layouts/error.astro'
import Header from '@components/header.astro'
import Footer from '@components/footer.astro'
import Hero from '@components/hero.astro'
import Visuals from '@components/visuals-money.astro'
import Container from '@components/container.astro'
import Explore from '@components/explore.astro'
import {
  type KanedamaDefaultResponse,
  handleResponse,
  tokensToText,
} from '@statmuse/core/kanedama'
import { ask, getHeroProps } from '@lib/kanedama'
import { clean, createAskPath, imageForgeUrl } from '@statmuse/core/path'
import { title } from '@lib/meta'

const isLegacyParam = (param: string) => param.includes('+')
const parseLegacyParam = (path: string) => {
  const param = path.split('/')[path.split('/').length - 1]
  return decodeURIComponent(param.replaceAll('+', ' '))
}

const { question } = Astro.params
if (!question) return Astro.redirect('/money/questions')

let query = isLegacyParam(question)
  ? parseLegacyParam(Astro.url.pathname)
  : question.replaceAll('-', ' ')

const response = (await ask({ query })) as KanedamaDefaultResponse | undefined
if (!response)
  return new Response(null, { status: 404, statusText: 'Not found' })

const { subject, redirectUrl, conversationToken } = handleResponse(response)
if (redirectUrl) return Astro.redirect(redirectUrl)

query = clean(tokensToText(response.visual.summaryTokens))

const heroProps = getHeroProps({ imageAlt: query, response })

const meta =
  response.type !== 'error'
    ? {
        title: title(query),
        description: tokensToText(response.nlg.text.answer),
        canonical: {
          url: createAskPath({ domain: 'money', query }),
          rewrite: true,
        },
        facebook: {
          imageUrl: imageForgeUrl({
            url: heroProps?.imageUrl || '',
            bgColor: subject?.colors.background,
            type: 'facebook',
          }),
        },
        twitter: {
          imageUrl: imageForgeUrl({
            url: heroProps?.imageUrl || '',
            bgColor: subject?.colors.background,
            type: 'twitter',
          }),
        },
      }
    : {}
---

<Error
  render={response.type === 'error'}
  status={422}
  message={tokensToText(response.visual.summary.answer)}
  {query}
  analytics={{
    is_search: true,
    page_type: 'ask',
    page_domain: 'finance',
    query,
  }}
>
  <MoneyBaseLayout
    {meta}
    colors={subject?.colors}
    analytics={{
      is_search: true,
      page_type: 'ask',
      page_domain: 'finance',
      query,
    }}
  >
    <Header
      money
      {query}
      {conversationToken}
      share={{
        type: 'ask',
        shortCode: 'CODE',
        url: Astro.url.origin + createAskPath({ domain: 'money', query }),
      }}
    />
    {heroProps ? <Hero {...heroProps} /> : null}
    <Visuals {response} {conversationToken} />
    <Container>
      <Explore
        domain="money"
        additionalQuestions={response.visual.additionalQuestions}
      />
    </Container>
    <Footer />
  </MoneyBaseLayout>
</Error>
