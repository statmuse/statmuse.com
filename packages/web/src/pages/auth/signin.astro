---
import Layout from '@layouts/main.astro'
import Header from '@components/header.astro'
import Container from '@components/container.astro'
import Image from '@components/image.astro'
import { Caching } from '@lib/caching'
import { Config } from 'sst/node/config'

if (Astro.request.method === 'POST') {
  const data = await Astro.request.formData()
  const email = data.get('email')?.toString()
  if (!email)
    return new Response(null, { status: 400, statusText: 'No email provided' })

  const visitor = Astro.locals.visitor.id
  data.set('visitor', visitor)

  const url =
    import.meta.env.PUBLIC_AUTH_URL +
    '/authorize?' +
    // @ts-expect-error
    new URLSearchParams(data).toString()

  return Astro.redirect(url)
}

Caching.none(Astro)

if (Astro.locals.session.type === 'user') {
  return Astro.redirect('/', 302)
}

const meta = {
  title: 'Sign In To StatMuse',
}
---

<Layout {meta} enableAdBanner={false}>
  <Header />
  <Container class="px-[30px] py-[5px]">
    <div
      class="w-full max-w-md bg-white rounded-lg border border-[#e4e4e4] mx-auto mb-5 pt-8 px-8 pb-44 relative text-center overflow-hidden"
    >
      <div>
        <div id="captcha-container" class="mb-5" style="display: none"></div>
        <form id="signin-form" method="post" style="display: none;">
          <input
            class="w-full px-3 py-2.5 text-lg text-[#55595c] rounded bg-white border mb-7 outline-none"
            name="email"
            type="email"
            placeholder="Email"
            value=""
          />
          <input type="hidden" name="client_id" value="web" />
          <input
            type="hidden"
            name="redirect_uri"
            value={Astro.url.origin + '/auth/callback'}
          />
          <input type="hidden" name="response_type" value="code" />
          <input type="hidden" name="provider" value="email" />
          <input
            type="hidden"
            name="challenge"
            data-botpoison-public-key={Config.BOTPOISON_PUBLIC_KEY}
            value=""
          />
          <button
            class="w-full text-lg mb-7 p-3 border-0 rounded text-white bg-[#42a5f5] hover:bg-[#1976d2] disabled:bg-[#cfd8dc]"
            type="submit"
          >
            Email me a code to sign in
          </button>
        </form>
        <div>
          <p class="text-black/60">
            Don't have an account? <a href="/auth/signup">Sign up</a>
          </p>
        </div>
        <p
          class="text-xs text-[#777]"
          style="margin-top: 23px; margin-bottom: 15px;"
        >
          By using StatMuse, you agree to our <a href="/terms">
            terms of service
          </a><br />and <a href="/privacy">privacy policy</a>.
        </p>
      </div>
      <Image
        class="absolute bottom-0 left-0 w-full"
        src="https://cdn.statmuse.com/app/images/signup-players.png"
        alt="StatMuse+"
        width={900}
        height={400}
      />
    </div>
  </Container>
</Layout>
<script>
  import Botpoison from '@botpoison/browser'

  document.addEventListener('astro:page-load', async () => {
    const form = document.querySelector<HTMLElement>('#signin-form')
    const input = document.querySelector<HTMLInputElement>(
      'input[name="challenge"]',
    )

    const botpoison = new Botpoison({
      publicKey: input?.dataset.botpoisonPublicKey,
    })

    const { solution } = await botpoison.challenge()

    input.value = solution

    const result = await AwsWafIntegration.fetch('/aws/verify-token')

    if (result.status === 405) {
      const container =
        document.querySelector<HTMLElement>('#captcha-container')

      container.style.display = 'block'

      AwsWafCaptcha.renderCaptcha(container, {
        apiKey:
          'uaY13CxN/ArG+Fb5sI7h1Kxnv5phEPzuVl7xS9kuLmcYoDcJFsLo4trrdTh5IDU06yFcBPcv4fBD6fOxlzCMwTJSbmkQ4UNbGeq7jazkqI/R5n2y2H96eY6mj61Qa36HpG0f2MyOckB9QvbJpGgGHRuAK2hrBMVchKfhrGCEFzL4Rfm123E0weuaHiAOyA+o7yZ0bYy9qN5Vvn+/yInTVkZTB3u2ib4Dr0VaPcqd5aEgqFYsXe2dluphLHAL1poDmxjU9JNySJsdKJ7ddLyFOV7SQRrt3V9ern0SVrF8frIQiHHqvU3SEjm4CYDCxWISMiP4VbSXJ18keDFCFpJberC0AJi51mhQ/UCpE5LE9uDchVoyqE0VRemQvV439/FyO/iPVdfC2TN+lBI3px4/NTKfgYwA9w6+frHs6tl94kw5XaMYAM59tyJ8Y/yeeOvMg5XFwcu9KcZYMqm3yFePLSwyCXT88PKjTlQs9ozw7Q31fdsErOGDU0Wkdx0Szl6kSJo5p1WgfZXgfF5xWniOvClBqRdwfgcr7oP/doLI4tymHdjVqiaJRD5xyidoqDZVzYXzZv+n0TfcprpcwapieoO8f3gU2Ss6vXQZ4lLHJIcgI6hAhGJvMxmJxpGpoaVyEviNvEEYHXuVyCdTgIxYkvOvtABI8Dor5YG5U23V6gI=_1_1',
        onSuccess: () => {
          container.style.display = 'none'
          form.style.display = 'block'
        },
      })

      return
    }

    form.style.display = 'block'
  })
</script>
