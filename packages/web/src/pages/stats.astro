---
import MobileLayout from '@layouts/mobile.astro'
import { Caching } from '@lib/caching'
import { find } from 'lodash-es'
import { getTeamCards } from '@lib/gamera'
import { getPlayerCards } from '@lib/gamera'
import { getPlayerProfile } from '@lib/gamera'
import type {
  GameraDomain,
  GameraPlayerProfileResponse,
} from '@statmuse/core/gamera'
import { leagueToDomain, type LeagueParam } from '@lib/params'
import { getTeamSeasonBio } from '@lib/gamera'
import { getStandings } from '@lib/gamera'

import PlayerPerformanceCard from '@components/player/performance-card.astro'
import RankingCard from '@components/home/ranking-card.astro'
import Standings from '@components/home/standings.astro'
import Panel from '@components/panel.astro'
import SelectableStandings from '@components/home/selectable-standings.svelte'

const [playerCards, teamCards, bettingCards, _standings] = await Promise.all([
  Promise.all([
    getPlayerCards({ context: Astro, domain: 'EPL' }).then(
      (x) =>
        x && {
          title: 'PL Goals',
          domain: 'EPL',
          query: `goal leaders ${x.seasonYearDisplay}`,
          players:
            find(x.cards, { stat: 'mostGoals' })?.players.slice(0, 3) ?? [],
        },
    ),
    getPlayerCards({ context: Astro, domain: 'NBA' }).then(
      (x) =>
        x && {
          title: `NBA ${x.seasonType === 'postseason' ? 'Playoff ' : ''}PPG`,
          domain: 'NBA',
          query: `ppg leaders ${x.seasonYearDisplay}${
            x.seasonType === 'postseason' ? ' postseason' : ''
          }`,
          players:
            find(x.cards, { stat: 'mostPointsPerGame' })?.players.slice(0, 3) ??
            [],
        },
    ),
    getPlayerCards({ context: Astro, domain: 'NFL' }).then(
      (x) =>
        x && {
          title: `NFL ${
            x.seasonType === 'postseason' ? 'Playoff ' : ''
          }Total TD`,
          domain: 'NFL',
          query: `touchdown leaders ${x.seasonYearDisplay}${
            x.seasonType === 'postseason' ? ' postseason' : ''
          }`,
          players:
            find(x.cards, { stat: 'mostTotalTouchdowns' })?.players.slice(
              0,
              3,
            ) ?? [],
        },
    ),
    getPlayerCards({ context: Astro, domain: 'MLB' }).then(
      (x) =>
        x && {
          title: `MLB ${
            x.seasonType === 'postseason' ? 'Playoff ' : ''
          }Home Runs`,
          domain: 'MLB',
          query: `hr leaders ${x.seasonYearDisplay}${
            x.seasonType === 'postseason' ? ' postseason' : ''
          }`,
          players:
            find(x.cards, { stat: 'mostBattingHomeRuns' })?.players.slice(
              0,
              3,
            ) ?? [],
        },
    ),
    getPlayerCards({ context: Astro, domain: 'NHL' }).then(
      (x) =>
        x && {
          title: `NHL ${x.seasonType === 'postseason' ? 'Playoff ' : ''}Points`,
          domain: 'NHL',
          query: `points leaders ${x.seasonYearDisplay}${
            x.seasonType === 'postseason' ? ' postseason' : ''
          }`,
          players:
            find(x.cards, { stat: 'mostPoints' })?.players.slice(0, 3) ?? [],
        },
    ),
  ]),
  Promise.all([
    getTeamCards({ context: Astro, domain: 'EPL' }).then(
      (x) =>
        x && {
          title: 'PL Goal Difference',
          domain: 'EPL',
          query: `highest goal difference by a team ${x.seasonYearDisplay}${
            x.seasonType === 'postseason' ? ' postseason' : ''
          }`,
          teams:
            find(x.cards, { stat: 'bestGoalDifferential' })?.teams.slice(
              0,
              3,
            ) ?? [],
        },
    ),
    getTeamCards({ context: Astro, domain: 'NBA' }).then(
      (x) =>
        x && {
          title: `NBA ${
            x.seasonType === 'postseason' ? 'Playoff ' : ''
          }Offensive Rating`,
          domain: 'NBA',
          query: `team ortg rankings ${x.seasonYearDisplay}${
            x.seasonType === 'postseason' ? ' postseason' : ''
          }`,
          teams:
            find(x.cards, { stat: 'bestOffensiveRating' })?.teams.slice(0, 3) ??
            [],
        },
    ),
    getTeamCards({ context: Astro, domain: 'NFL' }).then(
      (x) =>
        x && {
          title: `NFL ${
            x.seasonType === 'postseason' ? 'Playoff ' : ''
          }Yards Per Game`,
          domain: 'NFL',
          query: `team total yards per game rankings ${x.seasonYearDisplay}${
            x.seasonType === 'postseason' ? ' postseason' : ''
          }`,
          teams:
            find(x.cards, { stat: 'mostTotalYardsPerGame' })?.teams.slice(
              0,
              3,
            ) ?? [],
        },
    ),
    getTeamCards({ context: Astro, domain: 'MLB' }).then(
      (x) =>
        x && {
          title: `MLB ${
            x.seasonType === 'postseason' ? 'Playoff ' : ''
          }Home Runs`,
          domain: 'MLB',
          query: `teams with the most hr ${x.seasonYearDisplay}${
            x.seasonType === 'postseason' ? ' postseason' : ''
          }`,
          teams:
            find(x.cards, { stat: 'mostBattingHomeRuns' })?.teams.slice(0, 3) ??
            [],
        },
    ),
    getTeamCards({ context: Astro, domain: 'NHL' }).then(
      (x) =>
        x && {
          title: `NHL ${
            x.seasonType === 'postseason' ? 'Playoff ' : ''
          }Goals Per Game`,
          domain: 'NHL',
          query: `most goals per game by a team ${x.seasonYearDisplay}${
            x.seasonType === 'postseason' ? ' postseason' : ''
          }`,
          teams:
            find(x.cards, { stat: 'mostGoalsPerGame' })?.teams.slice(0, 3) ??
            [],
        },
    ),
  ]),
  Promise.all([
    getTeamCards({ context: Astro, domain: 'NBA' }).then(
      (x) =>
        x && {
          title: 'NBA Spread Trends',
          domain: 'NBA',
          query: `best record against the spread ${x.seasonYearDisplay}`,
          teams:
            find(x.cards, {
              stat: 'bestRecordAgainstTheSpread',
            })?.teams.slice(0, 3) ?? [],
        },
    ),
    getTeamCards({ context: Astro, domain: 'NFL' }).then(
      (x) =>
        x && {
          title: 'NFL Spread Trends',
          domain: 'NFL',
          query: `best record against the spread ${x.seasonYearDisplay}`,
          teams:
            find(x.cards, {
              stat: 'bestRecordAgainstTheSpread',
            })?.teams.slice(0, 3) ?? [],
        },
    ),
    getTeamCards({ context: Astro, domain: 'MLB' }).then(
      (x) =>
        x && {
          title: 'MLB Run Line Trends',
          domain: 'MLB',
          query: `best record against the run line ${x.seasonYearDisplay}`,
          teams:
            find(x.cards, {
              stat: 'bestRecordAgainstTheSpread',
            })?.teams.slice(0, 3) ?? [],
        },
    ),
    getTeamCards({ context: Astro, domain: 'NHL' }).then(
      (x) =>
        x && {
          title: 'NHL Puck Line Trends',
          domain: 'NHL',
          query: `best record against the puck line ${x.seasonYearDisplay}`,
          teams:
            find(x.cards, {
              stat: 'bestRecordAgainstTheSpread',
            })?.teams.slice(0, 3) ?? [],
        },
    ),
  ]),
  Promise.all(
    ['EPL', 'NBA', 'NFL', 'NHL', 'MLB'].map((domain) =>
      getStandings({ context: Astro, domain }),
    ),
  ),
])

if (teamCards) {
  const teams = await Promise.all(
    teamCards?.map(
      (r) =>
        r &&
        getTeamSeasonBio({
          context: Astro,
          domain: r.teams[0].entity.domain,
          team: r.teams[0].entity.id,
          year: r.teams[0].entity.id,
        }),
    ),
  )
  for (const index in teams) {
    const team = teams[index]
    const card = teamCards[index]
    if (team && card) {
      card.images = team.teamRepresentatives.map((r) => r.url)
    }
  }
}

if (bettingCards) {
  const teams = await Promise.all(
    bettingCards?.map(
      (r) =>
        r &&
        getTeamSeasonBio({
          context: Astro,
          domain: r.teams[0].entity.domain,
          team: r.teams[0].entity.id,
          year: r.teams[0].entity.id,
        }),
    ),
  )
  for (const index in teams) {
    const team = teams[index]
    const card = bettingCards[index]
    if (team && card) {
      card.images = team.teamRepresentatives.map((r) => r.url)
    }
  }
}

const trending = Astro.locals.trendingData
const trendingPlayers = find(trending?.datasets, { name: 'Players' })

const oneWeekAgo = new Date()
oneWeekAgo.setDate(oneWeekAgo.getDate() - 7)

let profile: GameraPlayerProfileResponse | undefined
let domain: GameraDomain | undefined
for (const player of trendingPlayers?.items.slice(0, 10) ?? []) {
  if (
    !player.latestAppearanceDate ||
    new Date(player.latestAppearanceDate) < oneWeekAgo
  )
    continue

  const playerSlug = player.uri.split('/')[3]
  const league = player.uri.split('/')[1] as LeagueParam
  domain = leagueToDomain(league)
  profile = await getPlayerProfile(Astro, domain, playerSlug)
  if (profile?.recentGames) break
}

const leaders =
  playerCards.filter((x) => x).length > 0
    ? playerCards.filter((x) => x)
    : undefined
const rankings =
  teamCards.filter((x) => x).length > 0 ? teamCards.filter((x) => x) : undefined
const betting =
  bettingCards.filter((x) => x).length > 0
    ? bettingCards.filter((x) => x)
    : undefined
const standings = _standings.filter((x) => !!x)

Caching.swr(Astro)
---

<MobileLayout page="stats">
  <div class="flex-1 overflow-clip mb-5">
    <div class="flex flex-col gap-3">
      {
        profile && (
          <PlayerPerformanceCard
            domain={profile.bio.domain}
            bio={profile.bio}
            recentGames={profile.recentGames}
          />
        )
      }
      {
        Array.isArray(standings) ? (
          <SelectableStandings
            client:load
            options={standings.map((s) => ({
              value: s?.domain.toLowerCase(),
              label: s?.domain === 'EPL' ? 'PL' : s?.domain,
            }))}
            toggle={{
              nba: ['East', 'West'],
              nfl: ['AFC', 'NFC'],
              nhl: ['East', 'West'],
              mlb: ['AL', 'NL'],
            }}
          >
            {standings[0] && (
              <Standings
                class="!border-none"
                standings={standings[0]}
                domain="EPL"
                slot="epl"
                toggle={false}
              />
            )}
            {standings[1] && (
              <Standings
                class="!border-none"
                standings={standings[1]}
                domain="NBA"
                slot="nba"
                toggle={false}
              />
            )}
            {standings[2] && (
              <Standings
                class="!border-none"
                standings={standings[2]}
                domain="NFL"
                slot="nfl"
                toggle={false}
              />
            )}
            {standings[3] && (
              <Standings
                class="!border-none"
                standings={standings[3]}
                domain="NHL"
                slot="nhl"
                toggle={false}
              />
            )}
            {standings[4] && (
              <Standings
                class="!border-none"
                standings={standings[4]}
                domain="MLB"
                slot="mlb"
                toggle={false}
              />
            )}
          </SelectableStandings>
        ) : (
          standings && <Standings {standings} domain={standings.domain} />
        )
      }
      {
        leaders && (
          <RankingCard
            title={
              domain && leaders[0].seasonType === 'postseason'
                ? 'Playoff Leaders'
                : 'League Leaders'
            }
            sections={leaders.map((leader) => ({
              title: leader.title,
              domain: leader.domain,
              query: leader.query,
              items: leader.players.map((player) => ({
                display: player.usedName,
                stat: player.statDisplayValue,
                imageUrl: player.imageUrl,
                entity: player.entity,
                colors: player.colors,
              })),
            }))}
          />
        )
      }
      {
        rankings && (
          <RankingCard
            title={
              domain && rankings[0].seasonType === 'postseason'
                ? 'Playoff Rankings'
                : 'League Rankings'
            }
            sections={rankings.map((ranking) => ({
              title: ranking.title,
              domain: ranking.domain,
              query: ranking.query,
              images: ranking.images,
              items: ranking.teams.map((team) => ({
                display: team.nickname,
                stat: team.statDisplayValue,
                imageUrl: team.logoImageUrl,
                entity: team.entity,
                colors: team.colors,
              })),
            }))}
          />
        )
      }
      {
        betting && (
          <RankingCard
            title="Betting Trends"
            sections={betting.map((section) => ({
              title: section.title,
              domain: section.domain,
              query: section.query,
              images: section.images,
              items: section.teams.map((team) => ({
                display: team.nickname,
                stat: team.statDisplayValue,
                imageUrl: team.logoImageUrl,
                entity: team.entity,
                colors: team.colors,
              })),
            }))}
          />
        )
      }
      <!-- { -->
      <!--   examples && ( -->
      <!--     <Panel title="Example Questions"> -->
      <!--       <div class="divide-y divide-gray-6 dark:divide-gray-4"> -->
      <!--         {examples.map(([title, queries]) => ( -->
      <!--           <div class="-mx-3 px-3"> -->
      <!--             <p class="text-sm text-gray-5">{title}</p> -->
      <!--             <ul class="flex flex-col mb-2"> -->
      <!--               {queries.map(({ query, path }) => ( -->
      <!--                 <li class="max-w-xs"> -->
      <!--                   <a href={path} class="text-pretty text-inherit"> -->
      <!--                     {query} -->
      <!--                   </a> -->
      <!--                 </li> -->
      <!--               ))} -->
      <!--             </ul> -->
      <!--           </div> -->
      <!--         ))} -->
      <!--       </div> -->
      <!--     </Panel> -->
      <!--   ) -->
      <!-- } -->
    </div>
  </div>
</MobileLayout>
