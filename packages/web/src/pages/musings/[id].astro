---
import Layout from '@layouts/main.astro'
import Header from '@components/header.astro'
import Hero from '@components/hero.astro'
import Visuals from '@components/visuals.astro'
import { getMusingByIdOrFriendlyId } from '@statmuse/core/musing'
import { rgbToHex } from '@statmuse/core/color'
import { getHeroProps } from '@lib/gamera'
import { title } from '@lib/meta'
import { imageForgeUrl } from '@statmuse/core/path'
import type { AnalyticsPageviewProperties } from '@lib/analytics'
import { Caching } from '@lib/caching'
import { NOT_FOUND_404 } from '@lib/response'

const id = Astro.params.id as string
const musing = await getMusingByIdOrFriendlyId(id).executeTakeFirst()
if (!musing) return NOT_FOUND_404

const query = musing.text ?? ''
const conversationToken = musing.input_conversation_token
const preferredDomain = musing.domain.toLowerCase()

const foreground = musing.foreground_rgba
  ? rgbToHex(musing.foreground_rgba)
  : undefined
const background = musing.background_rgba
  ? rgbToHex(musing.background_rgba)
  : undefined

const heroProps = getHeroProps({ imageAlt: query, musing })

const meta = {
  title: title(query),
  description: musing.text_plain ?? '',
  facebook: {
    imageUrl: musing.image_url
      ? imageForgeUrl({
          url: musing.image_url,
          bgColor: background,
          type: 'facebook',
        })
      : undefined,
  },
  twitter: {
    imageUrl: musing.image_url
      ? imageForgeUrl({
          url: musing.image_url,
          bgColor: background,
          type: 'twitter',
        })
      : undefined,
  },
}

Caching.swr(Astro)
---

<Layout
  {meta}
  colors={{ foreground, background }}
  analytics={{
    page_type: 'musing',
    page_domain:
      musing.domain.toLowerCase() as AnalyticsPageviewProperties['page_domain'],
    query,
  }}
>
  <Header
    {query}
    {conversationToken}
    {preferredDomain}
    share={{
      type: 'musing',
      query,
      domain: preferredDomain,
      shortCode: musing.short_code,
    }}
    audioUrl={musing.audio_answer_url || undefined}
  />
  {heroProps ? <Hero {...heroProps} /> : null}
  <Visuals response={musing.answer} />
</Layout>
