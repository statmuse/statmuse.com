---
import { ask } from '@lib/gamera'
import ErrorLayout from '@layouts/error.astro'
import Answer from '@components/answer.astro'
import AnswerPrompt from '@components/answer-prompt.astro'
import { handleAskResponseFromPost, tokensToText } from '@statmuse/core/gamera'

import PlayerProfile from './[league]/player/[player]/index.astro'
import TeamFranchiseProfile from './[league]/team/[team]/history.astro'
import TeamSeasonProfile from './[league]/team/[team]/[year].astro'

if (Astro.request.method !== 'POST') {
  return Astro.redirect('/questions')
}

const data = await Astro.request.formData()
const preferredDomain = data.get('question[preferred_domain]')?.toString()
const query = data.get('question[query]')?.toString()
const conversationToken = data.get('question[conversation_token]')?.toString()
if (!query) throw new Error('No query provided')

const response = await ask({ query, preferredDomain, conversationToken })
if (!response)
  return new Response(null, { status: 404, statusText: 'Not found' })

const handled = handleAskResponseFromPost(response)
---

<ErrorLayout
  render={response.type === 'error'}
  status={422}
  message={tokensToText(response.visual.summary.answer)}
  {query}
>
  {
    response.type === 'nlgPromptForMoreInfoVisualChoicesOptional' ? (
      <AnswerPrompt answer={response} />
    ) : handled.type === 'player' ? (
      <PlayerProfile
        query={handled.query}
        player={handled.player}
        league={handled.league}
      />
    ) : handled.type === 'teamSeason' ? (
      <TeamSeasonProfile
        query={handled.query}
        team={handled.team}
        league={handled.league}
        year={handled.year}
      />
    ) : handled.type === 'teamFranchise' ? (
      <TeamFranchiseProfile
        query={handled.query}
        team={handled.team}
        league={handled.league}
      />
    ) : response.type === 'nlgAnswerNotPossibleVisualsRequired' ? (
      <Answer answer={response} />
    ) : undefined
  }
</ErrorLayout>
