---
import { ask } from '@lib/gamera'
import ErrorLayout from '@layouts/error.astro'
import Answer from '@components/answer.astro'
import AnswerPrompt from '@components/answer-prompt.astro'
import { handleAskResponseFromPost, tokensToText } from '@statmuse/core/gamera'
import PlayerProfile from './[league]/player/[player]/index.astro'
import TeamFranchiseProfile from './[league]/team/[team]/history.astro'
import TeamSeasonProfile from './[league]/team/[team]/[year].astro'
import type { AnalyticsPageviewProperties } from '@lib/analytics'
import { clean } from '@statmuse/core/path'
import { upsert } from '@statmuse/core/ask'
import * as Enforcer from '@lib/enforcer'

let query: string | null | undefined = Astro.url.searchParams.get('q')
const league = Astro.url.searchParams.get('d')
let preferredDomain: string | undefined
let conversationToken: string | undefined

if (Astro.request.method === 'POST') {
  const data = await Astro.request.formData()
  preferredDomain = data.get('question[preferred_domain]')?.toString()
  query = data.get('question[query]')?.toString()
  conversationToken = data.get('question[conversation_token]')?.toString()

  const canQuery = await Enforcer.canQuery(Astro.locals)
  if (!canQuery) {
    return Astro.redirect('/auth/signup?limit')
  }
}

if (!query) return Astro.redirect('/')

console.log('query input: ', query)
const response = await ask(
  { query, preferredDomain, conversationToken, ...(league ? { league } : {}) },
  Astro,
)
if (!response)
  return new Response(null, { status: 404, statusText: 'Not found' })

const handled = handleAskResponseFromPost(response)
query = clean(
  tokensToText(
    response.visual.summaryTokens?.filter((t) => t.type !== 'inferred'),
  ),
)

if (Astro.request.method === 'POST') {
  await upsert({
    query,
    response,
    visitorId: Astro.locals.visitor.id,
    userId: Astro.locals.user?.id,
  })
}
---

<ErrorLayout
  render={response.type === 'error'}
  status={422}
  message={tokensToText(response.visual.summary.answer)}
  {query}
  analytics={{
    is_search: true,
    page_type: 'ask',
    page_domain:
      response.type === 'error'
        ? (response.visual.domain?.toLowerCase() as AnalyticsPageviewProperties['page_domain'])
        : undefined,
    disposition: response.disposition,
    tokenizationScore: response.tokenizationScore,
    query,
  }}
>
  {
    response.type === 'nlgPromptForMoreInfoVisualChoicesOptional' ? (
      <AnswerPrompt answer={response} />
    ) : handled.type === 'player' ? (
      <PlayerProfile
        query={handled.query}
        player={handled.player}
        league={handled.league}
      />
    ) : handled.type === 'teamSeason' ? (
      <TeamSeasonProfile
        query={handled.query}
        team={handled.team}
        league={handled.league}
        year={handled.year}
      />
    ) : handled.type === 'teamFranchise' ? (
      <TeamFranchiseProfile
        query={handled.query}
        team={handled.team}
        league={handled.league}
      />
    ) : response.type === 'nlgAnswerNotPossibleVisualsRequired' ? (
      <Answer answer={response} />
    ) : undefined
  }
</ErrorLayout>
