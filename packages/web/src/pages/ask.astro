---
import { ask, getHeroProps } from '@lib/gamera'
import Layout from '@layouts/main.astro'
import Header from '@components/header.astro'
import Hero from '@components/hero.astro'
import Visuals from '@components/visuals.astro'
import { handleResponse, tokensToText } from '@statmuse/core/gamera'
import { title, description } from '@lib/meta'
import { clean, createAskPath, imageForgeUrl } from '@lib/path'

if (Astro.request.method !== 'POST') {
  return Astro.redirect('/questions')
}

const data = await Astro.request.formData()
let preferredDomain = data.get('question[preferred_domain]')?.toString()
let query = data.get('question[query]')?.toString()
let conversationToken = data.get('question[conversation_token]')?.toString()
if (!query) throw new Error('No query provided')

const response = await ask({ query, preferredDomain, conversationToken })
if (!response)
  return new Response(null, { status: 404, statusText: 'Not found' })

conversationToken = response.conversation.token
query = clean(
  tokensToText(
    response.visual.summaryTokens.filter((t) => t.type !== 'inferred')
  )
)
preferredDomain =
  response.type === 'nlgPromptForMoreInfoVisualChoicesOptional'
    ? undefined
    : response.visual.domain

const handled = handleResponse(response)
if (handled.redirectUrl) return Astro.redirect(handled.redirectUrl)

const subject = handled.subject

const heroProps = getHeroProps({ imageAlt: query, response })

const meta = {
  title: title(query),
  description: description(response),
  canonical:
    response.type !== 'nlgPromptForMoreInfoVisualChoicesOptional'
      ? {
          url: createAskPath({
            domain: response.visual.domain.toLowerCase(),
            query,
          }),
          rewrite: true,
        }
      : undefined,
  facebook: {
    imageUrl: imageForgeUrl({
      url: heroProps?.imageUrl || '',
      bgColor: subject.colors.background,
      type: 'facebook',
    }),
  },
  twitter: {
    imageUrl: imageForgeUrl({
      url: heroProps?.imageUrl || '',
      bgColor: subject.colors.background,
      type: 'twitter',
    }),
  },
}
---

<Layout colors={subject?.colors} {meta}>
  <Header
    {query}
    {conversationToken}
    {preferredDomain}
    share={preferredDomain
      ? { type: 'ask', shortCode: 'CODE', query, domain: preferredDomain }
      : undefined}
  />
  {heroProps ? <Hero {...heroProps} /> : null}
  <Visuals {response} {conversationToken} />
</Layout>
