---
import HomeLayout from '@layouts/home.astro'
import HomeContent from '@components/home/home-content.astro'
import { listLatestHomeMusings } from '@statmuse/core/musing'
import { Caching } from '@lib/caching'
import { find } from 'lodash-es'
import { getTeamCards } from '@lib/related-content'
import { getPlayerCards } from '@lib/related-content'
import { getPlayerProfile } from '@lib/player'
import type {
  GameraDomain,
  GameraPlayerProfileResponse,
} from '@statmuse/core/gamera'
import { leagueToDomain, type LeagueParam } from '@lib/params'
import { getTeamSeasonBio } from '@lib/team'
import { getStandings } from '@lib/standings'

const [musings, playerCards, teamCards, bettingCards, standings] =
  await Promise.all([
    listLatestHomeMusings(),
    Promise.all([
      getPlayerCards({ context: Astro, domain: 'EPL', league: 'epl' }).then(
        (x) =>
          x && {
            title: 'PL Goals',
            domain: 'EPL',
            query: `goal leaders ${x.seasonYearDisplay}`,
            players:
              find(x.cards, { stat: 'mostGoals' })?.players.slice(0, 3) ?? [],
          },
      ),
      getPlayerCards({ context: Astro, domain: 'NBA' }).then(
        (x) =>
          x && {
            title: `NBA ${x.seasonType === 'postseason' ? 'Playoff ' : ''}PPG`,
            domain: 'NBA',
            query: `ppg leaders ${x.seasonYearDisplay}${
              x.seasonType === 'postseason' ? ' postseason' : ''
            }`,
            players:
              find(x.cards, { stat: 'mostPointsPerGame' })?.players.slice(
                0,
                3,
              ) ?? [],
          },
      ),
      getPlayerCards({ context: Astro, domain: 'NFL' }).then(
        (x) =>
          x && {
            title: `NFL ${
              x.seasonType === 'postseason' ? 'Playoff ' : ''
            }Total TD`,
            domain: 'NFL',
            query: `touchdown leaders ${x.seasonYearDisplay}${
              x.seasonType === 'postseason' ? ' postseason' : ''
            }`,
            players:
              find(x.cards, { stat: 'mostTotalTouchdowns' })?.players.slice(
                0,
                3,
              ) ?? [],
          },
      ),
      getPlayerCards({ context: Astro, domain: 'MLB' }).then(
        (x) =>
          x && {
            title: `MLB ${
              x.seasonType === 'postseason' ? 'Playoff ' : ''
            }Home Runs`,
            domain: 'MLB',
            query: `hr leaders ${x.seasonYearDisplay}${
              x.seasonType === 'postseason' ? ' postseason' : ''
            }`,
            players:
              find(x.cards, { stat: 'mostBattingHomeRuns' })?.players.slice(
                0,
                3,
              ) ?? [],
          },
      ),
      getPlayerCards({ context: Astro, domain: 'NHL' }).then(
        (x) =>
          x && {
            title: `NHL ${
              x.seasonType === 'postseason' ? 'Playoff ' : ''
            }Points`,
            domain: 'NHL',
            query: `points leaders ${x.seasonYearDisplay}${
              x.seasonType === 'postseason' ? ' postseason' : ''
            }`,
            players:
              find(x.cards, { stat: 'mostPoints' })?.players.slice(0, 3) ?? [],
          },
      ),
    ]),
    Promise.all([
      getTeamCards({ context: Astro, domain: 'EPL', league: 'epl' }).then(
        (x) =>
          x && {
            title: 'PL Goal Difference',
            domain: 'EPL',
            query: `highest goal difference by a team ${x.seasonYearDisplay}${
              x.seasonType === 'postseason' ? ' postseason' : ''
            }`,
            teams:
              find(x.cards, { stat: 'bestGoalDifferential' })?.teams.slice(
                0,
                3,
              ) ?? [],
          },
      ),
      getTeamCards({ context: Astro, domain: 'NBA' }).then(
        (x) =>
          x && {
            title: `NBA ${
              x.seasonType === 'postseason' ? 'Playoff ' : ''
            }Offensive Rating`,
            domain: 'NBA',
            query: `team ortg rankings ${x.seasonYearDisplay}${
              x.seasonType === 'postseason' ? ' postseason' : ''
            }`,
            teams:
              find(x.cards, { stat: 'bestOffensiveRating' })?.teams.slice(
                0,
                3,
              ) ?? [],
          },
      ),
      getTeamCards({ context: Astro, domain: 'NFL' }).then(
        (x) =>
          x && {
            title: `NFL ${
              x.seasonType === 'postseason' ? 'Playoff ' : ''
            }Yards Per Game`,
            domain: 'NFL',
            query: `team total yards per game rankings ${x.seasonYearDisplay}${
              x.seasonType === 'postseason' ? ' postseason' : ''
            }`,
            teams:
              find(x.cards, { stat: 'mostTotalYardsPerGame' })?.teams.slice(
                0,
                3,
              ) ?? [],
          },
      ),
      getTeamCards({ context: Astro, domain: 'MLB' }).then(
        (x) =>
          x && {
            title: `MLB ${
              x.seasonType === 'postseason' ? 'Playoff ' : ''
            }Home Runs`,
            domain: 'MLB',
            query: `teams with the most hr ${x.seasonYearDisplay}${
              x.seasonType === 'postseason' ? ' postseason' : ''
            }`,
            teams:
              find(x.cards, { stat: 'mostBattingHomeRuns' })?.teams.slice(
                0,
                3,
              ) ?? [],
          },
      ),
      getTeamCards({ context: Astro, domain: 'NHL' }).then(
        (x) =>
          x && {
            title: `NHL ${
              x.seasonType === 'postseason' ? 'Playoff ' : ''
            }Goals Per Game`,
            domain: 'NHL',
            query: `most goals per game by a team ${x.seasonYearDisplay}${
              x.seasonType === 'postseason' ? ' postseason' : ''
            }`,
            teams:
              find(x.cards, { stat: 'mostGoalsPerGame' })?.teams.slice(0, 3) ??
              [],
          },
      ),
    ]),
    Promise.all([
      getTeamCards({ context: Astro, domain: 'NBA' }).then(
        (x) =>
          x && {
            title: 'NBA Spread Trends',
            domain: 'NBA',
            query: `best record against the spread ${x.seasonYearDisplay}`,
            teams:
              find(x.cards, {
                stat: 'bestRecordAgainstTheSpread',
              })?.teams.slice(0, 3) ?? [],
          },
      ),
      getTeamCards({ context: Astro, domain: 'NFL' }).then(
        (x) =>
          x && {
            title: 'NFL Spread Trends',
            domain: 'NFL',
            query: `best record against the spread ${x.seasonYearDisplay}`,
            teams:
              find(x.cards, {
                stat: 'bestRecordAgainstTheSpread',
              })?.teams.slice(0, 3) ?? [],
          },
      ),
      getTeamCards({ context: Astro, domain: 'MLB' }).then(
        (x) =>
          x && {
            title: 'MLB Run Line Trends',
            domain: 'MLB',
            query: `best record against the run line ${x.seasonYearDisplay}`,
            teams:
              find(x.cards, {
                stat: 'bestRecordAgainstTheSpread',
              })?.teams.slice(0, 3) ?? [],
          },
      ),
      getTeamCards({ context: Astro, domain: 'NHL' }).then(
        (x) =>
          x && {
            title: 'NHL Puck Line Trends',
            domain: 'NHL',
            query: `best record against the puck line ${x.seasonYearDisplay}`,
            teams:
              find(x.cards, {
                stat: 'bestRecordAgainstTheSpread',
              })?.teams.slice(0, 3) ?? [],
          },
      ),
    ]),
    Promise.all(
      ['EPL', 'NBA', 'NFL', 'NHL', 'MLB'].map((domain) =>
        getStandings({ context: Astro, domain }),
      ),
    ),
  ])

if (teamCards) {
  const teams = await Promise.all(
    teamCards?.map(
      (r) =>
        r &&
        getTeamSeasonBio({
          context: Astro,
          domain: r.teams[0]?.entity.domain,
          team: r.teams[0]?.entity.id,
          year: r.teams[0]?.entity.id,
        }),
    ),
  )
  for (const index in teams) {
    const team = teams[index]
    const card = teamCards[index]
    if (team && card) {
      card.images = team.teamRepresentatives.map((r) => r.url)
    }
  }
}

if (bettingCards) {
  const teams = await Promise.all(
    bettingCards?.map(
      (r) =>
        r &&
        getTeamSeasonBio({
          context: Astro,
          domain: r.teams[0].entity.domain,
          team: r.teams[0].entity.id,
          year: r.teams[0].entity.id,
        }),
    ),
  )
  for (const index in teams) {
    const team = teams[index]
    const card = bettingCards[index]
    if (team && card) {
      card.images = team.teamRepresentatives.map((r) => r.url)
    }
  }
}

const trending = Astro.locals.trendingData
const trendingSearches = find(trending?.datasets, { name: 'Searches' })
const trendingPlayers = find(trending?.datasets, { name: 'Players' })
const trendingTeams = find(trending?.datasets, { name: 'Teams' })

const oneWeekAgo = new Date()
oneWeekAgo.setDate(oneWeekAgo.getDate() - 7)

let profile: GameraPlayerProfileResponse | undefined
let domain: GameraDomain | undefined
for (const player of trendingPlayers?.items.slice(0, 10) ?? []) {
  if (
    !player.latestAppearanceDate ||
    new Date(player.latestAppearanceDate) < oneWeekAgo
  )
    continue

  const playerSlug = player.uri.split('/')[3]
  const league = player.uri.split('/')[1] as LeagueParam
  domain = leagueToDomain(league)
  profile = await getPlayerProfile(Astro, domain, playerSlug)
  if (profile?.recentGames) break
}

Caching.swr(Astro)
---

<HomeLayout>
  <HomeContent
    {musings}
    {profile}
    leaders={playerCards.filter((x) => x).length > 0
      ? [playerCards.filter((x) => x)]
      : undefined}
    rankings={teamCards.filter((x) => x).length > 0
      ? [teamCards.filter((x) => x)]
      : undefined}
    betting={bettingCards.filter((x) => x).length > 0
      ? bettingCards.filter((x) => x)
      : undefined}
    standings={standings.filter((x) => !!x)}
    {trendingPlayers}
    {trendingTeams}
    {trendingSearches}
  />
</HomeLayout>
