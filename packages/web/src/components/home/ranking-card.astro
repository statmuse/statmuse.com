---
import EntityLink from '@components/entity-link.astro'
import Image from '@components/image.astro'
import Panel from '@components/panel.astro'
import type { GameraDomain, GameraEntity } from '@statmuse/core/gamera'
import { createAskPath } from '@statmuse/core/path'

interface Props {
  title: string
  sections: {
    title: string
    images?: string[]
    query: string
    domain: GameraDomain
    items: {
      colors?: {
        backgroundColor: string
        foregroundColor: string
      }
      stat: string
      display: string
      imageUrl: string | [string]
      entity: GameraEntity
    }[]
  }[]
}

const { title, sections } = Astro.props
---

<Panel class="!pb-0">
  <h3 class="font-semibold">{title}</h3>
  <div class="divide-y divide-gray-6 dark:divide-gray-4">
    {
      sections?.map((section) => (
        <div class="-mx-3 py-2 px-3">
          <div class="flex">
            <div class="flex-1">
              <a
                href={createAskPath({
                  domain: section.domain?.toLowerCase() ?? '',
                  query: section.query ?? '',
                })}
                class="text-sm text-gray-5 mb-0.5"
              >
                {section.title}
              </a>
              {section.items.map((item, index) => (
                <div
                  class="flex"
                  class:list={{ 'text-sm text-gray-5': index !== 0 }}
                >
                  <div class="w-14">
                    <span
                      class:list={{
                        'px-2 rounded-2xl text-white': index === 0,
                        'ml-2': index !== 0,
                      }}
                      style={
                        index === 0
                          ? `background: ${item.colors?.backgroundColor}; color: ${item.colors?.foregroundColor}`
                          : ''
                      }
                    >
                      {item.stat}
                    </span>
                  </div>
                  <EntityLink
                    entity={{ ...item.entity, parameters: undefined }}
                    class="text-inherit"
                  >
                    {item.display}
                  </EntityLink>
                </div>
              ))}
            </div>
            {Array.isArray(section.images) ? (
              <a
                href={createAskPath({
                  domain: section.domain?.toLowerCase() ?? '',
                  query: section.query ?? '',
                })}
                class="relative h-[90px] self-end flex items-end -mb-2 mr-2.5"
              >
                {section.images.map((url, index) => (
                  <Image
                    class:list={[
                      'h-[75px] max-w-[100px] select-none object-contain object-bottom',
                      {
                        'absolute left-0 bottom-0 -translate-x-[40px]':
                          index === 0,
                        'relative z-[1]': index === 1,
                        'absolute right-0 bottom-0 translate-x-[40px]':
                          index === 2,
                      },
                    ]}
                    alt={url}
                    src={url}
                    width={180}
                    height={180}
                    loading="eager"
                  />
                ))}
              </a>
            ) : (
              <a
                href={createAskPath({
                  domain: section.domain?.toLowerCase() ?? '',
                  query: section.query ?? '',
                })}
                class="self-end"
              >
                <Image
                  class="h-[90px] max-w-[120px] select-none object-contain object-bottom -mb-2"
                  alt={section.items[0]?.display}
                  src={section.items[0]?.imageUrl}
                  width={180}
                  height={180}
                  loading="eager"
                />
              </a>
            )}
          </div>
        </div>
      ))
    }
  </div>
</Panel>
