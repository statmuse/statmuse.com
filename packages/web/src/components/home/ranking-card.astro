---
import EntityLink from '@components/entity-link.astro'
import Image from '@components/image.astro'
import Panel from '@components/panel.astro'
import type { GameraDomain, GameraEntity } from '@statmuse/core/gamera'
import { createAskPath } from '@statmuse/core/path'

interface Props {
  title: string
  sections: {
    title: string
    images?: string[]
    query: string
    domain: GameraDomain
    items: {
      colors?: {
        backgroundColor: string
        foregroundColor: string
      }
      stat: string
      display: string
      imageUrl: string | [string]
      entity: GameraEntity
    }[]
  }[][]
  toggleOptions?: [string, string]
  rankings?: boolean
  leaders?: boolean
}

const { title, sections, toggleOptions, rankings, leaders } = Astro.props
---

<Panel class="!pb-0 group">
  <div class="flex items-center justify-between">
    <h3 class="font-semibold">{title}</h3>
    {
      toggleOptions && (
        <div class="w-fit bg-gray-6 dark:bg-gray-4 text-gray-5 border border-gray-6 dark:border-gray-3 flex text-center rounded-full relative overflow-clip">
          <div
            class="absolute h-full w-1/2 bg-gray-8 dark:bg-gray-7 rounded-full left-0  "
            class:list={[
              'absolute h-full w-1/2 bg-gray-8 dark:bg-gray-7 rounded-full left-0 transition-transform ease-out',
              {
                'group-has-[#leaders-0:checked]:translate-x-0': leaders,
                'group-has-[#leaders-1:checked]:translate-x-full': leaders,
                'group-has-[#rankings-0:checked]:translate-x-0': rankings,
                'group-has-[#rankings-1:checked]:translate-x-full': rankings,
              },
            ]}
          />
          {toggleOptions.map((name, index) => (
            <label
              for={
                leaders
                  ? `leaders-${index}`
                  : rankings
                  ? `rankings-${index}`
                  : ''
              }
              class:list={[
                'py-1 w-12 relative cursor-pointer',
                {
                  'group-has-[#leaders-0:checked]:text-gray-2':
                    index === 0 && leaders,
                  'group-has-[#leaders-1:checked]:text-gray-2':
                    index === 1 && leaders,
                  'group-has-[#rankings-0:checked]:text-gray-2':
                    index === 0 && rankings,
                  'group-has-[#rankings-1:checked]:text-gray-2':
                    index === 1 && rankings,
                },
              ]}
            >
              {name}
            </label>
          ))}
        </div>
      )
    }
  </div>
  {
    sections.length === 1 ? (
      <div class="divide-y divide-gray-6 dark:divide-gray-4">
        {sections?.map((collection) =>
          collection.map((section) => (
            <div class="-mx-3 py-2 px-3">
              <div class="flex">
                <div class="flex-1">
                  <a
                    href={createAskPath({
                      domain: section.domain?.toLowerCase() ?? '',
                      query: section.query ?? '',
                    })}
                    class="text-sm text-gray-5 mb-0.5"
                  >
                    {section.title}
                  </a>
                  {section.items.map((item, index) => (
                    <div
                      class="flex"
                      class:list={{ 'text-sm text-gray-5': index !== 0 }}
                    >
                      <div class="w-14">
                        <span
                          class:list={{
                            'px-2 rounded-2xl text-white': index === 0,
                            'ml-2': index !== 0,
                          }}
                          style={
                            index === 0
                              ? `background: ${item.colors?.backgroundColor}; color: ${item.colors?.foregroundColor}`
                              : ''
                          }
                        >
                          {item.stat}
                        </span>
                      </div>
                      <EntityLink
                        entity={{ ...item.entity, parameters: undefined }}
                        class="text-inherit"
                      >
                        {item.display}
                      </EntityLink>
                    </div>
                  ))}
                </div>
                {Array.isArray(section.images) ? (
                  <a
                    href={createAskPath({
                      domain: section.domain?.toLowerCase() ?? '',
                      query: section.query ?? '',
                    })}
                    class="relative h-[90px] self-end flex items-end -mb-2 mr-2.5"
                  >
                    {section.images.map((url, index) => (
                      <Image
                        class:list={[
                          'h-[75px] max-w-[100px] select-none object-contain object-bottom',
                          {
                            'absolute left-0 bottom-0 -translate-x-[40px]':
                              index === 0,
                            'relative z-[1]': index === 1,
                            'absolute right-0 bottom-0 translate-x-[40px]':
                              index === 2,
                          },
                        ]}
                        alt={url}
                        src={url}
                        width={180}
                        height={180}
                        loading="eager"
                      />
                    ))}
                  </a>
                ) : (
                  <a
                    href={createAskPath({
                      domain: section.domain?.toLowerCase() ?? '',
                      query: section.query ?? '',
                    })}
                    class="self-end"
                  >
                    <Image
                      class="h-[90px] max-w-[120px] select-none object-contain object-bottom -mb-2"
                      alt={section.items[0]?.display}
                      src={section.items[0]?.imageUrl}
                      width={180}
                      height={180}
                      loading="eager"
                    />
                  </a>
                )}
              </div>
            </div>
          )),
        )}
      </div>
    ) : (
      sections.map((collection, index) => (
        <div class="hidden has-[input:checked]:block">
          <input
            class="absolute top-0 opacity-0 peer"
            type="radio"
            name={leaders ? 'leaders' : rankings ? 'rankings' : undefined}
            id={
              leaders
                ? `leaders-${index}`
                : rankings
                ? `rankings-${index}`
                : undefined
            }
            checked={index === 0}
          />
          <div class="divide-y divide-gray-6 dark:divide-gray-4">
            {collection.map((section) => (
              <div class="-mx-3 py-2 px-3">
                <div class="flex">
                  <div class="flex-1">
                    <a
                      href={createAskPath({
                        domain: section.domain?.toLowerCase() ?? '',
                        query: section.query ?? '',
                      })}
                      class="text-sm text-gray-5 mb-0.5"
                    >
                      {section.title}
                    </a>
                    {section.items.map((item, index) => (
                      <div
                        class="flex"
                        class:list={{ 'text-sm text-gray-5': index !== 0 }}
                      >
                        <div class="w-14">
                          <span
                            class:list={{
                              'px-2 rounded-2xl text-white': index === 0,
                              'ml-2': index !== 0,
                            }}
                            style={
                              index === 0
                                ? `background: ${item.colors?.backgroundColor}; color: ${item.colors?.foregroundColor}`
                                : ''
                            }
                          >
                            {item.stat}
                          </span>
                        </div>
                        <EntityLink
                          entity={{ ...item.entity, parameters: undefined }}
                          class="text-inherit"
                        >
                          {item.display}
                        </EntityLink>
                      </div>
                    ))}
                  </div>
                  {Array.isArray(section.images) ? (
                    <a
                      href={createAskPath({
                        domain: section.domain?.toLowerCase() ?? '',
                        query: section.query ?? '',
                      })}
                      class="relative h-[90px] self-end flex items-end -mb-2 mr-2.5"
                    >
                      {section.images.map((url, index) => (
                        <Image
                          class:list={[
                            'h-[75px] max-w-[100px] select-none object-contain object-bottom',
                            {
                              'absolute left-0 bottom-0 -translate-x-[40px]':
                                index === 0,
                              'relative z-[1]': index === 1,
                              'absolute right-0 bottom-0 translate-x-[40px]':
                                index === 2,
                            },
                          ]}
                          alt={url}
                          src={url}
                          width={180}
                          height={180}
                          loading="eager"
                        />
                      ))}
                    </a>
                  ) : (
                    <a
                      href={createAskPath({
                        domain: section.domain?.toLowerCase() ?? '',
                        query: section.query ?? '',
                      })}
                      class="self-end"
                    >
                      <Image
                        class="h-[90px] max-w-[120px] select-none object-contain object-bottom -mb-2"
                        alt={section.items[0]?.display}
                        src={section.items[0]?.imageUrl}
                        width={180}
                        height={180}
                        loading="eager"
                      />
                    </a>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>
      ))
    )
  }
</Panel>
