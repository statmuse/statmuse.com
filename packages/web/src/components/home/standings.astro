---
import StandingsCard from '@components/cards/standings-card.astro'
import Panel from '@components/panel.astro'
import type { GameraDomain, StandingsTeam } from '@statmuse/core/gamera'
import { type Dictionary } from 'lodash'
import { orderBy } from 'lodash-es'

interface Props {
  domain: Exclude<GameraDomain, 'PGA'>
  standings: {
    teams: Dictionary<StandingsTeam[]>
  }
  class?: string
  toggle?: boolean
}

const { domain, standings, toggle = true } = Astro.props

const group = domain !== 'NBA' && domain !== 'EPL' ? 'division' : undefined

const toggleTitle = (name: string, domain: GameraDomain) => {
  if (domain === 'NBA' || domain === 'NHL') {
    if (name.includes('East')) {
      return 'East'
    } else {
      return 'West'
    }
  }
  if (domain === 'EPL') {
    if (name === 'epl') return 'PL'
    if (name === 'lal') return 'LaLiga'
  }
  return name
}
---

<Panel class={`group !py-0 relative ${Astro.props.class}`}>
  {
    toggle && (
      <div class="mt-2 mb-1 flex items-center justify-between">
        <h3 class="font-semibold">{`${domain === 'EPL' ? 'League' : domain} ${
          domain === 'EPL' ? 'Table' : 'Standings'
        }`}</h3>
        {Object.entries(standings.teams).length > 1 && (
          <div class="w-fit bg-gray-6 dark:bg-gray-4 text-gray-5 border border-gray-6 dark:border-gray-3 flex text-center rounded-full relative overflow-clip">
            <div class="absolute h-full w-1/2 bg-gray-8 dark:bg-gray-7 rounded-full left-0 group-has-[#standings-0:checked]:translate-x-0 group-has-[#standings-1:checked]:translate-x-full transition-transform ease-out" />
            {orderBy(Object.entries(standings.teams), '0').map(
              ([name, _teams], index) => (
                <label
                  for={`standings-${index}`}
                  class:list={[
                    'py-1 relative cursor-pointer',
                    {
                      'w-12': domain !== 'EPL',
                      'w-14': domain === 'EPL',
                      'group-has-[#standings-0:checked]:text-gray-2':
                        index === 0,
                      'group-has-[#standings-1:checked]:text-gray-2':
                        index === 1,
                    },
                  ]}
                >
                  {toggleTitle(name, domain)}
                </label>
              ),
            )}
          </div>
        )}
      </div>
    )
  }
  {
    orderBy(Object.entries(standings.teams), '0').map(
      ([_name, teams], index) => (
        <div class="-mx-3">
          <input
            class="absolute top-0 opacity-0 peer"
            type="radio"
            name="standings"
            id={`standings-${index}`}
            checked={index === 0}
          />
          <StandingsCard
            class="pt-0 hidden peer-checked:block w-full !border-none"
            {teams}
            {domain}
            {group}
          />
        </div>
      ),
    )
  }
</Panel>
