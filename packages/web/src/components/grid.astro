---
import {
  type GameraGrid,
  type GameraParameter,
  getUrlForEntity as getUrlForEntityGamera,
} from '@statmuse/core/gamera'
import {
  type KanedamaEntity,
  getUrlForEntity as getUrlForEntityKanedama,
} from '@statmuse/core/kanedama'
import type { HTMLAttributes } from 'astro/types'
import Image from '@components/image.astro'
import { freeRowLimit } from '@lib/enforcer'

interface Props extends HTMLAttributes<'div'> {
  data: GameraGrid
  fullWidth?: boolean
  seeAllUrl?: string
  title?: string
  hideTitle?: boolean
  columnStyles?: Record<string, string>
  columnHeaderStyles?: Record<string, string>
  parameters?: Record<string, GameraParameter>
  alternateStyle?: boolean
  highlight?: string
  hideHead?: boolean
  padding?: string
  kanedama?: boolean
  limitRows?: boolean
}

const {
  seeAllUrl,
  data,
  title,
  columnStyles,
  columnHeaderStyles,
  parameters,
  hideTitle,
  alternateStyle,
  highlight,
  hideHead,
  padding,
  kanedama,
  limitRows = false,
} = Astro.props

type Column = GameraGrid['columns'][0]
type Row = GameraGrid['rows'][0][string]
const fullWidth = Astro.props.fullWidth ?? true

const getTextColumnStyles = (col: Column) => {
  const customColumnStyles = columnStyles ? columnStyles[col.rowItemKey] : ''
  if (customColumnStyles) return customColumnStyles

  const defaultColumnStyles = columnStyles ? columnStyles['default'] : ''
  if (defaultColumnStyles) return defaultColumnStyles

  switch (col.type) {
    case 'date':
    case 'number':
    case 'time':
      return 'text-right'
    case 'string':
      return 'text-left'
    default:
      return 'text-center'
  }
}

const getTextColumnHeaderStyles = (col: Column) => {
  const customColumnStyles = columnHeaderStyles
    ? columnHeaderStyles[col.rowItemKey]
    : ''
  if (customColumnStyles) return customColumnStyles

  const defaultColumnStyles = columnHeaderStyles
    ? columnHeaderStyles['default']
    : ''
  if (defaultColumnStyles) return defaultColumnStyles

  return ''
}

const getRankingColor = ({
  isRanking,
  display,
}: {
  isRanking: boolean
  display: string
}) => {
  if (isRanking && display.match(/(\d+).*/)) {
    const [, num] = Array.from(display.match(/(\d+).*/) || [])
    if (Number(num) <= 10) return 'text-[#009444]'
    if (Number(num) >= 20) return 'text-[#BF1D2D]'
  }
  return ''
}

const dateRegex = /(Sun|Mon|Tue|Wed|Thu|Fri|Sat)\s(\d+\/\d+)/
const scoreRegex = /(W|L)\s(\d+-\d+)/
// (comment left for treesitter :/)
---

<div class={Astro.props.class}>
  <div
    class:list={{
      'flex justify-between mb-0.5': true,
      'border-b border-[#c7c8ca]': hideHead,
    }}
  >
    {
      !hideTitle && (
        <h3 class="font-semibold text-team-primary">{title || data.name}</h3>
      )
    }
    {seeAllUrl && <a href={seeAllUrl}>See all</a>}
    <slot />
    {
      parameters && (
        <div class="space-x-3">
          {Object.entries(parameters).map(([key, value]) => (
            <div class="inline-block relative cursor-pointer" data-cy="select">
              <div
                class="w-full bg-team-primary absolute bottom-0"
                style="height: 1px;"
              />
              <select
                name={key}
                autocomplete="off"
                class="grid-filter appearance-none font-semibold text-team-primary bg-white pr-3 cursor-pointer outline-none"
              >
                {value.values.map((v) => (
                  <option
                    value={v.id}
                    selected={
                      v.id.toString() ===
                      parameters[key].selectedValueId.toString()
                        ? 'selected'
                        : undefined
                    }
                  >
                    {v.display}
                  </option>
                ))}
              </select>
              <div
                class="w-0 h-0 border-x-[5px] border-x-transparent border-t-[5px] border-t-team-primary absolute top-1/2 right-0"
                style="transform: translateY(-35%);"
              />
            </div>
          ))}
        </div>
      )
    }
  </div>
  <div>
    <div style={{ maxHeight: '889px', overflow: 'hidden' }} data-accordion>
      <div
        class:list={{
          'relative overflow-x-auto': !alternateStyle,
          'overflow-auto border border-[#e4e4e4]': alternateStyle,
        }}
      >
        <table
          class:list={{
            'text-[15px] whitespace-nowrap': !alternateStyle,
            'border-spacing-0': alternateStyle,
            'w-full': fullWidth,
          }}
        >
          {
            hideHead ? null : (
              <thead>
                <tr
                  class:list={{
                    'text-xs text-team-secondary uppercase tracking-[0.07rem]':
                      !alternateStyle,
                    'border-b border-[#e4e4e4]': alternateStyle,
                  }}
                >
                  {data.columns.map((col, index) => {
                    const textColumnStyles = getTextColumnStyles(col)
                    const textColumnHeaderStyles =
                      getTextColumnHeaderStyles(col)
                    const hasImage = data.rows.some(
                      (row) => row[col.rowItemKey].imageUrl,
                    )

                    return (
                      <th
                        class:list={{
                          'first:rounded-l last:rounded-r bg-team-primary cursor-pointer font-normal p-1.5':
                            !alternateStyle,
                          'text-[#a8a8a8] font-normal px-3 py-2.5 text-center whitespace-nowrap first:border-r first:border-[#e4e4e4] first:min-w-[175px] first:w-[175px] first:sticky first:left-0 first:bg-white':
                            alternateStyle,
                          'pl-8': hasImage && !alternateStyle,
                          'sticky left-0': index === 0 && !alternateStyle,
                          [textColumnStyles]:
                            !alternateStyle && !!textColumnStyles,
                          [textColumnHeaderStyles]:
                            !alternateStyle && !!textColumnHeaderStyles,
                        }}
                      >
                        {col.title}
                      </th>
                    )
                  })}
                </tr>
              </thead>
            )
          }
          <tbody
            class:list={{
              'divide-y divide-[#c7c8ca] leading-[22px]': !alternateStyle,
              'divide-y divide-[#e4e4e4]': alternateStyle,
            }}
          >
            {
              data.rows.map((row, rowIndex) => (
                <tr
                  class:list={{
                    'bg-[#e9f9ff]':
                      highlight === row[Object.keys(row)[0]].value,
                  }}
                >
                  {data.columns.map((col, colIndex) => {
                    const getCellContent = (row: Row) => {
                      const playerEntity = row.entity?.type.includes('player')

                      if (row.imageUrl) {
                        return (
                          <div class="flex items-center">
                            {row.imageUrl ? (
                              <Image
                                src={row.imageUrl}
                                alt={
                                  row.display +
                                  (playerEntity ? ' illustration' : ' logo')
                                }
                                class:list={{
                                  'w-6 h-6 max-w-none object-cover rounded-full bg-white mr-2.5':
                                    playerEntity && !alternateStyle,
                                  'opacity-50':
                                    playerEntity &&
                                    row.imageUrl.includes('silhouette'),
                                  'w-4 h-4 max-w-none object-contain mr-2.5':
                                    !playerEntity && !alternateStyle,
                                  'inline-block w-6 h-6 object-contain mr-2.5 align-middle':
                                    alternateStyle,
                                }}
                                width={50}
                                height={50}
                              />
                            ) : (
                              <div class="w-4 h-4 mr-2.5" />
                            )}
                            {row.display}
                          </div>
                        )
                      }

                      if (row.display?.match(dateRegex)) {
                        const [, day, date] = row.display.match(dateRegex) || []
                        return (
                          <div class="flex">
                            <div class="w-8">{day}</div>
                            <div>{date}</div>
                          </div>
                        )
                      }

                      if (row.display?.match(scoreRegex)) {
                        const [, result, score] =
                          row.display.match(scoreRegex) || []
                        return (
                          <div class="flex">
                            <div class="w-5">{result}</div>
                            <div>{score}</div>
                          </div>
                        )
                      }

                      return row.display
                    }

                    const { entity, imageUrl, value, display } =
                      row[col.rowItemKey]
                    const content = getCellContent(row[col.rowItemKey])
                    const textColumnStyles = getTextColumnStyles(col)
                    const href = entity
                      ? kanedama
                        ? getUrlForEntityKanedama(
                            entity as unknown as KanedamaEntity,
                          )
                        : getUrlForEntityGamera(entity)
                      : undefined

                    const firstColumn = data.columns[0]
                    const isRanking =
                      row[firstColumn.rowItemKey].display.includes('Rank')
                    const color = getRankingColor({ isRanking, display })

                    return (
                      <td
                        data-value={value}
                        data-redact={
                          limitRows &&
                          colIndex !== 0 &&
                          rowIndex >= freeRowLimit
                        }
                        class:list={{
                          'px-2 py-1': !padding && !alternateStyle && !imageUrl,
                          'px-2': !padding && !alternateStyle && !!imageUrl,
                          'px-3 py-2.5 text-center whitespace-nowrap first:border-r first:border-[#e4e4e4] first:min-w-[175px] first:w-[175px] first:sticky first:left-0 first:bg-white first:text-left':
                            alternateStyle,
                          'first:bg-white':
                            alternateStyle &&
                            highlight !== row[Object.keys(row)[0]].value,
                          'first:bg-[#e9f9ff]':
                            alternateStyle &&
                            highlight === row[Object.keys(row)[0]].value,
                          'bg-white': !alternateStyle,
                          'sticky left-0': colIndex === 0 && !alternateStyle,
                          'w-2': !!imageUrl && !alternateStyle,
                          [textColumnStyles]:
                            !alternateStyle && !!textColumnStyles,
                          [padding ?? '']: !!padding,
                          [color]: isRanking,
                        }}
                      >
                        {entity ? (
                          <a
                            title={entity.display}
                            href={href}
                            class:list={{
                              hidden:
                                limitRows &&
                                colIndex !== 0 &&
                                rowIndex >= freeRowLimit,
                            }}
                          >
                            {content}
                          </a>
                        ) : (
                          <span
                            class:list={{
                              hidden:
                                limitRows &&
                                colIndex !== 0 &&
                                rowIndex >= freeRowLimit,
                            }}
                          >
                            {content}
                          </span>
                        )}
                        {limitRows &&
                          colIndex !== 0 &&
                          rowIndex >= freeRowLimit && (
                            <a
                              href="/signup"
                              class="flex items-center justify-center"
                            >
                              <div class="bg-primary w-5 h-5 p-1 flex items-center justify-center">
                                <svg
                                  xmlns="http://www.w3.org/2000/svg"
                                  fill="none"
                                  viewBox="0 0 24 24"
                                  stroke-width={2}
                                  stroke="white"
                                  class="w-full h-full"
                                >
                                  <path
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    d="M16.5 10.5V6.75a4.5 4.5 0 10-9 0v3.75m-.75 11.25h10.5a2.25 2.25 0 002.25-2.25v-6.75a2.25 2.25 0 00-2.25-2.25H6.75a2.25 2.25 0 00-2.25 2.25v6.75a2.25 2.25 0 002.25 2.25z"
                                  />
                                </svg>
                              </div>
                            </a>
                          )}
                      </td>
                    )
                  })}
                </tr>
              ))
            }
            {
              data.aggregations?.map((row) => (
                <tr class="text-sm font-semibold">
                  {data.columns.map((col, x) => {
                    const { display } = row[col.rowItemKey]
                    const textColumnStyles = getTextColumnStyles(col)
                    return (
                      <td
                        class:list={{
                          'px-2 py-1 bg-white': true,
                          'sticky left-0': x === 0,
                          [textColumnStyles]: !!textColumnStyles,
                        }}
                      >
                        {display}
                      </td>
                    )
                  })}
                </tr>
              ))
            }
          </tbody>
        </table>
      </div>
    </div>
    <div class="hidden" data-subscribe-cta>
      <a href="/auth/signup">Subscribe to see all 50+ rows</a>
    </div>
    <div class="hidden" data-expand-btn>
      <a href="#">See all rows</a>
    </div>
  </div>
</div>

<script>
  import { session } from '@lib/session-store'
  const freeRowLimit = 25

  document.addEventListener('astro:page-load', () => {
    session.subscribe((s) => {
      if (s) {
        if (s.type === 'user' && s.properties.subscriptionStatus === 'active') {
          document
            .querySelectorAll<HTMLTableRowElement>('[data-redact]')
            .forEach((elem) => {
              const [content, lock] = elem.children
              content.classList.remove('hidden')
              lock.classList.add('hidden')
            })

          document.querySelectorAll('table').forEach((table) => {
            const numRows = table.querySelectorAll('tbody tr').length
            console.log('num rows: ', numRows)
            if (numRows > freeRowLimit + 3) {
              const expandBtn = table
                .closest('[data-accordion]')
                ?.parentElement?.querySelector<HTMLElement>('[data-expand-btn]')
              if (expandBtn) {
                expandBtn.classList.remove('hidden')
                expandBtn.addEventListener('click', (e) => {
                  e.preventDefault()
                  console.log('expand now')
                  const accordion = table.closest<HTMLElement>(
                    '[data-accordion]',
                  ) as HTMLElement
                  accordion.style.maxHeight = ''
                  expandBtn.classList.add('hidden')
                })
              }
            }
          })
        } else {
          document.querySelectorAll('table').forEach((table) => {
            const numRows = table.querySelectorAll('tbody tr').length
            console.log('num rows: ', numRows)
            if (numRows > freeRowLimit) {
              const subscribeCta = table
                .closest('[data-accordion]')
                ?.parentElement?.querySelector<HTMLElement>(
                  '[data-subscribe-cta]',
                )
              if (subscribeCta) {
                subscribeCta.classList.remove('hidden')
              }
            }
          })
        }
      }
    })

    const selects = document.querySelectorAll('select.grid-filter')
    selects.forEach((select) => {
      select.addEventListener('change', (event) => {
        const select = event.target as HTMLSelectElement
        const url = new URL(window.location.href)
        url.searchParams.set(select.name, select.value)
        window.location.href = url.toString()
      })
    })

    const getValue = (tr: HTMLTableRowElement, index: number) => {
      const x = tr.children[index] as HTMLTableCellElement
      if (!Number.isNaN(Number(x.dataset.value))) {
        return Number(x.dataset.value)
      }
      return x.dataset.value
    }

    let prevIdx = -1
    let desc = true
    document.querySelectorAll('th').forEach((th) => {
      th.addEventListener('click', () => {
        const idx = Array.from(th.parentElement?.children || []).indexOf(th)
        const table = th.closest('table')
        const tbody = table?.querySelector('tbody')
        desc = idx !== prevIdx || !desc
        Array.from(
          table?.querySelectorAll<HTMLTableRowElement>('tbody tr') || [],
        )
          .sort((a, b) => {
            let result = 0
            const sortOptions = [
              { idx, desc },
              { idx: 0, desc: false },
            ]
            for (const i in sortOptions) {
              const { idx, desc } = sortOptions[i]
              const ax = getValue(a, idx) ?? (desc ? -1000000 : 1000000)
              const bx = getValue(b, idx) ?? (desc ? -1000000 : 1000000)
              if (typeof ax === 'number' && typeof bx === 'number') {
                result = desc ? bx - ax : ax - bx
              }
              if (typeof ax === 'string' && typeof bx === 'string') {
                result = desc ? bx.localeCompare(ax) : ax.localeCompare(bx)
              }
              if (result !== 0) return result
            }
            return result
          })
          .forEach((tr) => {
            if (tbody) {
              if (prevIdx > -1) {
                tr.children[prevIdx].classList.remove('bg-[#fffbec]')
                tr.children[prevIdx].classList.add('bg-white')
              }
              tr.children[idx].classList.add('bg-[#fffbec]')
              tr.children[idx].classList.remove('bg-white')
              tbody.append(tr)
            }
          })

        prevIdx = idx
      })
    })
  })
</script>
