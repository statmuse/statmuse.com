---
import Container from '@components/container.astro'
import AssetPriceReturnsChart from '@components/asset-price-chart.astro'
import AssetPriceGrid from '@components/asset-price-grid.astro'
import CategoricalColumnChart from '@components/categorical-column-chart.astro'
import TimeSeriesLineChart from '@components/time-series-line-chart.astro'
import Grid from '@components/grid.astro'
import { type KanedamaResponse, tokensToHtml } from '@statmuse/core/kanedama'
import {
  type Asset,
  type AssetPriceData,
  type Price,
  getFrequencyKey,
  getAssetPriceData,
  getInitialClose,
  addTimeframeDisplay,
  addClosePercentChange,
} from '@lib/kanedama'
import { frequencyMap, type FrequencyKey } from '@statmuse/core/frequency'
import { color } from 'highcharts'
import map from 'lodash/fp/map'
import pipe from 'lodash/fp/pipe'
import flatMap from 'lodash/fp/flatMap'
import reduce from 'lodash/fp/reduce'
import sortBy from 'lodash/fp/sortBy'
import filter from 'lodash/fp/filter'
import min from 'lodash/fp/min'

interface Props {
  response: KanedamaResponse
  query?: string
  conversationToken?: string
}

const query = Astro.props.query
const conversationToken = Astro.props.conversationToken

const response = Astro.props.response
const details =
  response.type !== 'nlgPromptForMoreInfoVisualChoicesOptional'
    ? response.visual.detail
    : undefined

// console.log(JSON.stringify(details, null, 2))
---

<Container>
  {
    response.type === 'nlgPromptForMoreInfoVisualChoicesOptional' ? (
      <div class="h-screen w-full flex flex-col justify-center items-center">
        <h1
          class="text-3xl my-5 font-semibold"
          set:html={tokensToHtml(response.visual.summary.answer)}
        />
        <div class="w-full flex flex-col sm:flex-row sm:justify-center my-5 gap-2">
          {response.visual.choices.map((choice) => (
            <form action="/ask" method="post">
              <input name="_method" type="hidden" value="POST" />
              <input
                id="question_conversation_token"
                name="question[conversation_token]"
                type="hidden"
                value={conversationToken}
              />
              <input
                id="question_query"
                name="question[query]"
                required=""
                type="hidden"
                value={choice.input}
              />
              <input
                id="question_query_clarification_for"
                name="question[query_clarification_for]"
                type="hidden"
                value={query}
              />
              <button
                data-cy-choice-btn
                class="w-full text-xl border-2 border-black rounded-md cursor-pointer p-7"
                type="submit"
              >
                {choice.display}
              </button>
            </form>
          ))}
        </div>
      </div>
    ) : null
  }
  {
    response.type !== 'nlgPromptForMoreInfoVisualChoicesOptional' &&
      details?.map(async (detail) => {
        switch (detail.type) {
          case 'assetPriceData':
            const { assetPairs, notableTimestamps, renderTarget, ...props } =
              detail.assetPriceData
            const frequencyName = detail.assetPriceData.frequency
            const frequencyKey = getFrequencyKey(
              frequencyName,
              detail.assetPriceData.startTimestamp,
              detail.assetPriceData.endTimestamp,
            )
            const frequency = frequencyMap[frequencyKey]
            const responses = await Promise.all(
              assetPairs.map((p) =>
                getAssetPriceData({
                  frequency: frequency.name as FrequencyKey,
                  ...p,
                  ...props,
                }),
              ),
            )

            const assets = responses
              .filter((r) => !!r)
              .map((r) => r as AssetPriceData)
              .map((r) => {
                const { assetPair, prices, redacted } = r
                const sortedPrices = sortBy(
                  (p) => p.timeframe.timestamp ?? p.timeframe.endTimestamp,
                  prices,
                )
                const initialClose = getInitialClose(sortedPrices)
                return {
                  redacted,
                  assetPair,
                  color,
                  prices: map(
                    pipe(
                      addTimeframeDisplay(frequency),
                      addClosePercentChange(initialClose),
                    ),
                    sortedPrices,
                  ) as unknown as Price[],
                }
              })

            const getPriceValueFormatString = (() => {
              const minDecimals = 2
              const maxDecimals = 6

              const getDecimals = (value: number) => {
                const impl: (d: number) => number = (d: number) => {
                  if (d >= maxDecimals) return maxDecimals
                  return value < 1 / 10 ** d ? impl(d + 1) : d
                }
                return value ? impl(minDecimals) : 0
              }

              return (assets: Asset[]) => {
                const minValue = pipe(
                  flatMap('prices'),
                  reduce(
                    (value, { open, high, low, close }) =>
                      pipe(
                        map((x) => Math.abs(x)),
                        filter((x) => x > 0),
                        min,
                      )([value, open, high, low, close]),
                    Number.MAX_VALUE,
                  ),
                )(assets)

                return `0,0.${'0'.repeat(getDecimals(minValue))}`
              }
            })()

            const priceFormatString = getPriceValueFormatString(assets)
            // When price response indicates a specific frequency, prefer a candlestick
            // chart over a line chart. Example: apple weekly price (show weekly candles)
            const preferCandlestick = !!frequencyName

            return (
              <Fragment>
                <AssetPriceReturnsChart
                  {detail}
                  {notableTimestamps}
                  {assets}
                  {renderTarget}
                  {priceFormatString}
                  {preferCandlestick}
                  color={response.visual.summary.subject?.colors.background}
                />
                <AssetPriceGrid
                  {detail}
                  {assets}
                  {frequency}
                  {notableTimestamps}
                  {renderTarget}
                  {priceFormatString}
                />
              </Fragment>
            )
          case 'genericGrids':
            return detail.grids.map((grid) => (
              <Grid
                kanedama
                data={grid}
                hideTitle
                columnStyles={{ DATE: 'text-left' }}
                limitRows
              />
            ))
          case 'charts':
            return detail.charts.map((chart) => {
              switch (chart.type) {
                case 'categoricalColumn':
                  return <CategoricalColumnChart {chart} />
                case 'timeSeriesLine':
                  return <TimeSeriesLineChart {chart} />
                default:
                  return null
              }
            })

          default:
            return null
        }
      })
  }
  {
    response.type !== 'nlgPromptForMoreInfoVisualChoicesOptional' && details ? (
      <div class="my-2.5">
        {response.visual.disclaimers?.map((d) => (
          <div class="text-sm italic font-light" set:html={d} />
        ))}
      </div>
    ) : null
  }
</Container>
