---
import TeamLayout from '@layouts/team.astro'
import Grid from '@components/grid.svelte'
import TeamLeaders from '@components/leaders.astro'
import PlayerGallery from '@components/gallery.astro'
import {
  tokensToText,
  tokensToHtml,
  getUrlForEntity,
  type GameraTeamSeasonOverview,
} from '@statmuse/core/gamera'
import { getTeamFranchiseLatestSeason, getTeamSeasonOverview } from '@lib/team'
import { getLeagueKeywords } from '@lib/meta'
import { NOT_FOUND_404 } from '@lib/response'
import { leagueToDomain, type LeagueParam } from '@lib/params'
import type { AnalyticsPageviewProperties } from '@lib/analytics'

interface Props {
  league: LeagueParam
  team: string
  year: string
  query?: string
  overview?: GameraTeamSeasonOverview
  analytics?: AnalyticsPageviewProperties
}

const analytics = Astro.props.analytics
const query = Astro.props.query
const leagueParam = Astro.props.league
const team = Astro.props.team
let year = Astro.props.year
let overview = Astro.props.overview

if (!team || !leagueParam || !year) return NOT_FOUND_404

const isFc = leagueParam === 'fc'
const schedule = isFc ? 'fixtures' : 'schedule'

const domain = leagueToDomain(leagueParam)
if (!overview) {
  overview = await getTeamSeasonOverview({
    context: Astro,
    domain,
    team,
    year,
  })
}

// re-fetch team season overview from latest season if initial reponse has no stats
if (overview && !overview.bio.hasStats && Astro.request.method === 'POST') {
  const latestSeason = await getTeamFranchiseLatestSeason({
    context: Astro,
    domain,
    teamId: overview.teamId.toString(),
  })
  year = latestSeason?.entity.id.split('/')[1] as string
  overview = await getTeamSeasonOverview({
    context: Astro,
    domain,
    team,
    year,
  })
}

if (!overview) return NOT_FOUND_404

const { bio, scoresAndSchedule, teamLeaders, standings, stats, playerGallery } =
  overview

const summary = bio.summaryNlg ? tokensToHtml(bio.summaryNlg) : undefined

const titleDetail = isFc
  ? 'Stats, Fixtures, Table'
  : 'Scores, Stats, Schedule, Standings'
const descriptionDetail = isFc
  ? 'scores, stats, fixtures, table and more for the premier league season`'
  : `scores, stats, schedule, standings and more for the ${domain} regular season and playoffs`

const title = `${bio.name} ${year} ${titleDetail}`
const description = bio.summaryNlg
  ? tokensToText(bio.summaryNlg)
  : `The ${year} ${bio.name} ${descriptionDetail}`
const keywords = `${getLeagueKeywords(domain)} ${year} ${bio.name} ${
  Astro.params.org
} player stats statistics`

const canonical = {
  url: `${getUrlForEntity({
    type: 'teamSeason',
    domain,
    id: bio.teamId.toString(),
    display: bio.name,
  })}/${year}`,
  rewrite: true,
}
const meta = { title, description, keywords, canonical }
---

<TeamLayout {bio} {meta} {query} {analytics} page="overview">
  <div class="mb-5 leading-snug">
    <p set:html={summary} />
  </div>
  <div class="grid grid-cols-[repeat(auto-fit,_minmax(300px,_1fr))] gap-5 mb-5">
    {
      scoresAndSchedule && (
        <div>
          <div class="flex justify-between mb-0.5">
            <h3 class="font-bold text-team-primary">
              {scoresAndSchedule.name}
            </h3>
            <a href={`${schedule}/${year}`}>See schedule</a>
          </div>
          <Grid
            client:load
            data={scoresAndSchedule}
            columnStyles={{ DATE: 'text-left', SCORE: 'text-left' }}
          />
        </div>
      )
    }
    {
      teamLeaders && (
        <TeamLeaders
          leaders={teamLeaders}
          title={isFc ? 'Club Leaders' : 'Team Leaders'}
        >
          <a href={`roster/${year}`}>See roster</a>
        </TeamLeaders>
      )
    }
    {
      standings && (
        <div>
          <h3 class="font-bold text-team-primary mb-0.5">
            {standings.name}
          </h3>
          <Grid client:load data={standings} />
        </div>
      )
    }
  </div>
  {
    stats &&
      (Array.isArray(stats) ? (
        stats.map((data) => (
          <div class="mb-5">
            <div class="flex justify-between mb-0.5">
              <h3 class="font-bold text-team-primary">{data.name}</h3>
              <a href={`stats/${year}`}>See stats</a>
            </div>
            <Grid client:load data={data} />
          </div>
        ))
      ) : (
        <div class="mb-5">
          <div class="flex justify-between mb-0.5">
            <h3 class="font-bold text-team-primary">{stats.name}</h3>
            <a href={`stats/${year}`}>See stats</a>
          </div>
          <Grid client:load data={stats} />
        </div>
      ))
  }
  {
    playerGallery && playerGallery.length > 0 && (
      <PlayerGallery images={playerGallery} class="mb-5" />
    )
  }
</TeamLayout>
