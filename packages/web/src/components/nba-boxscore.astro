---
import {
  GameraNbaBoxScore,
  NbaHistoricalBoxScore,
  getUrlForEntity,
} from '@statmuse/core/gamera'
import type { HTMLAttributes } from 'astro/types'
import Grid from '@components/grid.astro'
import Image from '@components/image.astro'
import TabPanel from '@components/tab-panel.astro'
import Tabs from '@components/tabs.astro'
import TeamStat from '@components/team-stat.astro'

interface Props extends HTMLAttributes<'div'> {
  data?: GameraNbaBoxScore
  detail?: NbaHistoricalBoxScore
}

if (!Astro.props.data && !Astro.props.detail)
  throw new Error('Must provide data or detail')

const data = Astro.props.data
const boxScoreData =
  data?.visual.detail[0] ?? (Astro.props.detail as NbaHistoricalBoxScore)
const homeTeam = boxScoreData.homeTeam
const homeTeamStats = boxScoreData.teamDetail.homeTeam
const awayTeam = boxScoreData.awayTeam
const awayTeamStats = boxScoreData.teamDetail.awayTeam

const homeTeamUrl = getUrlForEntity(homeTeam.entity)
const awayTeamUrl = getUrlForEntity(awayTeam.entity)
---

<div class="w-full max-w-3xl mx-auto text-[#333]">
  <h3 class="font-semibold bg-[#e4f2ff] rounded-sm px-3 py-2 w-fit">Final</h3>
  <div>
    <div class="flex items-center mb-6">
      <a title={awayTeam.name} href={awayTeamUrl}>
        <Image
          src={awayTeam.logoUrl}
          alt={awayTeam.abbrev}
          class="w-24 h-24 object-contain"
          width={96}
          height={96}
          loading="eager"
        />
      </a>
      <div class="flex-1 ml-5">
        <a title={awayTeam.name} href={awayTeamUrl}>
          <h1 class="font-semibold text-2xl md:text-3xl">{awayTeam.name}</h1>
        </a>
        <p class="font-semibold md:text-xl">{awayTeam.record}</p>
      </div>
      <h2 class="font-semibold text-5xl">{awayTeam.score}</h2>
    </div>
    <div class="flex items-center mb-6">
      <a title={homeTeam.name} href={homeTeamUrl}>
        <Image
          class="w-24 h-24 object-contain"
          src={homeTeam.logoUrl}
          alt={homeTeam.abbrev}
          width={96}
          height={96}
          loading="eager"
        />
      </a>
      <div class="flex-1 ml-5">
        <a title={homeTeam.name} href={homeTeamUrl}>
          <h1 class="font-semibold text-2xl md:text-3xl">{homeTeam.name}</h1>
        </a>
        <p class="font-semibold md:text-xl">{homeTeam.record}</p>
      </div>
      <h2 class="font-semibold text-5xl">{homeTeam.score}</h2>
    </div>
  </div>
  <div class="flex py-0.5 border border-[#e4e4e4] rounded-sm">
    {
      boxScoreData.summary.columns.map((column) => (
        <div class="first:flex-1 divide-y divide-[#e4e4e4] text-center first:text-left">
          <p class="p-2.5 text-xs md:text-base text-[#a8a8a8]">
            {column.title}
          </p>
          {boxScoreData.summary.rows.map((row) => (
            <p class="p-2.5 text-xs md:text-base font-semibold">
              {row[column.rowItemKey].entity ? (
                <a
                  title={row[column.rowItemKey].display}
                  href={getUrlForEntity(row[column.rowItemKey].entity!)}
                >
                  {row[column.rowItemKey].display}
                </a>
              ) : (
                row[column.rowItemKey].display
              )}
            </p>
          ))}
        </div>
      ))
    }
  </div>

  <div class="text-sm md:text-base">
    <Tabs titles={['Team Stats', 'Player Stats']}>
      <TabPanel title="Team Stats">
        <div class="flex">
          <p
            class="flex-1 p-2.5 border-b border-[#e4e4e4] font-semibold whitespace-nowrap overflow-hidden text-ellipsis"
          >
          </p>
          <p
            class="w-[85px] sm:w-24 py-2.5 text-center font-semibold border-b border-[#e4e4e4] whitespace-nowrap overflow-hidden text-ellipsis"
          >
            {awayTeam.name}
          </p>
          <p
            class="w-[85px] sm:w-24 py-2.5 text-center font-semibold border-b border-[#e4e4e4] whitespace-nowrap overflow-hidden text-ellipsis"
          >
            {homeTeam.name}
          </p>
        </div>
        <TeamStat
          title="FG Made - Attempted"
          away={awayTeamStats.fieldGoalMadeAttempt}
          home={homeTeamStats.fieldGoalMadeAttempt}
        />
        <TeamStat
          title="Field Goal %"
          away={awayTeamStats.fieldGoalPercent}
          home={homeTeamStats.fieldGoalPercent}
        />
        <TeamStat
          title="3PT Made - Attempted"
          away={awayTeamStats.threePointMadeAttempt}
          home={homeTeamStats.threePointMadeAttempt}
        />
        <TeamStat
          title="3PT %"
          away={awayTeamStats.threePointPercent}
          home={homeTeamStats.threePointPercent}
        />
        <TeamStat
          title="FT Made - Attempted"
          away={awayTeamStats.freeThrowMadeAttempt}
          home={homeTeamStats.freeThrowMadeAttempt}
        />
        <TeamStat
          title="Free Throw %"
          away={awayTeamStats.freeThrowPercent}
          home={homeTeamStats.freeThrowPercent}
        />
        <TeamStat
          title="Rebounds"
          away={awayTeamStats.totalRebounds}
          home={homeTeamStats.totalRebounds}
        />
        <TeamStat
          indented
          title="Offensive Rebounds"
          away={awayTeamStats.offensiveRebounds}
          home={homeTeamStats.offensiveRebounds}
        />
        <TeamStat
          indented
          title="Defensive Rebounds"
          away={awayTeamStats.defensiveRebounds}
          home={homeTeamStats.defensiveRebounds}
        />
        <TeamStat
          title="Assists"
          away={awayTeamStats.assists}
          home={homeTeamStats.assists}
        />
        <TeamStat
          title="Steals"
          away={awayTeamStats.steals}
          home={homeTeamStats.steals}
        />
        <TeamStat
          title="Blocks"
          away={awayTeamStats.blocks}
          home={homeTeamStats.blocks}
        />
        <TeamStat
          title="Turnovers"
          away={awayTeamStats.turnovers}
          home={homeTeamStats.turnovers}
        />
        <TeamStat
          title="Personal Fouls"
          away={awayTeamStats.personalFouls}
          home={homeTeamStats.personalFouls}
        />
      </TabPanel>
      <TabPanel title="Player Stats">
        <Tabs secondary titles={[awayTeam.name, homeTeam.name]}>
          <TabPanel title={awayTeam.name} class="space-y-5">
            {
              boxScoreData.playerDetail.awayTeam.grids.map((grid) => (
                <Grid data={grid} alternateStyle />
              ))
            }
          </TabPanel>
          <TabPanel title={homeTeam.name} class="space-y-5">
            {
              boxScoreData.playerDetail.homeTeam.grids.map((grid) => (
                <Grid data={grid} alternateStyle />
              ))
            }
          </TabPanel>
        </Tabs>
      </TabPanel>
    </Tabs>
  </div>
</div>
