---
import ErrorLayout from '@layouts/error.astro'
import AnswerVisual from '@components/answer-visual.astro'
import AnswerPrompt from '@components/answer-prompt.astro'
import AnswerEplBoxscore from '@components/epl/answer-boxscore.astro'
import PlayerProfile from '@components/player-profile.astro'
import TeamFranchiseProfile from '@components/team-franchise-profile.astro'
import TeamSeasonProfile from '@components/team-season-profile.astro'
import { tokensToText, type GameraResponse } from '@statmuse/core/gamera'
import { clean } from '@statmuse/core/path'
import type { AnalyticsPageviewProperties } from '@lib/analytics'
import type { LeagueParam } from '@lib/params'
import { handleAskResponseFromPost } from '@lib/gamera'

interface Props {
  data: GameraResponse
}

const { data } = Astro.props

const handled = handleAskResponseFromPost(data)
const query = clean(
  tokensToText(data.visual.summaryTokens?.filter((t) => t.type !== 'inferred')),
)
---

<ErrorLayout
  render={data.type === 'error'}
  status={422}
  message={tokensToText(data.visual.summary.answer)}
  {query}
  domain={data.visual.domain}
  analytics={{
    is_search: true,
    page_type: 'ask',
    page_domain:
      data.type === 'error'
        ? (data.visual.domain?.toLowerCase() as AnalyticsPageviewProperties['page_domain'])
        : undefined,
    disposition: data.disposition,
    tokenizationScore: data.tokenizationScore,
    query,
  }}
  trending
>
  {
    data.type === 'nlgPromptForMoreInfoVisualChoicesOptional' ? (
      <AnswerPrompt answer={data} />
    ) : handled.type === 'player' ? (
      <PlayerProfile
        analytics={{
          contentReference: data.visual.contentReference,
          subject: data.visual.summary.subject,
        }}
        query={handled.query}
        player={handled.player}
        league={handled.league.toLowerCase() as LeagueParam}
      />
    ) : handled.type === 'teamSeason' ? (
      <TeamSeasonProfile
        analytics={{
          contentReference: data.visual.contentReference,
          subject: data.visual.summary.subject,
        }}
        query={handled.query}
        team={handled.team}
        league={handled.league.toLowerCase() as LeagueParam}
        year={handled.year}
      />
    ) : handled.type === 'teamFranchise' ? (
      <TeamFranchiseProfile
        analytics={{
          contentReference: data.visual.contentReference,
          subject: data.visual.summary.subject,
        }}
        query={handled.query}
        team={handled.team}
        league={handled.league.toLowerCase() as LeagueParam}
      />
    ) : handled.type === 'eplHistoricalBoxScore' ? (
      <AnswerEplBoxscore
        analytics={{
          contentReference: data.visual.contentReference,
          subject: data.visual.summary.subject,
        }}
        data={handled.data}
      />
    ) : data.type === 'nlgAnswerNotPossibleVisualsRequired' ? (
      <AnswerVisual answer={data} />
    ) : undefined
  }
</ErrorLayout>
