---
import Grid from '@components/grid.svelte'
import MlbStandings from '@components/mlb-standings.astro'
import NbaStandings from '@components/nba-standings.astro'
import NflStandings from '@components/nfl-standings.astro'
import NhlStandings from '@components/nhl-standings.astro'
import MlbBoxscore from '@components/mlb-boxscore.astro'
import Standings from '@components/standings.astro'
import NbaBoxscore from '@components/nba-boxscore.astro'
import NflBoxscore from '@components/nfl-boxscore.astro'
import NhlBoxscore from '@components/nhl-boxscore.astro'
import EplBoxscore from '@components/epl/boxscore.astro'
import Schedule from '@components/schedule.astro'
import NbaShotChart from '@components/nba-shotchart'
import {
  type GameraDefaultResponse,
  type GameraAnswerEplBoxScore,
  tokensToHtml,
} from '@statmuse/core/gamera'

interface Props {
  response: GameraDefaultResponse
  query?: string
  conversationToken?: string
  class?: string | null
}

const response = Astro.props.response
const summary = tokensToHtml(response.visual.summaryTokens)
const showSummary = !!response.visual.summaryTokens?.find(
  (t) => t.type === 'inferred',
)
const ignoreGenericGrids = response.visual.detail?.find(
  (d) =>
    d.type === 'standings' ||
    d.type === 'schedule' ||
    d.type === 'mlbHistoricalBoxScore' ||
    d.type === 'nbaHistoricalBoxScore' ||
    d.type === 'nflHistoricalBoxScore' ||
    d.type === 'nhlHistoricalBoxScore' ||
    d.type === 'eplHistoricalBoxScore',
)
const details = response.visual.detail?.filter((d) =>
  ignoreGenericGrids ? d.type !== 'genericGrids' : true,
)
---

<div
  class:list={{
    'flex flex-col gap-3': true,
    [Astro.props.class ?? '']: !!Astro.props.class,
  }}
>
  {
    showSummary && details && (
      <div class="text-sm text-gray-5">
        <h5 class="inline">Interpreted as:</h5>
        <Fragment set:html={summary} />
      </div>
    )
  }
  {
    details?.map((detail) => {
      switch (detail.type) {
        case 'stats':
          return (
            <Fragment>
              {detail.grids.map((grid) => (
                <div class="flex-1 overflow-x-auto">
                  <Grid
                    title={grid.name !== 'all' ? grid.name : undefined}
                    client:load
                    data={grid}
                    columnStyles={{
                      RESULT: 'text-left',
                    }}
                    stickyColumns={['NAME', 'TEAM', 'PLAYER']}
                    limitRows
                    rankColumn
                  />
                </div>
              ))}
            </Fragment>
          )
        case 'genericGrids':
          return detail.grids.map((grid) => (
            <div class="flex-1 overflow-x-auto">
              <Grid
                title={grid.name !== 'all' ? grid.name : undefined}
                client:load
                data={grid}
                columnStyles={{
                  RESULT: 'text-left',
                }}
                stickyColumns={['NAME', 'TEAM', 'PLAYER']}
                limitRows
                rankColumn
              />
            </div>
          ))
        case 'standings':
          switch (response.visual.domain) {
            case 'MLB':
              return <MlbStandings {detail} />
            case 'NBA':
              return <NbaStandings {detail} />
            case 'NFL':
              return <NflStandings {detail} />
            case 'NHL':
              return <NhlStandings {detail} />
            case 'EPL':
              return (
                <Standings
                  groups={[{ name: 'FC', standings: detail.standings }]}
                  highlight={detail.topic?.team}
                />
              )
            default:
              return null
          }
        case 'schedule':
          return <Schedule league={response.visual.domain ?? ''} {detail} />
        case 'mlbHistoricalBoxScore':
          return <MlbBoxscore {detail} />
        case 'nbaHistoricalBoxScore':
          return <NbaBoxscore {detail} />
        case 'nflHistoricalBoxScore':
          return <NflBoxscore {detail} />
        case 'nhlHistoricalBoxScore':
          return <NhlBoxscore {detail} />
        case 'eplHistoricalBoxScore':
          return <EplBoxscore data={response as GameraAnswerEplBoxScore} />
        case 'nbaShots':
          return (
            <div>
              <NbaShotChart
                client:load
                model={detail.charts[0]}
                widthAvailable={800}
              />
            </div>
          )
        default:
          return null
      }
    })
  }
  {
    details ? (
      <div class="">
        {response.visual.disclaimers?.map((d) => (
          <div class="text-sm italic font-light" set:html={d} />
        ))}
      </div>
    ) : null
  }
  {
    details === undefined && (
      <div style="font-size: 16px; color: rgb(189, 189, 189); text-align: center; display: flex; justify-content: center; align-items: center; width: 100%; height: 250px;">
        No chart or data table available
      </div>
    )
  }
</div>
<script>
  document.addEventListener('astro:page-load', () => {
    document.querySelectorAll('label[role="tab"]').forEach((elem) => {
      elem.addEventListener('click', () => {
        document.querySelectorAll('label[role="tab"]').forEach((el) => {
          el.classList.add('border-transparent')
          el.classList.remove('border-secondary')
        })
        elem.classList.add('border-secondary')
        elem.classList.remove('border-transparent')
      })
    })
  })
</script>
