---
import { getGames, getPlayByPlay, getStandingsRaw } from '@lib/gamera'
import Layout from './layout.astro'
import {
  getUrlForEntity,
  tokensToText,
  type ContentReference,
  type MlbGameDataResponse,
  type MlbStatKey,
} from '@statmuse/core/gamera'
import { find } from 'lodash-es'
import PostgameHero from './postgame-hero.astro'
import GameInfo from './game-info.astro'
import CurrentSeries from './current-series.astro'
import Standings from './standings.astro'
import Linescore from './linescore.svelte'
import PlayByPlay from './play-by-play.svelte'
import BattingStats from './batting-stats.svelte'
import PitchingStats from './pitching-stats.svelte'
import GameSummary from './game-summary.astro'
import * as store from './stores'
import { Caching } from '@lib/caching'
import PlayerModal from './player-modal.svelte'
import GameState from './game-state.svelte'
import BattingSummary from './batting-summary.svelte'
import AtBatModal from './at-bat-modal.svelte'
import dayjs from 'dayjs'
import AditudeAdBanner from '@components/aditude-ad-banner.svelte'

interface Props {
  gameData: MlbGameDataResponse<MlbStatKey>
  gameId: string
}

const { gameData, gameId } = Astro.props

const {
  seasonYearDisplay: seasonYear,
  season,
  awayTeam: awayTeamModel,
  homeTeam: homeTeamModel,
  teams,
  venue,
  weather,
  officials,
  gameTimestamp,
  gameDate,
  summary,
  timeOfDay,
} = gameData

const [awayTeamGames, standings, playByPlay] = await Promise.all([
  getGames({
    context: Astro,
    domain: 'mlb',
    teamId: awayTeamModel.teamId,
    seasonYear,
    gameState: ['completed', 'inProgress', 'scheduled'],
  }),
  getStandingsRaw({ context: Astro, domain: 'mlb', seasonYear: season.year }),
  getPlayByPlay({ context: Astro, gameId }),
])

store.init({ gameData, playByPlay })

const awayTeam = find(teams, { teamId: awayTeamModel.teamId })
const homeTeam = find(teams, { teamId: homeTeamModel.teamId })

const meta = {
  title: `${awayTeam?.nickname} ${awayTeamModel.score}-${homeTeamModel.score} ${
    homeTeam?.nickname
  } (${dayjs(gameTimestamp ?? gameDate).format('MMM D, YYYY')})`,
  description: tokensToText(gameData.summary),
  canonical: {
    url: getUrlForEntity({
      id: gameData.gameId.toString(),
      type: 'game',
      domain: 'MLB',
      display: `${dayjs(gameTimestamp ?? gameDate).format('M/D/YYYY')} ${
        awayTeam?.abbreviation
      } @ ${homeTeam?.abbreviation}`,
    }),
  },
}

Caching.swr(Astro)
---

<Layout
  {meta}
  analytics={{
    page_domain: 'mlb',
    page_type: 'game',
    is_search: true,
    contentReference: {
      answerTags: {
        teamIds: [awayTeam?.teamId, homeTeam?.teamId].filter((x) => !!x),
      },
    } as ContentReference,
    subject: {
      imageUrl:
        awayTeamModel.gameResult === 'win'
          ? awayTeam?.logoImageUrl ?? ''
          : homeTeam?.logoImageUrl ?? '',
      colors:
        awayTeamModel.gameResult === 'win'
          ? {
              foreground: awayTeam?.colors?.foregroundColor ?? '',
              background: awayTeam?.colors?.backgroundColor ?? '',
            }
          : {
              foreground: homeTeam?.colors?.foregroundColor ?? '',
              background: homeTeam?.colors?.backgroundColor ?? '',
            },
    },
  }}
  status={gameData.gameStatus}
  {awayTeam}
  {homeTeam}
  {playByPlay}
  useContainerQuery
>
  <PostgameHero
    slot="hero"
    timestamp={gameTimestamp ?? gameDate}
    {awayTeam}
    awayRecord={awayTeamModel.record}
    {homeTeam}
    homeRecord={homeTeamModel.record}
    inningNumber={gameData.awayTeam.lineScore?.length}
  >
    <nav
      class:list={{
        'hidden @xl/boxscore:flex gap-3 justify-center': true,
        'overflow-x-scroll no-scrollbar': true,
        'pt-3': true,
      }}
    >
      <div class="group/nav flex flex-col gap-1.5 overflow-clip">
        <label
          class:list={{
            'cursor-pointer whitespace-nowrap': true,
          }}
          for="summary"
          set:html="Summary"
        />
        <div
          class:list={{
            'w-full h-5 -mb-2.5 bg-current rounded-2xl': true,
            'hidden group-has-[#summary:checked]:block group-hover/nav:block': true,
          }}
        >
        </div>
      </div>
      <div class="group/nav flex flex-col gap-1.5 overflow-clip">
        <label
          class:list={{
            'cursor-pointer whitespace-nowrap': true,
          }}
          for="box"
          set:html="Box"
        />
        <div
          class:list={{
            'w-full h-5 -mb-2.5 bg-current rounded-2xl': true,
            'hidden group-has-[#box:checked]:block group-hover/nav:block': true,
          }}
        >
        </div>
      </div>
    </nav>
  </PostgameHero>

  {
    playByPlay && (
      <div slot="summary" class="flex gap-3">
        <div class="flex-1 flex flex-col gap-3">
          <div class="@xl/boxscore:hidden">
            <Linescore {awayTeam} {homeTeam} final />
          </div>
          <div class="group/plays hidden @xl/boxscore:block">
            <div class="bg-gray-6 dark:bg-gray-4 text-gray-5 border border-gray-6 dark:border-gray-3 flex text-center mb-3 rounded-full relative overflow-clip">
              <div class="absolute h-full w-1/2 bg-gray-8 dark:bg-gray-7 rounded-full left-0 group-has-[#scoring:checked]/plays:translate-x-0 group-has-[#all:checked]/plays:translate-x-full transition-transform ease-out" />
              <label
                for="scoring"
                class:list={{
                  'flex-1 py-1 hover:cursor-pointer relative': true,
                  'group-has-[#scoring:checked]/plays:text-gray-2': true,
                }}
              >
                Scoring Plays
              </label>
              <label
                for="all"
                class:list={{
                  'flex-1 py-1 hover:cursor-pointer relative': true,
                  'group-has-[#all:checked]/plays:text-gray-2': true,
                }}
              >
                All Plays
              </label>
            </div>
            <div class="hidden has-[#scoring:checked]:flex flex-col gap-3">
              <input
                class="absolute opacity-0"
                type="radio"
                name="plays"
                id="scoring"
                checked
              />
              <PlayByPlay client:load {awayTeam} {homeTeam} scoring />
            </div>
            <div class="hidden has-[#all:checked]:flex flex-col gap-3">
              <input
                class="absolute opacity-0"
                type="radio"
                name="plays"
                id="all"
              />
              <PlayByPlay client:load {awayTeam} {homeTeam} />
            </div>
          </div>
          <div class="@xl/boxscore:hidden flex flex-col gap-3">
            <PlayByPlay client:load {awayTeam} {homeTeam} scoring />
            <CurrentSeries
              domain="MLB"
              teams={teams ?? []}
              currentGameId={Number.parseInt(gameId)}
              games={awayTeamGames?.games}
            />
            <AditudeAdBanner
              client:only="svelte"
              divId="postgame-1"
              slotId="pb-slot-banner"
              class="mx-auto"
              placeholderClass="w-[320px] h-[100px] mx-auto"
              onlyMobile
              lazy
            />
            <Standings
              {standings}
              awayTeamId={awayTeamModel.teamId}
              homeTeamId={homeTeamModel.teamId}
            />
            <GameSummary {summary} />
            <GameInfo
              {venue}
              {weather}
              {officials}
              {timeOfDay}
              gameTimestamp={gameTimestamp || gameDate}
            />
            <AditudeAdBanner
              client:only="svelte"
              divId="postgame-2"
              slotId="pb-slot-banner"
              class="mx-auto"
              placeholderClass="w-[320px] h-[100px] mx-auto"
              onlyMobile
              lazy
            />
          </div>
        </div>
        <div class="flex-1 hidden @xl/boxscore:flex flex-col gap-3 overflow-hidden">
          <Linescore {awayTeam} {homeTeam} final />
          <CurrentSeries
            domain="MLB"
            teams={teams ?? []}
            currentGameId={Number.parseInt(gameId)}
            games={awayTeamGames?.games}
          />
          <Standings
            {standings}
            awayTeamId={awayTeamModel.teamId}
            homeTeamId={homeTeamModel.teamId}
          />
          <GameSummary {summary} />
          <GameInfo
            {venue}
            {weather}
            {officials}
            {timeOfDay}
            gameTimestamp={gameTimestamp || gameDate}
          />
        </div>
      </div>
    )
  }

  {
    !playByPlay && (
      <div
        slot="summary"
        class="space-y-3 gap-3 justify-center @xl/boxscore:columns-2"
      >
        <Linescore {awayTeam} {homeTeam} final />
        <CurrentSeries
          domain="MLB"
          teams={teams ?? []}
          currentGameId={Number.parseInt(gameId)}
          games={awayTeamGames?.games}
        />
        <Standings
          {standings}
          awayTeamId={awayTeamModel.teamId}
          homeTeamId={homeTeamModel.teamId}
        />
        <GameSummary {summary} />
        <GameInfo
          {venue}
          {weather}
          {officials}
          {timeOfDay}
          gameTimestamp={gameTimestamp || gameDate}
        />
      </div>
    )
  }

  <div
    slot="box"
    class="hidden @xl/boxscore:grid grid-cols-2 gap-3 items-start"
  >
    <BattingStats client:load team={awayTeam} teamKey="away" final />
    <BattingStats client:load team={homeTeam} teamKey="home" final />
    <BattingSummary teamKey="away" />
    <BattingSummary teamKey="home" />
    <PitchingStats client:load teamKey="away" final />
    <PitchingStats client:load teamKey="home" final />
  </div>

  <Fragment slot="away">
    <BattingStats client:load teamKey="away" final />
    <BattingSummary teamKey="away" />
    <PitchingStats client:load teamKey="away" final />
    <AditudeAdBanner
      client:only="svelte"
      divId="postgame-away"
      slotId="pb-slot-banner"
      class="mx-auto"
      placeholderClass="w-[320px] h-[100px] mx-auto"
      onlyMobile
      lazy
    />
  </Fragment>

  <Fragment slot="home">
    <BattingStats client:load teamKey="home" final />
    <BattingSummary teamKey="home" />
    <PitchingStats client:load teamKey="home" final />
    <AditudeAdBanner
      client:only="svelte"
      divId="postgame-home"
      slotId="pb-slot-banner"
      class="mx-auto"
      placeholderClass="w-[320px] h-[100px] mx-auto"
      onlyMobile
      lazy
    />
  </Fragment>

  {
    playByPlay && (
      <PlayByPlay client:load slot="plays" {awayTeam} {homeTeam} renderAds />
    )
  }

  <GameState client:load {gameData} {playByPlay} />

  <Fragment slot="modal">
    <PlayerModal client:only="svelte" />
    <AtBatModal client:only="svelte" />
  </Fragment>
</Layout>
