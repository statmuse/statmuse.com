---
import { getHeroProps } from '@lib/gamera'
import Layout from '@layouts/main.astro'
import Header from '@components/header.astro'
import Hero from '@components/hero.astro'
import Visuals from '@components/visuals.astro'
import Explore from '@components/explore.astro'
import Container from '@components/container.astro'
import {
  type GameraDefaultResponse,
  tokensToText,
  type GameraResponse,
} from '@statmuse/core/gamera'
import { title, description } from '@lib/meta'
import { clean, createAskPath, imageForgeUrl } from '@statmuse/core/path'
import type { AnalyticsPageviewProperties } from '@lib/analytics'
import * as Link from '@statmuse/core/link'
import AnswerCards from '@components/answer-cards.astro'
import { ANSWER_CARDS_ENABLED } from 'src/config'
import type { LeagueParam } from '@lib/params'

interface Props {
  answer: GameraDefaultResponse
}

const { answer } = Astro.props
const conversationToken = answer.conversation.token
const query = clean(
  tokensToText(
    answer.visual.summaryTokens?.filter((t) => t.type !== 'inferred'),
  ),
)
const preferredDomain = answer.visual.domain?.toLowerCase()
const domain = answer.visual.domain
const subject = answer.visual.summary.subject
const contentReference = answer.visual.contentReference
const heroProps = getHeroProps({ imageAlt: query, response: answer })
const meta = {
  title: title(query),
  description: description(answer),
  canonical: {
    url: createAskPath({
      domain: preferredDomain || '',
      query,
    }),
    rewrite: true,
  },
  pageType: 'ask',
  facebook: {
    imageUrl:
      heroProps?.imageUrl &&
      imageForgeUrl({
        url: heroProps.imageUrl,
        bgColor: subject.colors?.background,
        type: 'facebook',
      }),
  },
  twitter: {
    imageUrl:
      heroProps?.imageUrl &&
      imageForgeUrl({
        url: heroProps.imageUrl,
        bgColor: subject.colors?.background,
        type: 'twitter',
      }),
  },
}

const code = await Link.askShortCode(query, preferredDomain || '')

const pageType = (
  answer: GameraResponse,
): AnalyticsPageviewProperties['page_type'] => {
  if (answer.type === 'nlgPromptForMoreInfoVisualChoicesOptional')
    return 'prompt'
  if (answer.visual.detail?.find((d) => d.type === 'standings'))
    return 'standings'
  if (answer.visual.detail?.find((d) => d.type === 'schedule'))
    return 'schedule'
  if (answer.visual.detail?.find((d) => d.type.includes('BoxScore')))
    return 'game'
  return 'ask'
}
---

<Layout
  colors={subject?.colors}
  {meta}
  analytics={{
    is_search: true,
    page_type: pageType(answer),
    page_domain: preferredDomain as AnalyticsPageviewProperties['page_domain'],
    disposition: answer.disposition,
    tokenizationScore: answer.tokenizationScore,
    query,
    contentReference: answer.visual.contentReference,
    subject: answer.visual.summary.subject,
  }}
>
  <Header
    {query}
    {conversationToken}
    {preferredDomain}
    share={preferredDomain
      ? {
          type: 'ask',
          shortCode: code?.short_code,
          query,
          domain: preferredDomain,
        }
      : undefined}
    audioUrl={answer.visual.summary.narrator?.answerWithIntroAudioUrl ||
      answer.visual.summary.narrator?.answerAudioUrl}
  />
  {
    heroProps ? (
      <Hero
        {...heroProps}
        shareUrl={`${process.env.SHORT_LINK_URL}e/${code?.short_code}`}
      />
    ) : null
  }
  <Visuals response={answer} {conversationToken} />
  <Container>
    <Explore
      league={domain === 'EPL' ? 'fc' : preferredDomain}
      additionalQuestions={answer.visual.additionalQuestions}
    />
  </Container>
  {
    preferredDomain && ANSWER_CARDS_ENABLED && (
      <Container>
        <AnswerCards
          league={domain === 'EPL' ? 'fc' : (preferredDomain as LeagueParam)}
          teamId={
            contentReference.questionTags?.teamIds.length > 0
              ? contentReference.questionTags?.teamIds[0]
              : contentReference.answerTags?.teamIds.length > 0
              ? contentReference.answerTags?.teamIds[0]
              : undefined
          }
        />
      </Container>
    )
  }
</Layout>
