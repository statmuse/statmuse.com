---
import numeral from 'numeral'
import { isFinite, isNil, isUndefined, negate, some } from 'lodash-es'
import { min as d3Min, max as d3Max } from 'd3-array'
import { scaleLinear, scaleBand } from 'd3-scale'
import Axis from '@components/axis.astro'
import Panel from '@components/panel.astro'
import type { HTMLAttributes } from 'astro/types'
import type { GameraChart } from '@statmuse/core/gamera'

interface Props extends HTMLAttributes<'svg'> {
  isSuperlative: boolean
  model: GameraChart
}

const isSuperlative = Astro.props.isSuperlative
const isNotNil = negate(isNil)

const isWhite = (hexColorString: string) => hexColorString === '#FFFFFF'

const fillColor = (hexColorString: string) =>
  isWhite(hexColorString) ? '#DDDDDD' : hexColorString

const formatValue = (v: {
  label: string
  y: number | null
  float?: boolean
}) => {
  const { label, y: yValue, float: isFloat } = v

  // check if label is a number greater than 1k
  const numberFromLabel = label && Number(label.replace(',', ''))
  if (
    !isUndefined(label) &&
    isFinite(numberFromLabel) &&
    yValue &&
    yValue > 1000
  )
    return numeral(yValue).format('0.0a')

  // check if label is defined (even empty strings)
  if (!isUndefined(label)) return label

  // if label is undefined and y value is a string return y value as bar label
  if (yValue && typeof yValue === 'string') return yValue

  // last resort is to format the numeric y value as bar label
  return isFloat || (yValue && yValue >= 1000)
    ? numeral(yValue).format('0.0a')
    : numeral(yValue).format('0 a')
}

const tickFormat = (label: string | number) => {
  const labels = label.toString().split('|')
  return labels.length === 1 ? labels[0] : labels[1]
}

const truncate = (str: string) => {
  const max = 10
  return str.length > max ? str.substr(0, max - 1) + 'â€¦' : str
}

const totalHeight = 250 // totalWidth * ratio
const categoryCount = Astro.props.model.categories.length
const categories = Astro.props.model.categories
  .map((cat) => ({
    ...cat,
    nameLines: cat.nameLines
      .map(truncate)
      .slice(
        cat.nameLines.length > 1 && isSuperlative ? 1 : 0,
        isSuperlative ? undefined : 1,
      ),
  }))
  .slice(0, categoryCount)
const categoryWidth = 42 // totalWidth / categoryCount
const totalWidth = categoryCount * categoryWidth

const showLegend = Astro.props.model.series.length > 1

const margin = {
  top: 0,
  right: 10,
  bottom: 50,
  left: 10,
}
const chartWidth = totalWidth - margin.left - margin.right
const chartHeight = totalHeight - margin.top - margin.bottom

const min =
  d3Min(Astro.props.model.series, (s) => d3Min(s.data, (d) => d.y)) ?? 0
const max =
  d3Max(Astro.props.model.series, (s) => d3Max(s.data, (d) => d.y)) ?? 0
const lowerBoundDomain = min < 0 ? min : 0
const upperBoundDomain = max < 0 ? 0 : max

const x0 = scaleBand()
  .rangeRound([0, chartWidth]) // margin between groups
  .paddingInner(0.15)
  // .padding(0.15)
  .domain(
    categories.map((cat, index) =>
      cat.nameLines
        ? `${index}|${cat.nameLines.join('<br>')}`
        : `${index}|${cat}`,
    ),
  )

const x1 = scaleBand()
  .domain(Astro.props.model.series.map((s) => s.name))
  .rangeRound([0, x0.bandwidth()]) // margin between bars within a group
  .padding(0.1)

const y = scaleLinear()
  .range([chartHeight - (min < 0 ? 30 : 0), 30])
  .clamp(true)
  .domain([lowerBoundDomain, upperBoundDomain])

const series = Astro.props.model.series.map((s) => {
  return {
    ...s,
    float: some(
      s.data.filter((d) => d.y).map((d) => d.y.toString()),
      (s) => s.indexOf('.') > -1,
    ),
  }
})

type Record = {
  category: { nameLines: string[] }
  categoryKey: string
  values: Value[]
}

type Value = {
  nameLines?: string[]
  y: number | null
  label: string
  color?: string
  series?: string
  float?: boolean
}

const data: Record[] = []
categories.forEach((cat, i) => {
  const record: Record = {
    category: cat,
    categoryKey: cat.nameLines
      ? `${i}|${cat.nameLines.join('<br>')}`
      : `${i}|${cat}`,
    values: [],
  }
  series.forEach((s) => {
    if (s.data[i]) {
      const v = s.data[i]
      v.color = v.color || s.color
      v.series = s.name
      v.float = s.float
      record.values.push(v)
    } else {
      record.values.push({ series: s.name, y: null, label: '' })
    }
  })
  data.push(record)
})
---

<Panel class={Astro.props.class}>
  <div class="relative">
    <div class="relative overflow-x-scroll no-scrollbar -mx-2 text-inherit">
      <svg
        id="chart"
        height={chartHeight}
        style={{
          paddingLeft: margin.left,
          paddingTop: margin.top,
          paddingRight: margin.right,
          paddingBottom: margin.bottom,
          overflow: 'visible',
        }}
        viewBox={`0 0 ${chartWidth} ${chartHeight}`}
      >
        <Axis
          orientation="bottom"
          width={chartWidth}
          height={Math.ceil(chartHeight)}
          scaleBand={x0}
          {tickFormat}
          angle={true}
        />
        {
          data.map((d, ix) => (
            <g transform={`translate(${x0(d.categoryKey)}, -1)`}>
              {d.values.map((v, i) => {
                // console.log(v);
                return isNotNil(v.y) ? (
                  <g>
                    <rect
                      width={x1.bandwidth()}
                      x={x1(v.series!)}
                      y={y(Math.max(0, v.y!))}
                      height={Math.abs(y(v.y!) - y(0))}
                      fill={fillColor(v.color!)}
                    />
                    <text
                      class="fill-current"
                      style={{
                        display: 'block',
                        fontSize: 14,
                      }}
                      y={
                        y(Math.max(0, v.y!)) +
                        (v.y! < 0 ? Math.abs(y(v.y!) - y(0)) + 10 : -10)
                      }
                      x={(x1(v.series ?? '') || 0) + x1.bandwidth() / 2}
                      dy=".35em"
                      text-anchor="middle"
                    >
                      {formatValue(v)}
                    </text>
                  </g>
                ) : (
                  <rect />
                )
              })}
            </g>
          ))
        }
      </svg>
    </div>
    {
      showLegend ? (
        <div class="pt-2.5 pb-6 -mr-5">
          <div class="text-center my-0 mx-auto">
            {Astro.props.model.series.slice().map((series) => (
              <div class="mr-5 inline-flex">
                <div
                  class="w-[18px] h-[18px]"
                  style={{ background: fillColor(series.color) }}
                />
                <span class="ml-[5px]">{series.name}</span>
              </div>
            ))}
          </div>
        </div>
      ) : (
        ''
      )
    }
  </div>
</Panel>
