---
import ElephantPlus from '@components/icons/elephant-plus.astro'
---

<div class="relative">
  <div style={{ maxHeight: '898px', overflow: 'hidden' }} data-accordion>
    <slot />
  </div>
  <div
    class="hidden absolute bottom-5 left-1/2 -translate-x-1/2"
    data-subscribe-cta
  >
    <a
      href="/auth/signup"
      class="flex gap-2 items-center w-fit py-3 px-4 bg-primary text-white text-lg rounded-md"
    >
      <span class="shrink-0 mt-[1px]">Unlock 2x data</span>
      <ElephantPlus color="#fff" class="w-10" />
    </a>
  </div>
  <div class="hidden border-b border-[#c7c8ca] py-1" data-expand-btn>
    <a href="#" class="text-primary flex items-center justify-center gap-2">
      Show more
      <span
        class="w-[18px] h-[18px] bg-primary bg-[url('/icons/arrow.svg')] bg-[length:85%] bg-center rounded-full rotate-180"
      >
      </span>
    </a>
  </div>
  <div class="hidden border-b border-[#c7c8ca] py-1" data-collapse-btn>
    <a href="#" class="text-primary flex items-center justify-center gap-2">
      Show less
      <span
        class="w-[18px] h-[18px] bg-primary bg-[url('/icons/arrow.svg')] bg-[length:85%] bg-center rounded-full"
      >
      </span>
    </a>
  </div>
</div>
<script>
  import { session } from '@lib/session-store'
  const freeRowLimit = 25

  document.addEventListener('astro:page-load', () => {
    session.subscribe((s) => {
      if (s) {
        if (s.type === 'user' && s.properties.subscriptionStatus === 'active') {
          document.querySelectorAll('table').forEach((table) => {
            const numRows = table.querySelectorAll('tbody tr').length
            if (numRows > freeRowLimit + 3) {
              const expandBtn = table
                .closest('[data-accordion]')
                ?.parentElement?.querySelector<HTMLElement>('[data-expand-btn]')
              const collapseBtn = table
                .closest('[data-accordion]')
                ?.parentElement?.querySelector<HTMLElement>(
                  '[data-collapse-btn]',
                )
              if (expandBtn) {
                expandBtn.classList.remove('hidden')
                expandBtn.addEventListener('click', (e) => {
                  e.preventDefault()
                  const accordion = table.closest<HTMLElement>(
                    '[data-accordion]',
                  ) as HTMLElement
                  accordion.style.maxHeight = ''
                  expandBtn.classList.add('hidden')
                  collapseBtn?.classList.remove('hidden')
                })
              }
              if (collapseBtn) {
                collapseBtn.addEventListener('click', (e) => {
                  e.preventDefault()
                  const accordion = table.closest<HTMLElement>(
                    '[data-accordion]',
                  ) as HTMLElement
                  accordion.style.maxHeight = '898px'
                  collapseBtn.classList.add('hidden')
                  expandBtn?.classList.remove('hidden')
                })
              }
            }
          })
        } else {
          document.querySelectorAll('table').forEach((table) => {
            const numRows = table.querySelectorAll('tbody tr').length
            if (numRows > freeRowLimit) {
              const subscribeCta = table
                .closest('[data-accordion]')
                ?.parentElement?.querySelector<HTMLElement>(
                  '[data-subscribe-cta]',
                )
              if (subscribeCta) {
                subscribeCta.classList.remove('hidden')
              }
            }
          })
        }
      }
    })
  })
</script>
