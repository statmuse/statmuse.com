---
import { groupBy } from 'remeda'
import {
  GameraMlbBoxScore,
  getUrlForEntity,
  MlbHistoricalBoxScore,
} from '@statmuse/core/gamera'
import type { HTMLAttributes } from 'astro/types'
import Tabs from '@components/tabs.astro'
import TabPanel from '@components/tab-panel.astro'
import Grid from '@components/grid.astro'
import Image from '@components/image.astro'

interface Props extends HTMLAttributes<'div'> {
  data?: GameraMlbBoxScore
  detail?: MlbHistoricalBoxScore
}

if (!Astro.props.data && !Astro.props.detail)
  throw new Error('Must provide data or detail')

const data = Astro.props.data
const boxScoreData =
  data?.visual.detail[0] ?? (Astro.props.detail as MlbHistoricalBoxScore)
const homeTeam = boxScoreData.homeTeam
const awayTeam = boxScoreData.awayTeam

const homeTeamUrl = getUrlForEntity(homeTeam.entity)
const awayTeamUrl = getUrlForEntity(awayTeam.entity)

const plays = boxScoreData.scoringSummary
const innings = Object.entries(groupBy(plays, (p) => p.inning))
---

<div class="w-full max-w-3xl mx-auto text-[#333]">
  <h3 class="font-semibold bg-[#e4f2ff] rounded-sm px-3 py-2 w-fit">Final</h3>
  <div>
    <div class="flex items-center mb-6">
      <a title={awayTeam.name} href={awayTeamUrl}>
        <Image
          src={awayTeam.logoUrl}
          alt={awayTeam.abbrev}
          class="w-24 h-24 object-contain"
          width={100}
          height={100}
          loading="eager"
        />
      </a>
      <div class="flex-1 ml-5">
        <a title={awayTeam.name} href={awayTeamUrl}>
          <h1 class="font-semibold text-2xl md:text-3xl">{awayTeam.name}</h1>
        </a>
        <p class="font-semibold md:text-xl">{awayTeam.record}</p>
      </div>
      <h2 class="font-semibold text-5xl">{awayTeam.score}</h2>
    </div>
    <div class="flex items-center mb-6">
      <a title={homeTeam.name} href={homeTeamUrl}>
        <Image
          class="w-24 h-24 object-contain"
          src={homeTeam.logoUrl}
          alt={homeTeam.abbrev}
          width={100}
          height={100}
          loading="eager"
        />
      </a>
      <div class="flex-1 ml-5">
        <a title={homeTeam.name} href={homeTeamUrl}>
          <h1 class="font-semibold text-2xl md:text-3xl">{homeTeam.name}</h1>
        </a>
        <p class="font-semibold md:text-xl">{homeTeam.record}</p>
      </div>
      <h2 class="font-semibold text-5xl">{homeTeam.score}</h2>
    </div>
  </div>

  <div class="flex py-0.5 border border-[#e4e4e4] rounded-sm">
    {
      boxScoreData.lineScore.columns.map((column, i) => (
        <div
          class:list={{
            'first:flex-1 divide-y divide-[#e4e4e4] text-center first:text-left': true,
            'border-r border-[#e4e4e4]': i === 0 || i === 9,
          }}
        >
          <p
            class="p-2.5 text-xs whitespace-pre md:text-base text-[#a8a8a8]"
            set:text={column.title || ' '}
          />
          {boxScoreData.lineScore.rows.map((row) => (
            <p class="p-2.5 text-xs md:text-base font-semibold">
              {row[column.rowItemKey].entity ? (
                <a
                  title={row[column.rowItemKey].display}
                  href={getUrlForEntity(row[column.rowItemKey].entity!)}
                  set:text={row[column.rowItemKey].display}
                />
              ) : (
                row[column.rowItemKey].display
              )}
            </p>
          ))}
        </div>
      ))
    }
  </div>

  <div class="text-sm md:text-base">
    <Tabs titles={['Summary', 'Player Stats']}>
      <TabPanel title="Summary">
        <div>
          {
            innings.map(([inning, plays]) => (
              <div class="border-b border-[#e4e4e4]">
                <div class="flex text-[#a8a8a8] border-b border-[#e4e4e4]">
                  <p class="flex-1 py-1">{inning}</p>
                  <p class="text-center py-1 w-16">{awayTeam.abbrev}</p>
                  <p class="text-center py-1 w-16">{homeTeam.abbrev}</p>
                </div>
                {plays.map((play) => (
                  <div class="flex py-1.5">
                    <Image
                      title={play.team}
                      src={
                        play.team === awayTeam.name
                          ? awayTeam.logoUrl
                          : homeTeam.logoUrl
                      }
                      alt={play.team}
                      class="w-7 h-7 mt-2 object-contain"
                      width={28}
                      height={28}
                    />
                    <p class="flex-1 py-2 px-4">{play.description}</p>
                    <>
                      <p class="w-16 text-center py-2 px-4">
                        {play.awayTeamScore}
                      </p>
                      <p class="w-16 text-center py-2 px-4">
                        {play.homeTeamScore}
                      </p>
                    </>
                  </div>
                ))}
              </div>
            ))
          }
        </div>
      </TabPanel>
      <TabPanel title="Player Stats">
        <Tabs secondary titles={[awayTeam.name, homeTeam.name]}>
          <TabPanel title={awayTeam.name} class="space-y-5">
            <Grid
              data={boxScoreData.stats.awayTeam.batterStats}
              alternateStyle
            />
            <Grid
              data={boxScoreData.stats.awayTeam.pitcherStats}
              alternateStyle
            />
          </TabPanel>
          <TabPanel title={homeTeam.name} class="space-y-5">
            <Grid
              data={boxScoreData.stats.homeTeam.batterStats}
              alternateStyle
            />
            <Grid
              data={boxScoreData.stats.homeTeam.pitcherStats}
              alternateStyle
            />
          </TabPanel>
        </Tabs>
      </TabPanel>
    </Tabs>
  </div>
</div>
