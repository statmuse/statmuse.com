---
import dayjs from 'dayjs'
import utc from 'dayjs/plugin/utc'
import timezone from 'dayjs/plugin/timezone'
import {
  mlbGameScore,
  type GameraDomain,
  type GameraTeamReference,
} from '@statmuse/core/gamera'
import { getGameData, getGames, getPlayByPlay } from '@lib/gamera'
import Panel from '@components/panel.astro'
import ScheduledGame from './scheduled-game.astro'
import CompletedGame from './completed-game.astro'
import MlbLiveGame from './mlb-live-game.svelte'
import * as store from './stores'
import State from './state.svelte'
import Realtime from './realtime.svelte'

dayjs.extend(utc)
dayjs.extend(timezone)

interface Props {
  now: string
  date: string | null
  domain: Extract<GameraDomain, 'MLB' | 'NFL'>
}

const { date: dateString, domain, now } = Astro.props

console.log('now: ', now)

const date = dateString
  ? dayjs(dateString).tz(Astro.locals.timezone, true)
  : dayjs(dayjs(now).tz(Astro.locals.timezone).format('YYYY-MM-DD')).tz(
      Astro.locals.timezone,
      true,
    )

const response = await getGames({
  context: Astro,
  domain,
  startGameTimestamp: date.toISOString(),
  endGameTimestamp: date.add(1, 'day').toISOString(),
  gameState: ['completed', 'inProgress', 'scheduled'],
})

if (!response) return undefined

const { teams } = response

const games = [...response.games].reverse()

const teamMap = teams.reduce<Record<number, GameraTeamReference | undefined>>(
  (acc, t) => ({ ...acc, [t.teamId]: t }),
  {},
)

const completedGames = games.filter((g) => g.type === 'completed')
const scheduledGames = games.filter((g) => g.type === 'scheduled')
const liveGames = games.filter((g) => g.type === 'inProgress')

const liveGameData = await Promise.all(
  liveGames.map(async (g) => {
    const [gameData, playByPlay] = await Promise.allSettled([
      getGameData({ context: Astro, domain, gameId: g.gameId }),
      getPlayByPlay({ context: Astro, domain, gameId: g.gameId }),
    ])
    return {
      gameData: gameData.status === 'fulfilled' ? gameData.value : undefined,
      playByPlay:
        playByPlay.status === 'fulfilled' ? playByPlay.value : undefined,
    }
  }),
)

for (const game of liveGameData) {
  store.addMlbGame(mlbGameScore(game))
}
---

{
  (scheduledGames.length > 0 ||
    completedGames.length > 0 ||
    liveGames.length > 0) && (
    <div class="hidden md:grid grid-cols-[repeat(auto-fit,_minmax(300px,_1fr))] gap-3">
      {liveGames.map((game) => (
        <Panel class="!p-0">
          <MlbLiveGame
            client:load
            {game}
            awayTeam={teamMap[game.awayTeam.teamId]}
            homeTeam={teamMap[game.homeTeam.teamId]}
          />
        </Panel>
      ))}
      {scheduledGames.map((game) => (
        <Panel class="!p-0">
          <ScheduledGame
            {game}
            {domain}
            awayTeam={teamMap[game.awayTeamId]}
            homeTeam={teamMap[game.homeTeamId]}
          />
        </Panel>
      ))}
      {completedGames.map((game) => (
        <Panel class="!p-0">
          <CompletedGame
            {game}
            {domain}
            awayTeam={teamMap[game.awayTeam.teamId]}
            homeTeam={teamMap[game.homeTeam.teamId]}
          />
        </Panel>
      ))}
    </div>
  )
}

{
  (scheduledGames.length > 0 ||
    completedGames.length > 0 ||
    liveGames.length > 0) && (
    <div class="md:hidden flex flex-col gap-3">
      {liveGames.length > 0 && (
        <Fragment>
          <Panel class="!p-0">
            <div class="divide-y divide-gray-6 dark:divide-gray-4 [&_astro-island]:block">
              {liveGames.map((game) => (
                <MlbLiveGame
                  client:load
                  {game}
                  awayTeam={teamMap[game.awayTeam.teamId]}
                  homeTeam={teamMap[game.homeTeam.teamId]}
                />
              ))}
            </div>
          </Panel>
          <State
            client:only="svelte"
            games={liveGameData.map((g) => mlbGameScore(g))}
          />
          <Realtime
            client:only="svelte"
            connectionParams={liveGames.map((g) => ({
              domain,
              gameId: g.id,
              topic: 'score',
            }))}
          />
        </Fragment>
      )}

      {scheduledGames.length > 0 && (
        <Panel class="!p-0">
          <div class="divide-y divide-gray-6 dark:divide-gray-4">
            {scheduledGames.map((game) => (
              <ScheduledGame
                {game}
                {domain}
                awayTeam={teamMap[game.awayTeamId]}
                homeTeam={teamMap[game.homeTeamId]}
              />
            ))}
          </div>
        </Panel>
      )}

      {completedGames.length > 0 && (
        <Panel class="!p-0">
          <div class="divide-y divide-gray-6 dark:divide-gray-4">
            {completedGames.map((game) => (
              <CompletedGame
                {game}
                {domain}
                awayTeam={teamMap[game.awayTeam.teamId]}
                homeTeam={teamMap[game.homeTeam.teamId]}
              />
            ))}
          </div>
        </Panel>
      )}
    </div>
  )
}

{
  scheduledGames.length === 0 &&
    completedGames.length === 0 &&
    liveGames.length === 0 && (
      <Panel class="text-center py-24">No Games Scheduled</Panel>
    )
}
