---
import dayjs from 'dayjs'
import utc from 'dayjs/plugin/utc'
import timezone from 'dayjs/plugin/timezone'
import type { GameraTeamReference } from '@statmuse/core/gamera'
import { getGames } from '@lib/gamera'
import Panel from '@components/panel.astro'
import ScheduledGame from './scheduled-game.astro'
import CompletedGame from './completed-game.astro'

dayjs.extend(utc)
dayjs.extend(timezone)

interface Props {
  date: string
  'server:defer'?: boolean
}

const { date: dateString } = Astro.props

const date = dayjs(dateString).tz(Astro.locals.timezone, true)

const prevDay = date.subtract(1, 'day').utc().format('YYYY-MM-DD')
const nextDay = date.add(1, 'day').utc().format('YYYY-MM-DD')

const mlbGamesResponse = await getGames({
  context: Astro,
  domain: 'MLB',
  startGameDate: prevDay,
  endGameDate: nextDay,
  gameState: ['completed', 'inProgress', 'scheduled'],
})

if (!mlbGamesResponse) return undefined

const { games: mlbGames, teams: mlbTeams } = mlbGamesResponse

const mlbTeamMap = mlbTeams.reduce<
  Record<number, GameraTeamReference | undefined>
>((acc, t) => ({ ...acc, [t.teamId]: t }), {})

const mlbCompletedGames = mlbGames
  .filter((g) => g.type === 'completed')
  .filter(
    (g) => dayjs(g.gameDate).tz(Astro.locals.timezone).date() === date.date(),
  )
  .sort((a, b) => b.gameDate.localeCompare(a.gameDate))

const mlbScheduledGames = mlbGames
  .filter((g) => g.type === 'scheduled')
  .filter(
    (g) =>
      dayjs(g.gameTimestamp).tz(Astro.locals.timezone).date() === date.date(),
  )
  .sort((a, b) => a.gameTimestamp.localeCompare(b.gameTimestamp))
---

{
  (mlbScheduledGames.length > 0 || mlbCompletedGames.length > 0) && (
    <Panel class="!p-0">
      <h3 class="my-2 mx-3 font-semibold">MLB</h3>
      <div class="divide-y divide-gray-6 dark:divide-gray-4">
        {mlbScheduledGames.map((game) => (
          <ScheduledGame
            {game}
            domain="MLB"
            awayTeam={mlbTeamMap[game.awayTeamId]}
            homeTeam={mlbTeamMap[game.homeTeamId]}
          />
        ))}
        {mlbCompletedGames.map((game) => (
          <CompletedGame
            {game}
            domain="MLB"
            awayTeam={mlbTeamMap[game.awayTeam.teamId]}
            homeTeam={mlbTeamMap[game.homeTeam.teamId]}
          />
        ))}
      </div>
    </Panel>
  )
}
