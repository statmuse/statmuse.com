---
import dayjs from 'dayjs'
import utc from 'dayjs/plugin/utc'
import timezone from 'dayjs/plugin/timezone'
import { mlbGameScore, type GameraTeamReference } from '@statmuse/core/gamera'
import { getGameData, getGames, getPlayByPlay } from '@lib/gamera'
import Panel from '@components/panel.astro'
import ScheduledGame from './scheduled-game.astro'
import CompletedGame from './completed-game.astro'
import MlbLiveGame from './mlb-live-game.svelte'
import * as store from './stores'
import State from './state.svelte'
import Realtime from './realtime.svelte'

dayjs.extend(utc)
dayjs.extend(timezone)

interface Props {
  date: string
}

const { date: dateString } = Astro.props

const date = dayjs(dateString).tz(Astro.locals.timezone, true)

const prevDay = date.subtract(1, 'day').utc().format('YYYY-MM-DD')
const nextDay = date.add(1, 'day').utc().format('YYYY-MM-DD')

const mlbGamesResponse = await getGames({
  context: Astro,
  domain: 'MLB',
  startGameDate: prevDay,
  endGameDate: nextDay,
  gameState: ['completed', 'inProgress', 'scheduled'],
})

if (!mlbGamesResponse) return undefined

const { games: mlbGames, teams: mlbTeams } = mlbGamesResponse

const mlbTeamMap = mlbTeams.reduce<
  Record<number, GameraTeamReference | undefined>
>((acc, t) => ({ ...acc, [t.teamId]: t }), {})

const mlbCompletedGames = mlbGames
  .filter((g) => g.type === 'completed')
  .filter(
    (g) => dayjs(g.gameDate).tz(Astro.locals.timezone).date() === date.date(),
  )
  .sort((a, b) => b.gameDate.localeCompare(a.gameDate))

const mlbScheduledGames = mlbGames
  .filter((g) => g.type === 'scheduled')
  .filter(
    (g) =>
      dayjs(g.gameTimestamp).tz(Astro.locals.timezone).date() === date.date(),
  )
  .sort((a, b) => a.gameTimestamp.localeCompare(b.gameTimestamp))

const mlbLiveGames = mlbGames
  .filter((g) => g.type === 'inProgress')
  .filter(
    (g) => dayjs(g.gameDate).tz(Astro.locals.timezone).date() === date.date(),
  )
  .sort((a, b) => a.gameDate.localeCompare(b.gameDate))

const mlbLiveGameData = await Promise.all(
  mlbLiveGames.map(async (g) => {
    const [gameData, playByPlay] = await Promise.allSettled([
      getGameData({ context: Astro, gameId: g.gameId }),
      getPlayByPlay({ context: Astro, gameId: g.gameId }),
    ])
    return {
      gameData: gameData.status === 'fulfilled' ? gameData.value : undefined,
      playByPlay:
        playByPlay.status === 'fulfilled' ? playByPlay.value : undefined,
    }
  }),
)

for (const game of mlbLiveGameData) {
  store.addMlbGame(mlbGameScore(game))
}
---

{
  (mlbScheduledGames.length > 0 ||
    mlbCompletedGames.length > 0 ||
    mlbLiveGames.length > 0) && (
    <Panel class="!p-0">
      <h3 class="my-2 mx-3 font-semibold">MLB</h3>
      <div class="divide-y divide-gray-6 dark:divide-gray-4">
        {mlbLiveGames.map((game) => (
          <MlbLiveGame
            {game}
            client:load
            domain="MLB"
            awayTeam={mlbTeamMap[game.awayTeam.teamId]}
            homeTeam={mlbTeamMap[game.homeTeam.teamId]}
          />
        ))}
        {mlbScheduledGames.map((game) => (
          <ScheduledGame
            {game}
            domain="MLB"
            awayTeam={mlbTeamMap[game.awayTeamId]}
            homeTeam={mlbTeamMap[game.homeTeamId]}
          />
        ))}
        {mlbCompletedGames.map((game) => (
          <CompletedGame
            {game}
            domain="MLB"
            awayTeam={mlbTeamMap[game.awayTeam.teamId]}
            homeTeam={mlbTeamMap[game.homeTeam.teamId]}
          />
        ))}
      </div>
    </Panel>
  )
}
{
  mlbLiveGameData.length > 0 && (
    <State
      client:only="svelte"
      games={mlbLiveGameData.map((g) => mlbGameScore(g))}
    />
  )
}
{
  mlbLiveGames.length > 0 && (
    <Realtime
      client:only="svelte"
      connectionParams={mlbLiveGames.map((g) => ({
        domain: 'MLB',
        gameId: g.id,
        topic: 'score',
      }))}
    />
  )
}
