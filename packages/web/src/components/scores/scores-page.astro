---
import Base from '@layouts/base.astro'
import dayjs from 'dayjs'
import { range } from 'lodash-es'
import type { GameraDomain } from '@statmuse/core/gamera'
import Games from './games.astro'
import AllGames from './all-games.astro'
import Hero from './hero.astro'
import { Caching } from '@lib/caching'
import type { AnalyticsPageviewProperties } from '@lib/analytics'

interface Props {
  domain?: Extract<GameraDomain, 'MLB'>
}

const { domain } = Astro.props

const dateParam = Astro.url.searchParams.get('date')
const date = dateParam ? dayjs(dateParam) : undefined
const now = dayjs()

const days: string[] = []

for (const relativeDay of range(-7, 7)) {
  if (relativeDay < 0) {
    days.push(
      (date ?? now).subtract(Math.abs(relativeDay), 'day').format('YYYY-MM-DD'),
    )
  } else {
    days.push((date ?? now).add(relativeDay, 'day').format('YYYY-MM-DD'))
  }
}

const next = (date ?? now).add(1, 'day').format('YYYY-MM-DD')
const previous = (date ?? now).subtract(1, 'day').format('YYYY-MM-DD')

Caching.swr(Astro, {
  maxage: Astro.url.searchParams.get('date') ? 43200 : 1800,
  revalidate: Astro.url.searchParams.get('date') ? 86400 : 14400,
})

const meta = {
  title: `${domain} Scores`,
  description: `Live scores, results and schedule for the ${
    dateParam ?? now.format('YYYY')
  } ${domain} season.`,
}
---

<Base
  {meta}
  analytics={{
    page_domain:
      (domain?.toLowerCase() as AnalyticsPageviewProperties['page_domain']) ??
      'sports',
    page_type: 'schedule',
    is_search: true,
  }}
  hideHeader={Astro.locals.platform === 'native'}
  colors={{ foreground: '#fff', background: '#00c1d8' }}
>
  <Hero {days} selectedDate={dateParam} {domain} />
  {
    domain ? (
      <Games {domain} now={now.toISOString()} date={dateParam} server:defer />
    ) : (
      <AllGames now={now.toISOString()} date={dateParam} server:defer />
    )
  }
</Base>

<script define:vars={{ next, previous }}>
  document.addEventListener('swipe-left', () => {
    const url = new URL(window.location)
    const params = new URLSearchParams(url.search)
    params.set('date', next)
    url.search = params.toString()
    window.location.href = url.toString()
  })
  document.addEventListener('swipe-right', () => {
    const url = new URL(window.location)
    const params = new URLSearchParams(url.search)
    params.set('date', previous)
    url.search = params.toString()
    window.location.href = url.toString()
  })
</script>
