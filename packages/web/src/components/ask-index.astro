---
import Layout from '@layouts/base.astro'
import TrendingMore from '@components/trending-more.astro'
import {
  ASK_LIMIT,
  type AskForIndex,
  type FinanceAskForIndex,
} from '@statmuse/core/ask'
import {
  askPath,
  getBgColor,
  getImage,
  paginate,
  type SearchParams,
} from '@lib/asks'
import type { AnalyticsPageviewProperties } from '@lib/analytics'
import tailwindConfig from '../../tailwind.config.ts'
import type { NavLink } from 'src/types'

const colors = tailwindConfig.theme.extend.colors

interface Props {
  selected?: string
  asks: AskForIndex[] | FinanceAskForIndex[]
  searchParams: SearchParams
}

const { selected, searchParams } = Astro.props
let asks = Astro.props.asks

const overflow = asks.length > ASK_LIMIT

if (overflow && (searchParams.p || searchParams.page === 'last')) {
  asks = asks.slice(1)
} else {
  asks = asks.slice(0, ASK_LIMIT)
}

const paginationOptions = paginate(asks, searchParams, overflow)

const links: NavLink[] = [
  {
    text: 'All',
    param: 'all',
    href: '/questions',
  },
  { text: 'FC', param: 'fc' },
  { text: 'NBA', param: 'nba' },
  { text: 'NFL', param: 'nfl' },
  { text: 'NHL', param: 'nhl' },
  { text: 'MLB', param: 'mlb' },
  { text: 'PGA', param: 'pga' },
  { text: 'Money', param: 'money' },
]

const items = asks.map((ask) => ({
  title: ask.query,
  uri: askPath(ask),
  images: [getImage(ask)!],
  background: getBgColor(ask)!,
  foreground: colors.gray['8'],
  count: 1,
}))

const title = 'Trending Real-time'

const meta = {
  title,
  description: `Instant answers to your ${
    selected === 'fc' ? 'Premier League' : selected?.toUpperCase() ?? 'sports'
  } questions. Stats, scores, schedules, standings, recaps and more â€” just ask.`,
  pageType: 'question',
}
---

<Layout
  analytics={{
    page_type: 'trending',
    page_domain:
      selected === 'money'
        ? 'finance'
        : selected === 'fc'
        ? 'epl'
        : selected === 'all'
        ? 'sports'
        : (selected?.toLowerCase() as AnalyticsPageviewProperties['page_domain']),
  }}
  {meta}
  colors={{ foreground: colors.gray['8'], background: colors.teal }}
  money={selected === 'money'}
  preferredDomain={selected}
  hero={{
    content: title,
  }}
  navProps={{
    links,
    selected,
    href: (l) => `/${l}/questions${Astro.url.search}`,
  }}
>
  <TrendingMore {items} />

  <ul class="text-center my-10 space-x-2">
    <li class="inline-block">
      <a
        href={Astro.url.pathname}
        class={`block p-1 border-b-2 border-transparent hover:border-secondary hover:no-underline ${
          ['first', 'first-last'].includes(paginationOptions.current_page || '')
            ? 'text-black pointer-events-none'
            : ''
        }`}
      >
        &laquo; First
      </a>
    </li>
    <li class="inline-block">
      <a
        href={Astro.url.pathname +
          '?' +
          new URLSearchParams({ p: paginationOptions.p || '' })}
        class={`block p-1 border-b-2 border-transparent hover:border-secondary hover:no-underline ${
          paginationOptions.p ? '' : 'text-[#c5c9cc] pointer-events-none'
        }`}
      >
        &lt; Previous
      </a>
    </li>
    <li class="inline-block">
      <a
        href={Astro.url.pathname +
          '?' +
          new URLSearchParams({ n: paginationOptions.n || '' })}
        class={`block p-1 border-b-2 border-transparent hover:border-secondary hover:no-underline ${
          paginationOptions.n ? '' : 'text-[#c5c9cc] pointer-events-none'
        }`}
      >
        Next &gt;
      </a>
    </li>
    <li class="inline-block">
      <a
        href={Astro.url.pathname + '?' + new URLSearchParams({ page: 'last' })}
        class={`block p-1 border-b-2 border-transparent hover:border-secondary hover:no-underline ${
          ['last', 'first-last'].includes(paginationOptions.current_page || '')
            ? 'text-black pointer-events-none'
            : ''
        }`}
      >
        Last &raquo;
      </a>
    </li>
  </ul>
</Layout>
