---
import Layout from '@layouts/main.astro'
import Header from '@components/header.astro'
import Container from '@components/container.astro'
import { ASK_LIMIT, type FinanceAsk, type Ask } from '@statmuse/core/asks'
import { createAskPath } from '@lib/path'
import { formatDate, utc } from '@statmuse/core/time'
import type { Metadata } from '@lib/meta'

interface Props {
  domain?: string
  fetchAsks: (params: SearchParams) => Promise<Ask[] | FinanceAsk[]>
  meta?: Metadata
}

const { domain, fetchAsks, meta } = Astro.props

const dateFromString = (x: string) => {
  const date = utc(x)
  if (date.toString() !== 'Invalid Date') {
    return date
  }
  return
}

const parseSearchParams = (params: URLSearchParams) => {
  const next = (params.get('n') || '').replaceAll('_', ':')
  const previous = (params.get('p') || '').replaceAll('_', ':')
  const page = params.get('page') || undefined
  return {
    n: dateFromString(next),
    p: dateFromString(previous),
    page,
  }
}

type SearchParams = ReturnType<typeof parseSearchParams>

type PaginationOptions = {
  current_page?: 'first-last' | 'first' | 'last'
  n?: string
  p?: string
}

const paginate = (
  asks: Ask[] | FinanceAsk[],
  { n, p, page }: SearchParams,
  overflow: boolean
): PaginationOptions => {
  if (asks.length === 0) return {}

  if (!n && !p && !page) {
    return {
      current_page: overflow ? 'first' : 'first-last',
      n: overflow
        ? asks[asks.length - 1].last_web_search_at
            ?.toISOString()
            .replaceAll(':', '_')
        : undefined,
    }
  }

  if (page && page === 'last') {
    return {
      current_page: overflow ? 'last' : 'first-last',
      p: overflow
        ? asks[0].last_web_search_at?.toISOString().replaceAll(':', '_')
        : undefined,
    }
  }

  if (n && !overflow) {
    return {
      current_page: 'last',
      p: asks[0].last_web_search_at?.toISOString().replaceAll(':', '_'),
    }
  }

  if (p && !overflow) {
    return {
      current_page: 'first',
      n: asks[asks.length - 1].last_web_search_at
        ?.toISOString()
        .replaceAll(':', '_'),
    }
  }

  return {
    n: asks[asks.length - 1].last_web_search_at
      ?.toISOString()
      .replaceAll(':', '_'),
    p: asks[0].last_web_search_at?.toISOString().replaceAll(':', '_'),
  }
}

const searchParams = parseSearchParams(Astro.url.searchParams)

let asks = await fetchAsks(searchParams)

const overflow = asks.length > ASK_LIMIT

if (overflow && (searchParams.p || searchParams.page === 'last')) {
  asks = asks.slice(1)
} else {
  asks = asks.slice(0, ASK_LIMIT)
}

const paginationOptions = paginate(asks, searchParams, overflow)

const headline = (title?: string) => {
  if (!title) return 'Trending Searches'

  if (leagues.includes(title.toUpperCase())) {
    return `Trending ${title.toUpperCase()} Searches`
  }

  if (title === 'fantasy') {
    return 'Trending Fantasy Football Searches'
  }

  if (title === 'money') {
    return 'Trending Finance Searches'
  }
}

const createPaginationLink = (
  domain?: string,
  params?: Record<string, string>
) => {
  let link = domain ? `/${domain}/questions` : '/questions'
  if (params) {
    link = link + `?${new URLSearchParams(params).toString()}`
  }
  return link
}

const isAsk = (ask: Ask | FinanceAsk): ask is Ask => 'answer_html' in ask
const getNlg = (ask: Ask | FinanceAsk) =>
  isAsk(ask) ? ask.answer_html : ask.answer_text
const getImage = (ask: Ask | FinanceAsk) =>
  isAsk(ask) ? ask.image_url : ask.answer.visual.summary.subject.imageUrl
const getBgColor = (ask: Ask | FinanceAsk) =>
  isAsk(ask)
    ? ask.hex_background
    : ask.answer.visual.summary.subject.colors.background

const askPath = (ask: Ask | FinanceAsk, domain = '') => {
  if (domain === 'money') {
    return createAskPath({ domain, query: ask.query })
  }
  if (isAsk(ask) && ask.is_fantasy_query) {
    return createAskPath({ domain: 'fantasy', query: ask.query })
  }
  if (isAsk(ask)) {
    return createAskPath({ domain: ask.league_name, query: ask.query })
  }
  return ''
}

const leagues = ['NBA', 'NFL', 'NHL', 'MLB', 'PGA']
---

<Layout {meta}>
  <Header />
  <Container>
    <nav style="margin-top: 15px;">
      <div style="display: flex; gap: 10px;">
        {
          ['All', ...leagues].map((league) => (
            <a
              class={`flex items-center justify-center min-w-[80px] border border-primary rounded-md hover:no-underline hover:text-white hover:bg-primary p-[5px] ${
                league.toLowerCase() === (domain || 'all')
                  ? 'bg-primary text-white'
                  : 'text-primary'
              } %>`}
              href={
                league === 'All'
                  ? '/questions'
                  : `/${league.toLowerCase()}/questions`
              }
              set:html={league}
            />
          ))
        }
      </div>
      <div style="display: flex; gap: 10px; margin-top: 10px;">
        <a
          class={`flex items-center justify-center min-w-[80px] border border-secondary rounded-md hover:no-underline hover:text-white hover:bg-secondary p-[5px] ${
            'fantasy' === domain ? 'bg-secondary text-white' : 'text-secondary'
          } %>`}
          href="/fantasy/questions"
          set:html="Fantasy Football"
        />
        <a
          class={`flex items-center justify-center min-w-[80px] border border-secondary rounded-md hover:no-underline hover:text-white hover:bg-secondary p-[5px] ${
            'money' === domain ? 'bg-secondary text-white' : 'text-secondary'
          } %>`}
          href="/money/questions"
          set:html="Money"
        />
      </div>
    </nav>
  </Container>
  <Container>
    <section>
      <h2 class="text-2xl font-semibold my-5">{headline(domain)}</h2>
      <div class="space-y-5">
        {
          asks.map((ask) => (
            <article class="flex">
              <div
                class="hidden sm:block h-24 w-36 rounded-lg mr-2.5 overflow-hidden"
                style={`background: ${getBgColor(ask)}`}
              >
                <a
                  class="h-full flex justify-center items-end"
                  href={askPath(ask, domain)}
                >
                  <img
                    class="h-[90%]"
                    src={getImage(ask)}
                    alt="player illustration"
                  />
                </a>
              </div>
              <div class="flex-1 flex flex-col">
                <h3 class="text-lg font-semibold">
                  <a href={askPath(ask, domain)}>{ask.query}</a>
                </h3>
                <div class="italic opacity-50">
                  Answered{' '}
                  {formatDate(ask.last_web_search_at as Date, 'MMMM Do, YYYY')}
                </div>
                <div
                  class="flex-1 flex items-center border-l-2 border-secondary pl-1.5"
                  set:html={getNlg(ask)}
                />
              </div>
            </article>
          ))
        }
      </div>
    </section>

    <ul class="text-center my-10 space-x-2">
      <li class="inline-block">
        <a
          href={createPaginationLink(domain)}
          class=`block p-1 border-b-2 border-transparent hover:border-secondary hover:no-underline ${['first', 'first-last'].includes(paginationOptions.current_page || '') ? 'text-black pointer-events-none' : ''}`
        >
          « First
        </a>
      </li>
      <li class="inline-block">
        <a
          href={createPaginationLink(domain, { p: paginationOptions.p || '' })}
          class=`block p-1 border-b-2 border-transparent hover:border-secondary hover:no-underline ${paginationOptions.p ? '' : 'text-[#c5c9cc] pointer-events-none'}`
        >
          &lt; Previous
        </a>
      </li>
      <li class="inline-block">
        <a
          href={createPaginationLink(domain, { n: paginationOptions.n || '' })}
          class=`block p-1 border-b-2 border-transparent hover:border-secondary hover:no-underline ${paginationOptions.n ? '' : 'text-[#c5c9cc] pointer-events-none'}`
        >
          Next &gt;
        </a>
      </li>
      <li class="inline-block">
        <a
          href={createPaginationLink(domain, { page: 'last' })}
          class=`block p-1 border-b-2 border-transparent hover:border-secondary hover:no-underline ${['last', 'first-last'].includes(paginationOptions.current_page || '') ? 'text-black pointer-events-none' : ''}`
        >
          Last »
        </a>
      </li>
    </ul>
  </Container>
</Layout>
