---
import {
  type GameraEplBoxScore,
  type EplHistoricalBoxScore,
  getUrlForEntity,
} from '@statmuse/core/gamera'
import type { HTMLAttributes } from 'astro/types'
import { groupBy, orderBy } from 'lodash-es'
import Grid from '@components/grid.svelte'
import Image from '@components/image.astro'
import TabPanel from '@components/tab-panel.astro'
import Tabs from '@components/tabs.astro'
import TeamStat from '@components/team-stat.astro'
import Goal from '@components/icons/goal.astro'
import Substitution from '@components/icons/substitution.astro'

interface Props extends HTMLAttributes<'div'> {
  data?: GameraEplBoxScore
  detail?: EplHistoricalBoxScore
}

if (!Astro.props.data && !Astro.props.detail)
  throw new Error('Must provide data or detail')

const data = Astro.props.data
const boxScoreData =
  data?.visual.detail[0] ?? (Astro.props.detail as EplHistoricalBoxScore)
const homeTeam = boxScoreData.homeTeam
const homeTeamStats = boxScoreData.teamDetail.homeTeam
const awayTeam = boxScoreData.awayTeam
const awayTeamStats = boxScoreData.teamDetail.awayTeam

const homeTeamUrl = homeTeam.entity ? getUrlForEntity(homeTeam.entity) : ''
const awayTeamUrl = awayTeam.entity ? getUrlForEntity(awayTeam.entity) : ''

const plays = orderBy(
  boxScoreData.gameSummary.map((play) => ({
    ...play,
    minuteRaw: play.minute.split("'").reduce((t, c) => t + Number(c), 0),
  })),
  'minuteRaw',
)
const periods = Object.entries(groupBy(plays, (p) => p.period))
---

<div class="w-full max-w-3xl mx-auto text-[#333]">
  <h3 class="font-bold bg-[#e4f2ff] rounded-sm px-3 py-2 w-fit mb-4">
    Final
  </h3>
  <div>
    <div class="flex items-center mb-6">
      <a title={homeTeam.name} href={homeTeamUrl}>
        <Image
          class="w-24 h-24 object-contain"
          src={homeTeam.logoUrl}
          alt={homeTeam.abbrev}
          width={100}
          height={100}
          loading="eager"
        />
      </a>
      <div class="flex-1 ml-5">
        {
          homeTeamUrl ? (
            <a title={homeTeam.name} href={homeTeamUrl}>
              <h1 class="font-bold text-2xl md:text-3xl">
                {homeTeam.name}
              </h1>
            </a>
          ) : (
            <h1 class="font-bold text-2xl md:text-3xl">{homeTeam.name}</h1>
          )
        }
        <p class="font-bold md:text-2xl">{homeTeam.record}</p>
      </div>
      <h2 class="font-bold text-5xl">{homeTeam.score}</h2>
    </div>
    <div class="flex items-center mb-6">
      <a title={awayTeam.name} href={awayTeamUrl}>
        <Image
          src={awayTeam.logoUrl}
          alt={awayTeam.abbrev}
          class="w-24 h-24 object-contain"
          width={100}
          height={100}
          loading="eager"
        />
      </a>
      <div class="flex-1 ml-5">
        {
          awayTeamUrl ? (
            <a title={awayTeam.name} href={awayTeamUrl}>
              <h1 class="font-bold text-2xl md:text-3xl">
                {awayTeam.name}
              </h1>
            </a>
          ) : (
            <h1 class="font-bold text-2xl md:text-3xl">{awayTeam.name}</h1>
          )
        }
        <p class="font-bold md:text-2xl">{awayTeam.record}</p>
      </div>
      <h2 class="font-bold text-5xl">{awayTeam.score}</h2>
    </div>
  </div>

  <div class="text-sm md:text-base">
    <Tabs titles={['Summary', 'Team Stats', 'Player Stats']}>
      <TabPanel title="Summary">
        <div>
          {
            periods.map(([period, plays]) => (
              <div class="border-b border-[#e4e4e4]">
                <div class="flex text-[#a8a8a8] border-b border-[#e4e4e4]">
                  <p class="flex-1 py-1">{period}</p>
                  <p class="text-center py-1 w-16">{homeTeam.abbrev}</p>
                  <p class="text-center py-1 w-16">{awayTeam.abbrev}</p>
                </div>
                {plays.map((play) => (
                  <div class="flex py-1.5">
                    <Image
                      title={play.team}
                      src={
                        play.team === awayTeam.name
                          ? awayTeam.logoUrl
                          : homeTeam.logoUrl
                      }
                      alt={play.team}
                      class="w-7 h-7 mt-2 object-contain"
                      width={28}
                      height={28}
                    />
                    <p class="flex-1 py-2 px-4 flex items-center">
                      {play.eventType === 'yellow_card' ? (
                        <>
                          <span class="mr-2">{play.minute}</span>
                          <span class="inline-block h-4 w-4 bg-yellow-300  mr-2" />{' '}
                          {play.playerName}
                        </>
                      ) : play.eventType === 'red_card' ? (
                        <>
                          <span class="mr-2">{play.minute}</span>
                          <span class="inline-block h-4 w-4 bg-[#DC2626] mr-2" />{' '}
                          {play.playerName}
                        </>
                      ) : play.eventType === 'yellow_red_card' ? (
                        <>
                          <span class="mr-2">{play.minute}</span>
                          <span class="inline-block h-4 w-4 bg-yellow-300  mr-2" />
                          <span class="inline-block h-4 w-4 bg-[#DC2626] mr-2" />{' '}
                          {play.playerName}
                        </>
                      ) : play.eventType === 'goal' ||
                        play.eventType === 'penalty_goal' ||
                        play.eventType === 'own_goal' ? (
                        <>
                          <span class="mr-2">{play.minute}</span>
                          <Goal
                            class="w-5 mr-2 shrink-0"
                            color={
                              play.eventType === 'own_goal' ? '#ed1c24' : '#000'
                            }
                          />
                          {`${play.playerName}${
                            play.relatedPlayerName
                              ? ' (Assist: ' + play.relatedPlayerName + ')'
                              : ''
                          }`}
                        </>
                      ) : play.eventType === 'substitution' ? (
                        <>
                          <span class="mr-2">{play.minute}</span>
                          <Substitution class="w-5 mr-2 shrink-0" />
                          {`${play.playerName} in, ${play.relatedPlayerName} out`}
                        </>
                      ) : (
                        play.playerName
                      )}
                    </p>
                    <>
                      <p class="w-16 text-center py-2 px-4">
                        {play.homeTeamScore}
                      </p>
                      <p class="w-16 text-center py-2 px-4">
                        {play.awayTeamScore}
                      </p>
                    </>
                  </div>
                ))}
              </div>
            ))
          }
        </div>
      </TabPanel>
      <TabPanel title="Team Stats">
        <div class="flex">
          <p
            class="flex-1 p-2.5 border-b border-[#e4e4e4] font-bold whitespace-nowrap overflow-hidden text-ellipsis"
          >
          </p>
          <p
            class="w-[85px] sm:w-24 py-2.5 text-center font-bold border-b border-[#e4e4e4] whitespace-nowrap overflow-hidden text-ellipsis"
          >
            {homeTeam.shortName || homeTeam.name}
          </p>
          <p
            class="w-[85px] sm:w-24 py-2.5 text-center font-bold border-b border-[#e4e4e4] whitespace-nowrap overflow-hidden text-ellipsis"
          >
            {awayTeam.shortName || awayTeam.name}
          </p>
        </div>
        <TeamStat
          title="Goals"
          away={homeTeamStats.goals}
          home={awayTeamStats.goals}
        />
        <TeamStat
          title="Assists"
          away={homeTeamStats.assists}
          home={awayTeamStats.assists}
        />
        <TeamStat
          title="Shots"
          away={homeTeamStats.shots}
          home={awayTeamStats.shots}
        />
        <TeamStat
          title="Shots On Target"
          away={homeTeamStats.shotsOnTarget}
          home={awayTeamStats.shotsOnTarget}
        />
        <TeamStat
          title="Saves"
          away={homeTeamStats.saves}
          home={awayTeamStats.saves}
        />
        <TeamStat
          title="Tackles"
          away={homeTeamStats.tackles}
          home={awayTeamStats.tackles}
        />
        <TeamStat
          title="Fouls"
          away={homeTeamStats.fouls}
          home={awayTeamStats.fouls}
        />
        <TeamStat
          title="Yellow Cards"
          away={homeTeamStats.yellowCards}
          home={awayTeamStats.yellowCards}
        />
        <TeamStat
          title="Red Cards"
          away={homeTeamStats.redCards}
          home={awayTeamStats.redCards}
        />
        <TeamStat
          title="Possession %"
          away={homeTeamStats.possessionPercentage}
          home={awayTeamStats.possessionPercentage}
        />
        <TeamStat
          title="Touches"
          away={homeTeamStats.touches}
          home={awayTeamStats.touches}
        />
        <TeamStat
          title="Passes"
          away={homeTeamStats.passes}
          home={awayTeamStats.passes}
        />
        <TeamStat
          title="Passes Completed"
          away={homeTeamStats.passesCompleted}
          home={awayTeamStats.passesCompleted}
        />
        <TeamStat
          title="Offsides"
          away={homeTeamStats.offsides}
          home={awayTeamStats.offsides}
        />
        <TeamStat
          title="Corners"
          away={homeTeamStats.corners}
          home={awayTeamStats.corners}
        />
      </TabPanel>
      <TabPanel title="Player Stats">
        <Tabs secondary titles={[homeTeam.name, awayTeam.name]}>
          <TabPanel title={homeTeam.name} class="space-y-5">
            {
              boxScoreData.playerDetail.homeTeam.grids.map((grid) => (
                <div>
                  <h3 class="font-bold text-team-primary mb-0.5">
                    {grid.name}
                  </h3>
                  <Grid data={grid} />
                </div>
              ))
            }
          </TabPanel>
          <TabPanel title={awayTeam.name} class="space-y-5">
            {
              boxScoreData.playerDetail.awayTeam.grids.map((grid) => (
                <div>
                  <h3 class="font-bold text-team-primary mb-0.5">
                    {grid.name}
                  </h3>
                  <Grid data={grid} />
                </div>
              ))
            }
          </TabPanel>
        </Tabs>
      </TabPanel>
    </Tabs>
  </div>
</div>
