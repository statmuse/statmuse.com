---
import { getPlayerCards, getTeamCards } from '@lib/related-content'
import type {
  PlayerCardResponse,
  ScoresResponse,
  ScheduleResponse,
  TeamCardResponse,
  GameraDomain,
} from '@statmuse/core/gamera'
import { getStandings } from '@lib/standings'
import { getGames, getSchedule } from '@lib/game'
import PlayerLeaders from '@components/cards/player-leaders.astro'
import FantasyLeaders from './cards/fantasy-leaders.astro'
import TeamRankings from './cards/team-rankings.astro'
import TeamBetting from './cards/team-betting.astro'
import Standings from './cards/standings.astro'
import ScoresSchedule from './cards/scores-schedule.astro'
import TeamSpecific from './cards/team-specific.astro'

interface Props {
  domain: GameraDomain
  teamId?: number | string
}

const { domain, teamId } = Astro.props

let playerCardsResp: PlayerCardResponse | undefined
let teamCardsResp: TeamCardResponse | undefined
let standingsResp: Awaited<ReturnType<typeof getStandings>> | undefined
let scheduleResp: ScheduleResponse | undefined
let scoresResp: ScoresResponse | undefined
let laligaPlayerCardsResp: PlayerCardResponse | undefined
let laligaTeamCardsResp: TeamCardResponse | undefined

const allowedDomains = ['NBA', 'NFL', 'NHL', 'EPL', 'MLB']

if (allowedDomains.includes(domain)) {
  ;[playerCardsResp, teamCardsResp, standingsResp, scheduleResp, scoresResp] =
    await Promise.all([
      getPlayerCards({ context: Astro, domain }),
      getTeamCards({ context: Astro, domain }),
      getStandings({ context: Astro, domain }),
      getSchedule({ context: Astro, domain }),
      getGames({ context: Astro, domain }),
    ])
}

if (domain === 'EPL') {
  ;[laligaPlayerCardsResp, laligaTeamCardsResp] = await Promise.all([
    getPlayerCards({ context: Astro, domain, league: 'lal' }),
    getTeamCards({ context: Astro, domain, league: 'lal' }),
  ])
}
---

<div class="space-y-10 mb-10">
  <TeamSpecific
    {domain}
    {teamId}
    adSlot={{ divId: 'pb-slot-1', slotId: 'pb-slot-incontent-1' }}
  />
  <PlayerLeaders
    {domain}
    response={playerCardsResp}
    mlbBatting={domain === 'MLB'}
    soccerLeague={domain === 'EPL' ? 'epl' : undefined}
    adSlot={{ divId: 'pb-slot-2', slotId: 'pb-slot-incontent-2' }}
  />
  {
    domain === 'EPL' && (
      <PlayerLeaders
        {domain}
        soccerLeague="lal"
        response={laligaPlayerCardsResp}
        adSlot={{ divId: 'pb-slot-2', slotId: 'pb-slot-incontent-2' }}
      />
    )
  }
  {
    domain === 'MLB' && (
      <PlayerLeaders
        {domain}
        response={playerCardsResp}
        mlbPitching
        adSlot={{
          divId: 'pb-slot-2-pitching',
          slotId: 'pb-slot-incontent-2',
        }}
      />
    )
  }
  <TeamRankings
    {domain}
    soccerLeague={domain === 'EPL' ? 'epl' : undefined}
    response={teamCardsResp}
    adSlot={{ divId: 'pb-slot-3', slotId: 'pb-slot-incontent-3' }}
  />
  {
    domain === 'EPL' && (
      <TeamRankings
        {domain}
        soccerLeague="lal"
        response={laligaTeamCardsResp}
        adSlot={{ divId: 'pb-slot-3', slotId: 'pb-slot-incontent-3' }}
      />
    )
  }
  <FantasyLeaders
    {domain}
    response={playerCardsResp}
    adSlot={{ divId: 'pb-slot-4', slotId: 'pb-slot-incontent-4' }}
  />
  <TeamBetting {domain} response={teamCardsResp} />
  <Standings
    {domain}
    soccerLeague={domain === 'EPL' ? 'epl' : undefined}
    response={domain === 'EPL' && standingsResp
      ? { ...standingsResp, teams: { epl: standingsResp.teams.epl } }
      : standingsResp}
    adSlot={{ divId: 'pb-slot-5', slotId: 'pb-slot-incontent-1' }}
  />
  {
    domain === 'EPL' && (
      <Standings
        {domain}
        soccerLeague="lal"
        response={
          standingsResp
            ? { ...standingsResp, teams: { lal: standingsResp.teams.lal } }
            : standingsResp
        }
      />
    )
  }
  <ScoresSchedule
    {domain}
    soccerLeague={domain === 'EPL' ? 'epl' : undefined}
    scoresResponse={domain === 'EPL' && scoresResp
      ? {
          ...scoresResp,
          games: scoresResp.games.filter((g) => g.league === 'epl'),
        }
      : scoresResp}
    scheduleResponse={domain === 'EPL' && scheduleResp
      ? {
          ...scheduleResp,
          games: scheduleResp.games.filter((g) => g.league === 'epl'),
        }
      : scheduleResp}
  />
  {
    domain === 'EPL' && (
      <ScoresSchedule
        {domain}
        soccerLeague="lal"
        scoresResponse={
          scoresResp
            ? {
                ...scoresResp,
                games: scoresResp.games.filter((g) => g.league === 'lal'),
              }
            : scoresResp
        }
        scheduleResponse={
          scheduleResp
            ? {
                ...scheduleResp,
                games: scheduleResp.games.filter((g) => g.league === 'lal'),
              }
            : scheduleResp
        }
      />
    )
  }
</div>
