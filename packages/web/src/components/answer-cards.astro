---
import { getPlayerCards, getTeamCards } from '@lib/related-content'
import type {
  PlayerCardResponse,
  TeamCardResponse,
} from '@statmuse/core/gamera'

interface Props {
  domain: string
}

const { domain } = Astro.props

const lastName = (s: string) => {
  const names = s.split(' ')
  return names[names.length - 1]
}

const cardTitle = (title: string) => {
  switch (title) {
    // NBA Player
    case 'mostPointsPerGame':
      return 'PPG Leaders'
    case 'mostReboundsPerGame':
      return 'RPG Leaders'
    case 'mostAssistsPerGame':
      return 'APG Leaders'
    case 'mostStealsPerGame':
      return 'SPG Leaders'
    case 'mostBlocksPerGame':
      return 'BPG Leaders'
    case 'mostThreePointersMadePerGame':
      return '3PG Leaders'
    case 'bestTrueShootingPercentage':
      return 'TS% Leaders'
    // NBA Team
    case 'bestOffensiveRating':
      return 'Offensive Rating'
    case 'bestDefensiveRating':
      return 'Defensive Rating'
    case 'bestNetRating':
      return 'Net Rating'
    case 'worstRecord':
      return 'Worst Record'
    // NFL Player
    case 'mostPassingYards':
      return 'Passing Yard Leaders'
    case 'mostRushingYards':
      return 'Rushing Yard Leaders'
    case 'mostReceivingYards':
      return 'Receiving Yard Leaders'
    case 'mostPassingTouchdowns':
      return 'Passing Touchdown Leaders'
    case 'mostRushingTouchdowns':
      return 'Rushing Touchdown Leaders'
    case 'mostReceivingTouchdowns':
      return 'Receiving Touchdown Leaders'
    case 'bestQuarterbackRating':
      return 'Quarterback Rating Leaders'
    case 'mostDefensiveSacks':
      return 'Sack Leaders'
    // NFL Team
    case 'mostPointsPerGame':
      return 'Team Points Rankings'
    case 'leastPointsAllowedPerGame':
      return 'Team Points Allowed Rankings'
    case 'mostTotalYardsPerGame':
      return 'Total Yards Per Game Rankings'
    case 'mostRushingYardsPerGame':
      return 'Rush Yards Per Game Rankings'
    case 'mostPassingYardsPerGame':
      return 'Pass Yards Per Game Rankings'
    case 'mostDefensiveSacks':
      return 'Team Sacks Rankings'
    // NHL Player
    case 'mostGoals':
      return 'Goal Leaders'
    case 'mostAssists':
      return 'Assist Leaders'
    case 'mostPoints':
      return 'Point Leaders'
    case 'bestPlusMinus':
      return 'Plus Minus Leaders'
    case 'bestGoalsAgainstAverage':
      return 'Goals Against Avg Leaders'
    // NHL Team
    case 'mostGoalsPerGame':
      return 'Goals Per Game Rankings'
    case 'leastGoalsAllowedPerGame':
      return 'Goals Allowed Per Game Rankings'
    case 'bestPowerPlayPercentage':
      return 'Power Play Percentage Rankings'
    case 'bestPenaltyKillPercentage':
      return 'Penalty Kill Percentage Rankings'
    // EPL Player
    case 'mostGoals':
      return 'Goal Leaders'
    case 'mostAssists':
      return 'Assist Leaders'
    case 'mostShotsOnTarget':
      return 'Shot On Target Leaders'
    case 'mostPasses':
      return 'Pass Leaders'
    case 'mostTackles':
      return 'Tackle Leaders'
    case 'mostCleanSheets':
      return 'Clean Sheet Leaders'
    // EPL Team
    case 'mostGoals':
      return 'Goal Rankings'
    case 'leastGoalsAgainst':
      return 'Least Goal Against Rankings'
    case 'bestGoalDifferential':
      return 'Goal Differential Rankings'
    default:
      return title
  }
}

let playerCardsResp: PlayerCardResponse | undefined
let teamCardsResp: TeamCardResponse | undefined

const allowedDomains = ['nba', 'nfl', 'nhl', 'epl', 'mlb']

if (allowedDomains.includes(domain)) {
  playerCardsResp = await getPlayerCards({ context: Astro, domain })
  teamCardsResp = await getTeamCards({ context: Astro, domain })
}
---

{
  playerCardsResp && teamCardsResp && (
    <>
      {playerCardsResp.cards.length > 0 && (
        <Fragment>
          <h3 class="text-3xl font-semibold">
            {`${domain.toUpperCase()} ${
              playerCardsResp.seasonYearDisplay
            } Leaders`}
          </h3>
          <div class="grid grid-cols-[repeat(auto-fit,_minmax(325px,_1fr))] gap-4 mb-5">
            {playerCardsResp?.cards.map((card) => (
              <div class="relative -z-[1]">
                <p class="font-semibold">
                  {`${cardTitle(card.stat)} ${
                    playerCardsResp.seasonYearDisplay
                  }`}
                </p>
                <div
                  class="flex rounded-2xl overflow-hidden"
                  style={{
                    backgroundColor: card.players[0].colors.backgroundColor,
                    color: card.players[0].colors.foregroundColor,
                  }}
                >
                  {card?.players.map((player, i) => (
                    <div class="text-center flex-1 relative h-56">
                      <h3 class="text-3xl mt-3" style="line-height: normal;">
                        {player.statDisplayValue}
                      </h3>
                      <p class="uppercase text-xs tracking-[0.07rem]">
                        {lastName(player.entity.display)}
                      </p>
                      <img
                        src={player.imageUrl}
                        class=" h-36 absolute bottom-0 left-1/2 -translate-x-1/2"
                        style={{ maxWidth: 'initial', zIndex: 3 - i }}
                      />
                    </div>
                  ))}
                </div>
              </div>
            ))}
          </div>
        </Fragment>
      )}
      {teamCardsResp.cards.length > 0 && (
        <Fragment>
          <h3 class="text-3xl font-semibold">
            {`${domain.toUpperCase()} ${
              teamCardsResp.seasonYearDisplay
            } Rankings`}
          </h3>
          <div class="grid grid-cols-[repeat(auto-fit,_minmax(325px,_1fr))] gap-4 mb-5">
            {teamCardsResp?.cards.map((card) => (
              <div>
                <p class="font-semibold">
                  {`${cardTitle(card.stat)} ${teamCardsResp.seasonYearDisplay}`}
                </p>
                <div
                  class="flex flex-wrap rounded-2xl py-5 gap-y-5"
                  style={{
                    backgroundColor: card.teams[0].colors.backgroundColor,
                    color: card.teams[0].colors.foregroundColor,
                  }}
                >
                  {card.teams.map((team) => (
                    <div class="w-1/3 text-center">
                      <div class="w-16 h-16 rounded-full bg-white flex items-center justify-center mx-auto">
                        <img
                          src={team.logoImageUrl}
                          class="w-4/5 h-4/5 object-contain"
                        />
                      </div>
                      <p class="text-3xl mt-2" style="line-height: normal;">
                        {team.statDisplayValue}
                      </p>
                    </div>
                  ))}
                </div>
              </div>
            ))}
          </div>
        </Fragment>
      )}
    </>
  )
}
