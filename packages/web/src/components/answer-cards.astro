---
import { groupBy } from 'lodash-es'
import { getPlayerCards, getTeamCards } from '@lib/related-content'
import type {
  PlayerCard,
  PlayerCardResponse,
  ScoresResponse,
  ScheduleResponse,
  StandingsResponse,
  TeamCard,
  TeamCardResponse,
} from '@statmuse/core/gamera'
import StandingsCard from '@components/standings-card.astro'
import Image from '@components/image.astro'
import { getStandings } from '@lib/standings'
import { leagueToDomain, type LeagueParam } from '@lib/params'
import { createAskPath } from '@statmuse/core/path'
import { getGames, getSchedule } from '@lib/game'
import ScheduleCard from '@components/schedule-card.astro'
import ScoresCard from '@components/scores-card.astro'
import PlayerCardComponent from '@components/cards/player.astro'
import TeamCardComponent from '@components/cards/team.astro'

interface Props {
  league: LeagueParam
  teamId?: number
  seasonYear?: number
}

const { league, teamId, seasonYear } = Astro.props
const domain = leagueToDomain(league).toLowerCase()

const lastName = (s: string) => {
  const names = s.split(' ')
  return names[names.length - 1]
}

const playerCardTitle = (stat: string) => {
  switch (stat) {
    // NBA Player
    case 'mostPointsPerGame':
      return 'PPG Leaders'
    case 'mostReboundsPerGame':
      return 'RPG Leaders'
    case 'mostAssistsPerGame':
      return 'APG Leaders'
    case 'mostStealsPerGame':
      return 'SPG Leaders'
    case 'mostBlocksPerGame':
      return 'BPG Leaders'
    case 'mostThreePointersMadePerGame':
      return '3PM Leaders'
    case 'bestTrueShootingPercentage':
      return 'TS% Leaders'
    case 'mostFanDuelPoints':
      return 'FanDuel Points Leaders'
    case 'mostDraftKingsPoints':
      return 'DraftKings Points Leaders'
    case 'mostFanDuelPointsPerMinute':
      return 'FanDuel PTS/MIN Leaders'
    case 'mostDraftKingsPointsPerMinute':
      return 'DraftKings PTS/MIN Leaders'
    case 'bestUsagePercentage':
      return 'USG% Leaders'
    case 'mostMinutesPerGame':
      return 'MPG Leaders'
    // NFL Player
    case 'mostPassingYards':
      return 'Pass Yards Leaders'
    case 'mostRushingYards':
      return 'Rush Yards Leaders'
    case 'mostReceivingYards':
      return 'Rec Yards Leaders'
    case 'mostPassingTouchdowns':
      return 'Pass TD Leaders'
    case 'mostRushingTouchdowns':
      return 'Rush TD Leaders'
    case 'mostReceivingTouchdowns':
      return 'Rec TD Leaders'
    case 'bestQuarterbackRating':
      return 'QB Rating Leaders'
    case 'mostDefensiveSacks':
      return 'Sack Leaders'
    case 'mostQuarterbackFantasyPoints':
      return 'Fantasy QB Rankings'
    case 'mostRunningBackFantasyPoints':
      return 'Fantasy RB Rankings'
    case 'mostWideReceiverFantasyPoints':
      return 'Fantasy WR Rankings'
    case 'mostTightEndFantasyPoints':
      return 'Fantasy TE Rankings'
    case 'mostKickerFantasyPoints':
      return 'Fantasy K Rankings'
    // NHL Player
    case 'mostGoals':
      return 'Goals Leaders'
    case 'mostAssists':
      return 'Assists Leaders'
    case 'mostPoints':
      return 'Points Leaders'
    case 'bestPlusMinus':
      return '+/- Leaders'
    case 'bestGoalsAgainstAverage':
      return 'Goals Against Leaders'
    // EPL Player
    case 'mostGoals':
      return 'Goals Leaders'
    case 'mostAssists':
      return 'Assists Leaders'
    case 'mostShotsOnTarget':
      return 'Shots on Target Leaders'
    case 'mostPasses':
      return 'Passes Leaders'
    case 'mostTackles':
      return 'Tackles Leaders'
    case 'mostCleanSheets':
      return 'Clean Sheets Leaders'
    default:
      return stat
  }
}

const teamCardTitle = (stat: string) => {
  switch (stat) {
    // ALL
    case 'bestRecordAgainstTheSpread':
      return 'Best Record ATS'
    case 'worstRecordAgainstTheSpread':
      return 'Worst Record ATS'
    // NBA Team
    case 'bestOffensiveRating':
      return 'ORtg Rankings'
    case 'bestDefensiveRating':
      return 'DRtg Rankings'
    case 'bestNetRating':
      return 'NetRtg Rankings'
    case 'worstRecord':
      return 'Tank Leaderboard'
    // NFL Team
    case 'mostPointsPerGame':
      return 'PPG Rankings'
    case 'leastPointsAllowedPerGame':
      return 'Opp PPG Rankings'
    case 'mostTotalYardsPerGame':
      return 'Total Yards Rankings'
    case 'mostRushingYardsPerGame':
      return 'Rush Yards Rankings'
    case 'mostPassingYardsPerGame':
      return 'Pass Yards Rankings'
    case 'mostDefensiveSacks':
      return 'Sack Leaders'
    // NHL Team
    case 'mostGoalsPerGame':
      return 'Goals Rankings'
    case 'leastGoalsAllowedPerGame':
      return 'Goals Against Rankings'
    case 'bestPowerPlayPercentage':
      return 'Power Play Rankings'
    case 'bestPenaltyKillPercentage':
      return 'Penalty Kill Rankings'
    // EPL Team
    case 'mostGoals':
      return 'Goals For Rankings'
    case 'leastGoalsAgainst':
      return 'Goals Against Rankings'
    case 'bestGoalDifferential':
      return 'Goal Difference Rankings'
    default:
      return stat
  }
}

const playerAskLink = (
  stat: string,
  league: LeagueParam,
  season: string,
  year: string,
) => {
  switch (stat) {
    // NBA Player
    case 'mostPointsPerGame':
      return createAskPath({
        domain: league,
        query: `ppg leaders ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    case 'mostReboundsPerGame':
      return createAskPath({
        domain: league,
        query: `rpg leaders ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    case 'mostAssistsPerGame':
      return createAskPath({
        domain: league,
        query: `apg leaders ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    case 'mostStealsPerGame':
      return createAskPath({
        domain: league,
        query: `spg leaders ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    case 'mostBlocksPerGame':
      return createAskPath({
        domain: league,
        query: `bpg leaders ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    case 'mostThreePointersMadePerGame':
      return createAskPath({
        domain: league,
        query: `3pm leaders ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    case 'bestTrueShootingPercentage':
      return createAskPath({
        domain: league,
        query: `ts% leaders ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    case 'mostFanDuelPoints':
      return createAskPath({
        domain: league,
        query: `most fanduel points ${year}`,
      })
    case 'mostDraftKingsPoints':
      return createAskPath({
        domain: league,
        query: `most draftkings points ${year}`,
      })
    case 'mostFanDuelPointsPerMinute':
      return createAskPath({
        domain: league,
        query: `most fanduel points per minute ${year} minimum 20 min minimum 10 mpg`,
      })
    case 'mostDraftKingsPointsPerMinute':
      return createAskPath({
        domain: league,
        query: `most draftkings points per minute ${year} minimum 20 min minimum 10 mpg`,
      })
    case 'bestUsagePercentage':
      return createAskPath({ domain: league, query: `usage% leaders ${year}` })
    case 'mostMinutesPerGame':
      return createAskPath({ domain: league, query: `mpg leaders ${year}` })
    // NFL Player
    case 'mostPassingYards':
      return createAskPath({
        domain: league,
        query: `pass yards leaders ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    case 'mostRushingYards':
      return createAskPath({
        domain: league,
        query: `rush yards leaders ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    case 'mostReceivingYards':
      return createAskPath({
        domain: league,
        query: `rec yards leaders ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    case 'mostPassingTouchdowns':
      return createAskPath({
        domain: league,
        query: `pass td leaders ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    case 'mostRushingTouchdowns':
      return createAskPath({
        domain: league,
        query: `rush td leaders ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    case 'mostReceivingTouchdowns':
      return createAskPath({
        domain: league,
        query: `rec td leaders ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    case 'bestQuarterbackRating':
      return createAskPath({
        domain: league,
        query: `qb rating leaders ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    case 'mostDefensiveSacks':
      return createAskPath({
        domain: league,
        query: `sack leaders ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    case 'mostQuarterbackFantasyPoints':
      return createAskPath({
        domain: league,
        query: `most fantasy points by a qb ${year}`,
      })
    case 'mostRunningBackFantasyPoints':
      return createAskPath({
        domain: league,
        query: `most fantasy points by a rb ${year}`,
      })
    case 'mostWideReceiverFantasyPoints':
      return createAskPath({
        domain: league,
        query: `most fantasy points by a wr ${year}`,
      })
    case 'mostTightEndFantasyPoints':
      return createAskPath({
        domain: league,
        query: `most fantasy points by a te ${year}`,
      })
    case 'mostKickerFantasyPoints':
      return createAskPath({
        domain: league,
        query: `most fantasy points by a kicker ${year}`,
      })
    // NHL Player
    case 'mostGoals':
      return createAskPath({
        domain: league,
        query: `goal leaders ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    case 'mostAssists':
      return createAskPath({
        domain: league,
        query: `assist leaders ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    case 'mostPoints':
      return createAskPath({
        domain: league,
        query: `points leaders ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    case 'bestPlusMinus':
      return createAskPath({
        domain: league,
        query: `+/- leaders ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    case 'bestGoalsAgainstAverage':
      return createAskPath({
        domain: league,
        query: `gaa leaders ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    // EPL Player
    case 'mostGoals':
      return createAskPath({
        domain: league,
        query: `goal leaders ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    case 'mostAssists':
      return createAskPath({
        domain: league,
        query: `assist leaders ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    case 'mostShotsOnTarget':
      return createAskPath({
        domain: league,
        query: `shots on target leaders ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    case 'mostPasses':
      return createAskPath({
        domain: league,
        query: `passes leaders ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    case 'mostTackles':
      return createAskPath({
        domain: league,
        query: `tackles leaders ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    case 'mostCleanSheets':
      return createAskPath({
        domain: league,
        query: `clean sheet leaders ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    default:
      return stat
  }
}

const teamAskLink = (
  stat: string,
  league: LeagueParam,
  season: string,
  year: string,
) => {
  switch (stat) {
    // ALL
    case 'bestRecordAgainstTheSpread':
      return createAskPath({ domain: league, query: `best record ats ${year}` })
    case 'worstRecordAgainstTheSpread':
      return createAskPath({
        domain: league,
        query: `worst record ats ${year}`,
      })
    // NBA Team
    case 'bestOffensiveRating':
      return createAskPath({
        domain: league,
        query: `team ortg rankings ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    case 'bestDefensiveRating':
      return createAskPath({
        domain: league,
        query: `team drtg rankings ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    case 'bestNetRating':
      return createAskPath({
        domain: league,
        query: `team net rating rankings ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    case 'worstRecord':
      return createAskPath({
        domain: league,
        query: `worst record ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    // NFL Team
    case 'mostPointsPerGame':
      return createAskPath({
        domain: league,
        query: `team ppg rankings ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    case 'leastPointsAllowedPerGame':
      return createAskPath({
        domain: league,
        query: `fewest points allowed per game by a team ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    case 'mostTotalYardsPerGame':
      return createAskPath({
        domain: league,
        query: `team total yards per game rankings ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    case 'mostRushingYardsPerGame':
      return createAskPath({
        domain: league,
        query: `team rush yards per game rankings ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    case 'mostPassingYardsPerGame':
      return createAskPath({
        domain: league,
        query: `team pass yards per game rankings ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    case 'mostDefensiveSacks':
      return createAskPath({
        domain: league,
        query: `team sack rankings ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    // NHL Team
    case 'mostGoalsPerGame':
      return createAskPath({
        domain: league,
        query: `most goals per game by a team ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    case 'leastGoalsAllowedPerGame':
      return createAskPath({
        domain: league,
        query: `fewest goals against per game by a team ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    case 'bestPowerPlayPercentage':
      return createAskPath({
        domain: league,
        query: `most pp% ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    case 'bestPenaltyKillPercentage':
      return createAskPath({
        domain: league,
        query: `best pk% by a team ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    // EPL Team
    case 'mostGoals':
      return createAskPath({
        domain: league,
        query: `most goals by a team ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    case 'leastGoalsAgainst':
      return createAskPath({
        domain: league,
        query: `fewest goals against by a team ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    case 'bestGoalDifferential':
      return createAskPath({
        domain: league,
        query: `highest goal difference by a team ${year}${
          season === 'postseason' ? ' postseason' : ''
        }`,
      })
    default:
      return stat
  }
}

const filterPlayerCards = (card: PlayerCard) =>
  [
    // NBA Player
    'mostPointsPerGame',
    'mostReboundsPerGame',
    'mostAssistsPerGame',
    'mostStealsPerGame',
    'mostBlocksPerGame',
    'mostThreePointersMadePerGame',
    'bestTrueShootingPercentage',
    // NFL Player
    'mostPassingYards',
    'mostRushingYards',
    'mostReceivingYards',
    'mostPassingTouchdowns',
    'mostRushingTouchdowns',
    'mostReceivingTouchdowns',
    'bestQuarterbackRating',
    'mostDefensiveSacks',
    // NHL Player
    'mostGoals',
    'mostAssists',
    'mostPoints',
    'bestPlusMinus',
    'bestGoalsAgainstAverage',
    // EPL Player
    'mostGoals',
    'mostAssists',
    'mostShotsOnTarget',
    'mostPasses',
    'mostTackles',
    'mostCleanSheets',
  ].includes(card.stat)

const filterTeamCards = (card: TeamCard) =>
  [
    // NBA Team
    'bestOffensiveRating',
    'bestDefensiveRating',
    'bestNetRating',
    'worstRecord',
    // NFL Team
    'mostPointsPerGame',
    'leastPointsAllowedPerGame',
    'mostTotalYardsPerGame',
    'mostRushingYardsPerGame',
    'mostPassingYardsPerGame',
    'mostDefensiveSacks',
    // NHL Team
    'mostGoalsPerGame',
    'leastGoalsAllowedPerGame',
    'bestPowerPlayPercentage',
    'bestPenaltyKillPercentage',
    // EPL Team
    'mostGoals',
    'leastGoalsAgainst',
    'bestGoalDifferential',
  ].includes(card.stat)

const filterFantasyCards = (card: PlayerCard) =>
  [
    // NBA Player
    'mostFanDuelPoints',
    'mostDraftKingsPoints',
    'mostFanDuelPointsPerMinute',
    'mostDraftKingsPointsPerMinute',
    'bestUsagePercentage',
    'mostMinutesPerGame',
    // NFL Player
    'mostQuarterbackFantasyPoints',
    'mostRunningBackFantasyPoints',
    'mostWideReceiverFantasyPoints',
    'mostTightEndFantasyPoints',
    'mostKickerFantasyPoints',
  ].includes(card.stat)

const filterBettingCards = (card: TeamCard) =>
  [
    // NBA, NFL, NHL Team
    'bestRecordAgainstTheSpread',
    'worstRecordAgainstTheSpread',
  ].includes(card.stat)

const filterTeamLeaders = (cards: PlayerCard[], domain: string) => {
  switch (domain) {
    case 'nba':
      return cards
        .filter((c) =>
          [
            'mostPointsPerGame',
            'mostReboundsPerGame',
            'mostAssistsPerGame',
          ].includes(c.stat),
        )
        .map((c) => c.players[0])
    case 'nfl':
      return cards
        .filter((c) =>
          [
            'mostPassingYards',
            'mostRushingYards',
            'mostReceivingYards',
          ].includes(c.stat),
        )
        .map((c) => c.players[0])
    case 'nhl':
      return cards
        .filter((c) =>
          ['mostGoals', 'mostAssists', 'bestPlusMinus'].includes(c.stat),
        )
        .map((c) => c.players[0])
    case 'epl':
      return cards
        .filter((c) =>
          ['mostGoals', 'mostAssists', 'mostCleanSheets'].includes(c.stat),
        )
        .map((c) => c.players[0])
    default:
      return []
  }
}

let playerCardsResp: PlayerCardResponse | undefined
let teamCardsResp: TeamCardResponse | undefined
let standingsResp: StandingsResponse | undefined
let scheduleResp: ScheduleResponse | undefined
let scoresResp: ScoresResponse | undefined

const allowedDomains = ['nba', 'nfl', 'nhl', 'fc']

if (allowedDomains.includes(league)) {
  ;[playerCardsResp, teamCardsResp, standingsResp, scheduleResp, scoresResp] =
    await Promise.all([
      getPlayerCards({ context: Astro, domain }),
      getTeamCards({ context: Astro, domain }),
      getStandings({ context: Astro, domain }),
      getSchedule({ context: Astro, domain }),
      getGames({ context: Astro, domain }),
    ])
}

let playerLeaderCards: PlayerCard[] = []
if (playerCardsResp) {
  playerLeaderCards = playerCardsResp.cards.filter(filterPlayerCards)
}

let teamRankingCards: TeamCard[] = []
if (teamCardsResp) {
  teamRankingCards = teamCardsResp.cards.filter(filterTeamCards)
}

let fantasyCards: PlayerCard[] = []
if (playerCardsResp) {
  fantasyCards = playerCardsResp.cards.filter(filterFantasyCards)
}

let bettingCards: TeamCard[] = []
if (teamCardsResp) {
  bettingCards = teamCardsResp.cards.filter(filterBettingCards)
}

let teamSpecificPlayerCards: PlayerCardResponse | undefined
let teamLeaders: PlayerCard | undefined
if (allowedDomains.includes(league) && teamId && seasonYear) {
  teamSpecificPlayerCards = await getPlayerCards({
    context: Astro,
    domain,
    teamId,
    seasonYear,
  })
  teamLeaders = {
    stat: '',
    type: 'stats',
    players: filterTeamLeaders(teamSpecificPlayerCards?.cards ?? [], domain),
  }
}
---

{
  teamSpecificPlayerCards && (
    <Fragment>
      <h3 class="text-3xl font-semibold mb-1.5">{`More ${teamSpecificPlayerCards.team?.nickname} Stats`}</h3>
      <div class="grid grid-cols-[repeat(auto-fit,_minmax(325px,_1fr))] gap-4 mb-10">
        {teamLeaders && teamLeaders.players.length > 0 && (
          <div>
            <p class="font-semibold">Team Leaders</p>
            <PlayerCardComponent card={teamLeaders} />
          </div>
        )}
      </div>
    </Fragment>
  )
  }

{
  playerCardsResp && playerLeaderCards.length > 0 && (
    <Fragment>
      <h3 class="text-3xl font-semibold mb-1.5">
        {`${league === 'fc' ? 'PL' : domain.toUpperCase()} ${
          playerCardsResp.seasonYearDisplay
        } Leaders`}
      </h3>
      <div class="grid grid-cols-[repeat(auto-fit,_minmax(325px,_1fr))] gap-4 mb-10">
        {playerLeaderCards.map((card) => (
          <div>
            <div class="flex justify-between">
              <p class="font-semibold">{`${
                playerCardsResp?.seasonType === 'postseason' ? 'Playoff ' : ''
              }${playerCardTitle(card.stat)}`}</p>
              <a
                href={playerAskLink(
                  card.stat,
                  league,
                  playerCardsResp.seasonType,
                  playerCardsResp.seasonYearDisplay,
                )}
              >
                See more
              </a>
            </div>
            <a
              href={playerAskLink(
                card.stat,
                league,
                playerCardsResp.seasonType,
                playerCardsResp.seasonYearDisplay,
              )}
              class="hover:no-underline"
            >
              <PlayerCardComponent card={card} />
            </a>
          </div>
        ))}
      </div>
    </Fragment>
  )
}

{
  teamCardsResp && teamRankingCards.length > 0 && (
    <Fragment>
      <h3 class="text-3xl font-semibold mb-1.5">
        {`${league === 'fc' ? 'PL' : domain.toUpperCase()} ${
          teamCardsResp.seasonYearDisplay
        } Rankings`}
      </h3>
      <div class="grid grid-cols-[repeat(auto-fit,_minmax(325px,_1fr))] gap-4 mb-10">
        {teamRankingCards.map((card) => (
          <div>
            <div class="flex justify-between">
              <p class="font-semibold">{`${
                teamCardsResp?.seasonType === 'postseason' ? 'Playoff ' : ''
              }${teamCardTitle(card.stat)}`}</p>
              <a
                href={teamAskLink(
                  card.stat,
                  league,
                  teamCardsResp.seasonType,
                  teamCardsResp.seasonYearDisplay,
                )}
              >
                See more
              </a>
            </div>
            <a
              href={teamAskLink(
                card.stat,
                league,
                teamCardsResp.seasonType,
                teamCardsResp.seasonYearDisplay,
              )}
              class="hover:no-underline"
            >
              <TeamCardComponent card={card} />
            </a>
          </div>
        ))}
      </div>
    </Fragment>
  )
}

{
  playerCardsResp &&
    playerCardsResp.seasonType !== 'postseason' &&
    fantasyCards.length > 0 && (
      <Fragment>
        <h3 class="text-3xl font-semibold mb-1.5">
          {`Fantasy ${
            league === 'nba' ? 'Basketball' : league === 'nfl' ? 'Football' : ''
          } ${playerCardsResp.seasonYearDisplay}`}
        </h3>
        <div class="grid grid-cols-[repeat(auto-fit,_minmax(325px,_1fr))] gap-4 mb-10">
          {fantasyCards.map((card) => (
            <div>
              <div class="flex justify-between">
                <p class="font-semibold">{`${
                  playerCardsResp?.seasonType === 'postseason' ? 'Playoff ' : ''
                }${playerCardTitle(card.stat)}`}</p>
                <a
                  href={playerAskLink(
                    card.stat,
                    league,
                    playerCardsResp.seasonType,
                    playerCardsResp.seasonYearDisplay,
                  )}
                >
                  See more
                </a>
              </div>
              <a
                href={playerAskLink(
                  card.stat,
                  league,
                  playerCardsResp.seasonType,
                  playerCardsResp.seasonYearDisplay,
                )}
                class="hover:no-underline"
              >
                <PlayerCardComponent card={card} />
              </a>
            </div>
          ))}
        </div>
      </Fragment>
    )
}

{
  teamCardsResp && bettingCards.length > 0 && (
    <Fragment>
      <h3 class="text-3xl font-semibold mb-1.5">
        {`${league === 'fc' ? 'Premier League' : domain.toUpperCase()} ${
          teamCardsResp.seasonYearDisplay
        } Betting`}
      </h3>
      <div class="grid grid-cols-[repeat(auto-fit,_minmax(325px,_1fr))] gap-4 mb-10">
        {bettingCards.map((card) => (
          <div>
            <div class="flex justify-between">
              <p class="font-semibold">{teamCardTitle(card.stat)}</p>
              <a
                href={teamAskLink(
                  card.stat,
                  league,
                  teamCardsResp.seasonType,
                  teamCardsResp.seasonYearDisplay,
                )}
              >
                See more
              </a>
            </div>
            <a
              href={teamAskLink(
                card.stat,
                league,
                teamCardsResp.seasonType,
                teamCardsResp.seasonYearDisplay,
              )}
              class="hover:no-underline"
            >
              <TeamCardComponent card={card} />
            </a>
          </div>
        ))}
      </div>
    </Fragment>
  )
}

{
  standingsResp && standingsResp.teams && (
    <Fragment>
      <h3 class="text-3xl font-semibold mb-1.5">
        {`${league === 'fc' ? 'PL' : domain.toUpperCase()} ${
          standingsResp.seasonYearDisplay
        } ${
          league === 'nba' ? 'Conference' : league === 'fc' ? '' : 'Division'
        } ${league === 'fc' ? 'Table' : 'Standings'}`}
      </h3>
      <div class="grid grid-cols-[repeat(auto-fit,_minmax(325px,_1fr))] gap-4 mb-10">
        {Object.entries(groupBy(standingsResp.teams, 'conference.name')).map(
          ([_, teams]) => (
            <StandingsCard
              {teams}
              {domain}
              group={
                league !== 'nba' && league !== 'fc' ? 'division' : undefined
              }
              limit={
                league === 'nba'
                  ? 6
                  : league === 'fc'
                  ? 6
                  : league === 'nfl'
                  ? 2
                  : league === 'nhl'
                  ? 3
                  : league === 'mlb'
                  ? 2
                  : undefined
              }
            />
          ),
        )}
      </div>
    </Fragment>
  )
}
{
  scheduleResp &&
    scheduleResp.games.length > 0 &&
    scoresResp &&
    scoresResp.games.length > 0 && (
      <Fragment>
        <h3 class="text-3xl font-semibold mb-1.5">
          {`${league === 'fc' ? 'PL' : domain.toUpperCase()} ${
            scoresResp.seasonYearDisplay
          }`}
          Scores & Schedule
        </h3>
        <div class="grid grid-cols-[repeat(auto-fit,_minmax(325px,_1fr))] gap-4 mb-10">
          <div>
            <p class="font-semibold">Scores</p>
            <ScoresCard data={scoresResp} />
          </div>
          <div>
            <p class="font-semibold">Schedule</p>
            <ScheduleCard data={scheduleResp} />
          </div>
        </div>
      </Fragment>
    )
}
