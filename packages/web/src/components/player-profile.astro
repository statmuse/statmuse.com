---
import PlayerLayout from '@layouts/player.astro'
import Panel from '@components/panel.astro'
import Image from '@components/image.astro'
import {
  tokensToText,
  tokensToHtml,
  getUrlForEntity,
  type GameraGrid,
} from '@statmuse/core/gamera'
import { getPlayerProfile, getPlayerSplits, getPositionName } from '@lib/player'
import { getLeagueKeywords } from '@lib/meta'
import { NOT_FOUND_404 } from '@lib/response'
import { leagueToDomain, type LeagueParam } from '@lib/params'
import type { AnalyticsPageviewProperties } from '@lib/analytics'
import { formatDate } from '@statmuse/core/time'
import EntityLink from './entity-link.astro'
import PlayerPerformanceCard from '@components/player/performance-card.astro'
import BioPanel from '@components/player/bio-panel.astro'

interface Props {
  league: LeagueParam
  player: string
  query?: string
  analytics?: AnalyticsPageviewProperties
}

const analytics = Astro.props.analytics
const query = Astro.props.query
const player = Astro.props.player
const leagueParam = Astro.props.league

if (!player || !leagueParam) return NOT_FOUND_404

const domain = leagueToDomain(leagueParam)
const profile = await getPlayerProfile(Astro, domain, player)
if (!profile) return NOT_FOUND_404

const { bio, stats, nextGame } = profile
const recentGames = profile.recentGames
  ? 'grid' in profile.recentGames
    ? profile.recentGames
    : { grid: profile.recentGames }
  : undefined

const isNextGameHome =
  profile.bio.team?.abbreviation === nextGame?.homeTeam.abbreviation

const summary = bio.summaryNlg ? tokensToHtml(bio.summaryNlg) : undefined
const playerPath = getUrlForEntity({
  type: 'player',
  domain: bio.domain,
  id: bio.playerId.toString(),
  display: bio.usedName,
})

const position = getPositionName(bio)
const title = `${bio.usedName} - ${bio.team?.name || bio.domain} ${
  position || 'Player'
}`
const description = bio.summaryNlg ? tokensToText(bio.summaryNlg) : undefined
const keywords = `${getLeagueKeywords(domain)} ${
  bio.usedName
} career stats statistics`
const canonical = { url: playerPath, rewrite: true }
const meta = { title, description, keywords, canonical }
const league = domain.toLowerCase() === 'epl' ? 'fc' : leagueParam

const nextGameOpponent = isNextGameHome
  ? nextGame?.awayTeam
  : nextGame?.homeTeam

type Row = GameraGrid['rows'][number]
type Stat =
  | string
  | string[]
  | { label: string; value: (v: Row) => string }
  | undefined

const formatNumber = (value: unknown, decimalPlaces = 1) =>
  (typeof value === 'number'
    ? value.toFixed(decimalPlaces).replace('.0', '')
    : (value as string)) ?? '-'
const formatPercentage = (value: number, includeDecimals = true) =>
  isNaN(value) ? '-' : `${formatNumber(value, includeDecimals ? 1 : 0)}%`

const calculateStat = (stat: Stat, row: Row | undefined) => ({
  key:
    typeof stat === 'string'
      ? stat
      : Array.isArray(stat)
      ? stat[0]
      : stat?.label,
  value:
    (row === undefined
      ? undefined
      : typeof stat === 'string'
      ? row[stat]?.display
      : Array.isArray(stat)
      ? row[stat[1]]?.display
      : formatNumber(stat?.value(row))) || '-',
})

const normalizeNflPosition = (position: string) => {
  switch (position) {
    case 'QB':
    case 'RB':
    case 'WR':
    case 'K':
    case 'P':
    case 'OL':
      return position
    case 'TE':
      return 'WR'
    default:
      return 'DEF'
  }
}

const normalizedPosition =
  league === 'nfl' ? normalizeNflPosition(bio.position) : bio.position

type League = Exclude<LeagueParam, 'money' | 'pga'>

const seasonStatColumns: Record<League, Stat[] | Record<string, Stat[]>> = {
  fc: {
    FW: [
      ['Goals', 'G'],
      ['Assists', 'A'],
      'xG',
      'xA',
      ['Matches', 'M'],
      ['Starts', 'START'],
      {
        label: 'Conv%',
        value: (v) => formatPercentage(v['CONV%'].value as number, false),
      },
      {
        label: 'Dribble%',
        value: (v) => formatPercentage(v['DRIB%'].value as number, false),
      },
    ],
    MF: [
      ['Goals', 'G'],
      ['Assists', 'A'],
      'xG',
      'xA',
      ['Matches', 'M'],
      ['Starts', 'START'],
      'BCC',
      {
        label: 'Pass%',
        value: (v) => formatPercentage(v['PASS%'].value as number, false),
      },
    ],
    DF: [
      ['Goals', 'G'],
      ['Assists', 'A'],
      {
        label: 'Duel W-L',
        value: (v) => `${v['DUEL-W'].display}-${v['DUEL-L'].display}`,
      },
      {
        label: 'Aerial W-L',
        value: (v) => `${v['AER-W'].display}-${v['AER-L'].display}`,
      },
      ['Matches', 'M'],
      ['Starts', 'START'],
      ['Clearances', 'CLR'],
      ['Dribbled Past', 'DRIB-PAST'],
    ],
    GK: [
      ['Clean Sheets', 'CS'],
      ['Goals Conceded', 'GC'],
      ['Saves', 'SV'],
      ['Matches', 'M'],
      ['Recoveries', 'REC'],
      ['Penalty Saves', 'SV-PK'],
    ],
  },
  nba: ['PPG', 'RPG', 'APG', 'SPG', 'BPG', 'MPG', 'FG%', '3P%', 'FT%', 'TS%'],
  nfl: {
    QB: [
      {
        label: 'Comp Pct',
        value: (v) =>
          formatPercentage(
            ((v.CMP.value as number) / (v.ATT.value as number)) * 100,
          ),
      },
      ['Pass Yds', 'YDS'],
      ['Pass TD', 'TD'],
      {
        label: 'Yds/Pass',
        value: (v) =>
          formatNumber((v.YDS.value as number) / (v.ATT.value as number)),
      },
      ['Rating', 'RATE'],
      ['Games', 'GP'],
      ['Rush Yds', 'RUSHYDS'],
      ['Rush TD', 'RUSHTD'],
      ['Int', 'INT'],
      ['Sacked', 'SCK'],
    ],
    RB: [
      ['Att', 'ATT-ATT'],
      ['Rush Yds', 'RUSHYDS'],
      ['Rush TD', 'RUSHTD'],
      ['Yds/Rush', 'YPC-YPC'],
      ['Games', 'GP'],
      ['Tot Yds', 'YDS-TOT YDS'],
      ['Total TD', 'TD-TOT TD'],
      {
        label: 'Fum (L)',
        value: (v) => `${v['FUM'].value} (${v['LOST'].value})`,
      },
    ],
    WR: [
      ['Rec', 'REC-REC'],
      ['Rec Yds', 'RECYDS'],
      ['Rec TD', 'RECTD'],
      ['Games', 'GP'],
      ['Yds/Rec', 'RECAVG'],
      ['Targets', 'TRG-TRG'],
    ],
    DEF: [
      ['Sacks', 'SCK'],
      ['TFL', 'TFL'],
      ['Int', 'INT'],
      'FF',
      ['Games', 'GP'],
      ['Tackles', 'TKL'],
      ['Pass Def', 'PDEF'],
      {
        label: 'TD',
        value: (v) =>
          `${(v['FR TD'].value as number) + (v['INT TD-TD'].value as number)}`,
      },
    ],
    OL: [
      ['Games', 'GP'],
      ['Starts', 'GS'],
    ],
    K: [
      'FGM',
      'FGA',
      'FG%',
      ['Long', 'LNG'],
      'XPM',
      'XPA',
      'XP%',
      ['Games', 'GP'],
    ],
    P: [
      ['Punts', 'PUNT'],
      ['Yards', 'YDS'],
      ['Avg', 'AVG'],
      ['Games', 'GP'],
      ['Long', 'LNG'],
      ['Blocked', 'BLK'],
    ],
  },
  mlb: {
    DEFAULT: ['HR', 'RBI', 'AVG', 'OBP', 'SLG', 'AB', 'R', 'H', 'BB', 'SB'],
    P: [
      { label: 'Record', value: (v) => `${v.W.value}-${v.L.value}` },
      'ERA',
      'SO',
      'BB',
      'WHIP',
      'IP',
      'G',
      'GS',
      'SV',
      {
        label: 'K/9',
        value: (v) =>
          formatNumber(((v.SO.value as number) / (v.IP.value as number)) * 9),
      },
    ],
  },
  nhl: {
    DEFAULT: [
      ['Goals', 'G'],
      ['Assists', 'A'],
      ['Points', 'P'],
      '+/-',
      ['Shot %', 'S%'],
      ['Games', 'GP'],
      'PPG',
      'PPA',
      'PIM',
      'S',
    ],
    D: [
      ['Goals', 'G'],
      ['Assists', 'A'],
      ['Points', 'P'],
      '+/-',
      ['Shot %', 'S%'],
      ['Games', 'GP'],
      'HIT',
      'BKS',
      'TKA',
      'PIM',
    ],
    G: [
      'GP',
      'GS',
      ['Wins', 'W'],
      ['Losses', 'L'],
      'OTL',
      'SHO',
      'GAA',
      ['Save%', 'SV%'],
      ['Saves', 'SV'],
      ['Minutes', 'MIN'],
    ],
  },
}

const active = bio.isActive
const statPanelStartIndex = active ? 0 : league === 'fc' ? -1 : -2
const statPanelEndIndex = active ? 2 : stats?.grid.rows.length

const rows = stats?.grid.rows.slice(statPanelStartIndex, statPanelEndIndex)

const statPanels = rows?.map(
  (r) => r[stats?.grid.columns[0].rowItemKey].display,
)
const seasonLeagueColumns =
  league === 'pga' || league === 'money' ? [] : seasonStatColumns[league]
const seasonLeagueStats = Array.isArray(seasonLeagueColumns)
  ? seasonLeagueColumns
  : seasonLeagueColumns[normalizedPosition] ?? seasonLeagueColumns['DEFAULT']
const seasonPanels = statPanels?.map((title, index) => ({
  title,
  stats: seasonLeagueStats?.map((stat) => calculateStat(stat, rows[index])),
}))

// console.log('stats', JSON.stringify(stats?.grid.rows, undefined, 2))

const nextGameStatColumns: Record<League, Stat[] | Record<string, Stat[]>> = {
  fc: {
    DEFAULT: ['M', 'START', 'G', 'A'],
    GK: ['M', 'START', 'CS', 'GC'],
  },
  nba: ['G', 'PPG', 'RPG', 'APG'],
  nfl: {
    QB: ['G', 'YDS', 'TD', 'INT'],
    RB: ['G', ['ATT', 'ATT-ATT'], ['YDS', 'RUSHYDS'], ['TD', 'RUSHTD']],
    WR: ['G', ['REC', 'REC-REC'], ['YDS', 'RECYDS'], ['TD', 'RECTD']],
    DEF: ['G', ['SCK', 'SCK'], ['TFL', 'TFL'], ['INT', 'INT']],
    OL: [['Starts', 'GS']],
    K: ['G', 'FGM', ['Long', 'LNG']],
    P: ['G', ['Punts', 'PUNT'], ['Avg', 'AVG'], ['Long', 'LNG']],
  },
  mlb: {
    DEFAULT: ['G', 'HR', 'RBI', 'AVG'],
    P: [
      { label: 'Record', value: (v) => `${v.W.value}-${v.L.value}` },
      'ERA',
      'SO',
      'BB',
    ],
  },
  nhl: {
    DEFAULT: ['GP', 'G', 'A', '+/-'],
    G: [
      'GP',
      {
        label: 'W-L-OTL',
        value: (v) => `${v.W.value}-${v.L.value}-${v.OTL.value}`,
      },
      'GAA',
      ['SV%', 'SV%'],
    ],
  },
}

const splits = await getPlayerSplits({
  context: Astro,
  domain,
  player,
  params: { seasonYear: '0' },
})
const opponentGrid = splits?.grids.find((grid) => grid.name === 'Opponent')
const nextGameOpponentSplits = opponentGrid?.rows.find(
  (r) =>
    r.SPLIT.entity?.id.split('/')[0] ===
    nextGameOpponent?.entity?.id.split('/')[0],
)
// console.log(
//   'nextGameOpponentSplits',
//   JSON.stringify(nextGameOpponentSplits, undefined, 2),
// )

const nextGameLeagueColumns =
  league === 'pga' || league === 'money' ? [] : nextGameStatColumns[league]
const nextGameStats = Array.isArray(nextGameLeagueColumns)
  ? nextGameLeagueColumns
  : nextGameLeagueColumns[normalizedPosition] ??
    nextGameLeagueColumns['DEFAULT']
const nextGameData = {
  stats: nextGameOpponentSplits
    ? nextGameStats?.map((stat) => {
        return calculateStat(stat, nextGameOpponentSplits)
      }) ?? []
    : [],
}
// console.log("nextGame", JSON.stringify(nextGame, undefined, 2))

const gamesStatColumns: Record<League, Stat[] | Record<string, Stat[]>> = {
  fc: {
    DEFAULT: ['MIN', 'G', 'A', 'YC'],
    GK: ['MIN', 'GC', 'SV', 'YC'],
  },
  nba: ['PTS', 'REB', 'AST', '3PM'],
  nfl: {
    QB: ['YDS', 'TD', 'INT', 'RATE'],
    RB: [
      ['ATT', 'ATT-ATT'],
      ['YDS', 'RUSHYDS'],
      ['TD', 'RUSHTD'],
      ['TOT TD', 'TD-TOT TD'],
    ],
    WR: [
      ['REC', 'REC-REC'],
      ['TRG', 'TRG-TRG'],
      ['YDS', 'RECYDS'],
      ['TD', 'RECTD'],
    ],
    DEF: ['SCK', 'TFL', 'INT', 'FF'],
    OL: [['Starts', 'GS']],
    K: [
      { label: 'FG', value: (v) => `${v.FGM.value}-${v.FGA.value}` },
      { label: 'XP', value: (v) => `${v.XPM.value}-${v.XPA.value}` },
      ['Long', 'LNG'],
    ],
    P: [
      ['Punts', 'PUNT'],
      ['Avg', 'AVG'],
      ['Long', 'LNG'],
    ],
  },
  mlb: {
    DEFAULT: ['AB', 'H', 'HR', 'RBI'],
    P: ['IP', 'ER', 'SO', 'BB'],
  },
  nhl: {
    DEFAULT: ['G', 'A', 'P', '+/-'],
    G: [
      {
        label: 'W-L-OTL',
        value: (v) => `${v.W.value}-${v.L.value}-${v.OTL.value}`,
      },
      'GAA',
      ['SV%', 'SV%'],
    ],
  },
}

const gamesLeagueColumns =
  league === 'pga' || league === 'money' ? [] : gamesStatColumns[league]
const gamesStats = Array.isArray(gamesLeagueColumns)
  ? gamesLeagueColumns
  : gamesLeagueColumns[normalizedPosition] ?? gamesLeagueColumns['DEFAULT']
const games = recentGames?.grid.rows.map((r, index) => ({
  game: r,
  stats:
    gamesStats?.map((stat) =>
      calculateStat(stat, recentGames.grid.rows[index]),
    ) ?? [],
}))
// console.log('recentGames', JSON.stringify(recentGames, undefined, 2))
---

<PlayerLayout {bio} {meta} {league} {query} {analytics} page="overview">
  <div class="space-y-3 gap-3 justify-center lg:columns-2">
    <BioPanel {bio} {domain} />
    {
      seasonPanels?.map((panel, index) => (
        <Panel
          team={index === 0}
          title={panel.title}
          href={playerPath + '/career-stats'}
        >
          <div
            class:list={{
              'grid grid-cols-2 gap-3 py-3 leading-snug items-center': true,
              'grid-cols-5': panel.stats?.length === 10,
              'grid-cols-4': panel.stats?.length === 8,
              'grid-cols-3': panel.stats?.length === 6,
            }}
          >
            {panel.stats?.map(({ key, value }) => (
              <div class="flex flex-col items-center">
                <div class="whitespace-nowrap">{formatNumber(value)}</div>
                <div class="font-light text-sm opacity-80 whitespace-nowrap">
                  {key}
                </div>
              </div>
            ))}
          </div>
        </Panel>
      ))
    }
    {
      summary ? (
        <Panel title="Summary">
          <div class="leading-snug">
            <p set:html={summary} />
          </div>
        </Panel>
      ) : null
    }
    {
      profile ? (
        <PlayerPerformanceCard
          domain={profile.bio.domain}
          bio={profile.bio}
          recentGames={profile.recentGames}
        />
      ) : null
    }
    {
      games ? (
        <Panel title="Games" href={playerPath + '/game-log'}>
          <ol class="flex flex-col gap-2">
            {nextGame ? (
              <li class="-mx-3 px-3 border-b border-gray-6 dark:border-gray-4">
                <div class="grid grid-cols-4 gap-2 justify-stretch items-end pb-2.5">
                  <div>
                    <p class="text-sm text-gray-5">Next</p>
                    <EntityLink
                      entity={nextGameOpponent.entity}
                      class="flex gap-1 items-center -mt-0.5 text-inherit"
                    >
                      <p class="whitespace-nowrap">
                        {isNextGameHome ? 'vs' : 'at'}
                      </p>
                      <Image
                        class:list={{
                          'h-4 max-w-4': true,
                          'select-none': true,
                          'object-contain object-center': true,
                        }}
                        alt={nextGameOpponent?.name}
                        src={nextGameOpponent?.logoImageUrl}
                        width={16}
                        height={16}
                        loading="eager"
                      />
                      <p class="whitespace-nowrap">
                        {nextGameOpponent.abbreviation}
                      </p>
                    </EntityLink>
                  </div>
                  <div class="col-span-3 grid grid-cols-5 gap-1">
                    <div class="whitespace-nowrap text-gray-5">
                      <p class="text-sm">CAREER</p>
                      <p>{`${isNextGameHome ? 'vs' : 'at'} ${
                        nextGameOpponent.abbreviation
                      }`}</p>
                    </div>
                    {nextGameData.stats?.map((stat) => (
                      <div class="text-gray-5 text-center">
                        <p class="text-sm whitespace-nowrap">{stat.key}</p>
                        <p class="whitespace-nowrap">{stat.value}</p>
                      </div>
                    ))}
                  </div>
                </div>
              </li>
            ) : null}
            {games.map(({ game, stats }, index) => (
              <li
                class:list={{
                  '-mx-3 px-3 border-gray-6 dark:border-gray-4': true,
                  'border-b': index !== games.length - 1,
                }}
              >
                <div
                  class:list={{
                    'grid grid-cols-4 gap-2 justify-stretch items-end py-2.5': true,
                    'pt-0': index === 0,
                  }}
                >
                  <div>
                    <EntityLink
                      entity={game.SCORE.entity}
                      class="text-sm text-gray-5 whitespace-nowrap"
                    >
                      {formatDate(game.DATE.display, 'ddd, MMM DD')}
                    </EntityLink>
                    <EntityLink
                      entity={game.OPP.entity}
                      class="flex gap-1 items-center -mt-0.5 text-inherit"
                    >
                      <p class="whitespace-nowrap">
                        {game.ALIGNMENT.display.replace('@', 'at')}
                      </p>
                      {game.OPP.imageUrl ? (
                        <Image
                          class:list={{
                            'h-4 max-w-4': true,
                            'select-none': true,
                            'object-contain object-center': true,
                          }}
                          alt={game.OPP.display}
                          src={game.OPP.imageUrl}
                          width={16}
                          height={16}
                          loading="eager"
                        />
                      ) : null}
                      <p class="whitespace-nowrap">{game.OPP.display}</p>
                    </EntityLink>
                  </div>
                  <EntityLink
                    entity={game.SCORE.entity}
                    class="whitespace-nowrap text-right text-inherit"
                  >
                    {game.SCORE.display}
                  </EntityLink>
                  <div class="col-span-2 grid grid-cols-4 gap-1 text-center">
                    {stats?.map((stat) => (
                      <div
                        class:list={{ 'col-span-2': stat.key === 'W-L-OTL' }}
                      >
                        <p class="text-sm text-gray-5 whitespace-nowrap">
                          {stat.key}
                        </p>
                        <p class="whitespace-nowrap">{stat.value}</p>
                      </div>
                    ))}
                  </div>
                </div>
              </li>
            ))}
          </ol>
        </Panel>
      ) : null
    }
  </div>
</PlayerLayout>
