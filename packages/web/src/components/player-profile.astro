---
import PlayerLayout from '@layouts/player.astro'
import Grid from '@components/grid.svelte'
import Panel from '@components/panel.astro'
import {
  tokensToText,
  tokensToHtml,
  getUrlForEntity,
} from '@statmuse/core/gamera'
import { getPlayerProfile, getPositionName } from '@lib/player'
import { getLeagueKeywords } from '@lib/meta'
import { NOT_FOUND_404 } from '@lib/response'
import { leagueToDomain, type LeagueParam } from '@lib/params'
import type { AnalyticsPageviewProperties } from '@lib/analytics'
import { age, formatDate } from '@statmuse/core/time'

interface Props {
  league: LeagueParam
  player: string
  query?: string
  analytics?: AnalyticsPageviewProperties
}

const analytics = Astro.props.analytics
const query = Astro.props.query
const player = Astro.props.player
const leagueParam = Astro.props.league

if (!player || !leagueParam) return NOT_FOUND_404

const domain = leagueToDomain(leagueParam)
const profile = await getPlayerProfile(Astro, domain, player)
if (!profile) return NOT_FOUND_404

const { bio, stats, nextGame, fantasy } = profile
const recentGames = profile.recentGames
  ? 'grid' in profile.recentGames
    ? profile.recentGames
    : { grid: profile.recentGames }
  : undefined

const isNextGameHome =
  profile.bio.team?.abbreviation === nextGame?.homeTeam.abbreviation

const summary = bio.summaryNlg ? tokensToHtml(bio.summaryNlg) : undefined
const playerPath = getUrlForEntity({
  type: 'player',
  domain: bio.domain,
  id: bio.playerId.toString(),
  display: bio.usedName,
})

const position = getPositionName(bio)
const title = `${bio.usedName} - ${bio.team?.name || bio.domain} ${
  position || 'Player'
}`
const description = bio.summaryNlg ? tokensToText(bio.summaryNlg) : undefined
const keywords = `${getLeagueKeywords(domain)} ${
  bio.usedName
} career stats statistics`
const canonical = { url: playerPath, rewrite: true }
const meta = { title, description, keywords, canonical }
const league = domain.toLowerCase() === 'epl' ? 'fc' : leagueParam

const facts: { label: string; value: string }[] = []

if (bio.position) facts.push({ label: 'Position', value: bio.position })
if (bio.jerseyNumber)
  facts.push({ label: 'Number', value: '#' + bio.jerseyNumber })
if (bio.birthdate)
  facts.push({
    label: formatDate(bio.birthdate, 'MMM D, YYYY'),
    value: age(bio.birthdate) + ' years',
  })
if (league === 'fc') {
  if (bio.heightCentimeters)
    facts.push({ label: 'Height', value: bio.heightCentimeters })
  if (bio.preferredFoot)
    facts.push({ label: 'Preferred foot', value: bio.preferredFoot })
  if (bio.nationality) facts.push({ label: 'Country', value: bio.nationality })
} else {
  if (bio.heightFeetInches)
    facts.push({ label: 'Height', value: bio.heightFeetInches })
  if (bio.weightLbs)
    facts.push({ label: 'Weight', value: bio.weightLbs + ' lbs' })
  if (bio.experience) facts.push({ label: 'Experience', value: bio.experience })
}

const nextGameTitle = `Next Game ${isNextGameHome ? 'vs' : '@'} ${
  isNextGameHome
    ? nextGame?.awayTeam.abbreviation
    : nextGame?.homeTeam.abbreviation
}`

const statPanels = stats?.grid.rows.map(
  (r) => r[stats?.grid.columns[0].rowItemKey].display,
)
const statColumns = [
  'PPG',
  'RPG',
  'APG',
  'SPG',
  'BPG',
  'MPG',
  'FG%',
  '3P%',
  'FT%',
  'TS%',
]
const panels = statPanels.map((title, index) => ({
  title,
  stats: statColumns.map((col) => ({
    key: col,
    value: stats?.grid.rows[index][col]?.value,
  })),
}))
---

<PlayerLayout
  {bio}
  {meta}
  {league}
  {query}
  {analytics}
  page="overview"
  class="md:grid grid-cols-3"
>
  <Panel
    team
    class:list={{
      'col-span-2': true,
      'grid grid-cols-3 gap-3 py-3 leading-snug items-center': true,
      'md:flex md:flex-wrap md:justify-around': true,
    }}
  >
    {
      facts.map(({ label, value }) => (
        <div class="flex flex-col items-center">
          <div>{value}</div>
          <div class="font-light text-sm opacity-80">{label}</div>
        </div>
      ))
    }
  </Panel>
  {
    panels.map((panel, index) => (
      <Panel
        team={index === 0}
        class:list={{
          'col-span-2': true,
        }}
        title={panel.title}
      >
        <div
          class:list={{
            'grid grid-cols-5 gap-3 py-3 leading-snug items-center': true,
            'md:flex md:flex-wrap md:justify-around': true,
          }}
        >
          {panel.stats.map(({ key, value }) => (
            <div class="flex flex-col items-center">
              <div>{value?.toFixed(1) ?? 'N/A'}</div>
              <div class="font-light text-sm opacity-80">{key}</div>
            </div>
          ))}
        </div>
      </Panel>
    ))
  }
  {
    nextGame?.grid && (
      <Grid title={nextGameTitle} client:load data={nextGame.grid} />
    )
  }
  {stats?.grid && <Grid title="Stats" client:load data={stats.grid} />}
  {
    recentGames?.grid && (
      <Grid
        title={recentGames.grid.name}
        client:load
        data={recentGames.grid}
        columnStyles={{ DATE: 'text-left', SCORE: 'text-left' }}
      />
    )
  }
  {
    fantasy?.grid && (
      <Grid title={fantasy.grid.name} client:load data={stats.grid} />
    )
  }
  <Panel title="Summary">
    <div class="leading-snug">
      <p set:html={summary} />
    </div>
  </Panel>
</PlayerLayout>
