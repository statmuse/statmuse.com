---
import PlayerLayout from '@layouts/player.astro'
import Panel from '@components/panel.astro'
import Image from '@components/image.astro'
import {
  tokensToText,
  tokensToHtml,
  getUrlForEntity,
  getDefaultBustImageUrl,
  type GameraGrid,
} from '@statmuse/core/gamera'
import { getPlayerProfile, getPositionName } from '@lib/player'
import { getLeagueKeywords } from '@lib/meta'
import { NOT_FOUND_404 } from '@lib/response'
import { leagueToDomain, type LeagueParam } from '@lib/params'
import type { AnalyticsPageviewProperties } from '@lib/analytics'
import { age, formatDate } from '@statmuse/core/time'

interface Props {
  league: LeagueParam
  player: string
  query?: string
  analytics?: AnalyticsPageviewProperties
}

const analytics = Astro.props.analytics
const query = Astro.props.query
const player = Astro.props.player
const leagueParam = Astro.props.league

if (!player || !leagueParam) return NOT_FOUND_404

const domain = leagueToDomain(leagueParam)
const profile = await getPlayerProfile(Astro, domain, player)
if (!profile) return NOT_FOUND_404

const { bio, stats, nextGame, fantasy } = profile
const recentGames = profile.recentGames
  ? 'grid' in profile.recentGames
    ? profile.recentGames
    : { grid: profile.recentGames }
  : undefined

const isNextGameHome =
  profile.bio.team?.abbreviation === nextGame?.homeTeam.abbreviation

const summary = bio.summaryNlg ? tokensToHtml(bio.summaryNlg) : undefined
const playerPath = getUrlForEntity({
  type: 'player',
  domain: bio.domain,
  id: bio.playerId.toString(),
  display: bio.usedName,
})

const bustImageUrl = bio.bustImageUrl || getDefaultBustImageUrl(domain)
const bustImageAlt = bio.bustImageUrl?.includes('silhouette')
  ? `Illustrated silhouette of a player wearing the ${bio.team?.name} uniform`
  : `Illustration of ${bio.usedName} wearing the ${bio.team?.name} uniform`

const position = getPositionName(bio)
const title = `${bio.usedName} - ${bio.team?.name || bio.domain} ${
  position || 'Player'
}`
const description = bio.summaryNlg ? tokensToText(bio.summaryNlg) : undefined
const keywords = `${getLeagueKeywords(domain)} ${
  bio.usedName
} career stats statistics`
const canonical = { url: playerPath, rewrite: true }
const meta = { title, description, keywords, canonical }
const league = domain.toLowerCase() === 'epl' ? 'fc' : leagueParam

const facts: { label: string; value: string }[] = []

if (bio.position) facts.push({ label: 'Position', value: bio.position })
if (bio.jerseyNumber)
  facts.push({ label: 'Number', value: '#' + bio.jerseyNumber })
if (bio.birthdate)
  facts.push({
    label: formatDate(bio.birthdate, 'MMM D, YYYY'),
    value: age(bio.birthdate) + ' years',
  })
if (league === 'fc') {
  if (bio.heightCentimeters)
    facts.push({ label: 'Height', value: bio.heightCentimeters })
  if (bio.preferredFoot)
    facts.push({ label: 'Preferred foot', value: bio.preferredFoot })
  if (bio.nationality) facts.push({ label: 'Country', value: bio.nationality })
} else {
  if (bio.heightFeetInches)
    facts.push({ label: 'Height', value: bio.heightFeetInches })
  if (bio.weightLbs)
    facts.push({ label: 'Weight', value: bio.weightLbs + ' lbs' })
  if (bio.experience) facts.push({ label: 'Experience', value: bio.experience })
}
if (bio.awards) {
  const champ = bio.awards.find((a) => a.name === `${domain} Champion`)
  if (champ?.years.length)
    facts.push({ label: `${domain} Champ`, value: `${champ.years.length}x` })
  const mvp = bio.awards.find((a) => a.name === 'MVP')
  if (mvp?.years.length)
    facts.push({ label: 'MVP', value: `${mvp.years.length}x` })
  const dpoy = bio.awards.find((a) => a.name === 'Defensive Player Of The Year')
  if (dpoy?.years.length)
    facts.push({ label: 'DPOY', value: `${dpoy.years.length}x` })
  const proBowl = bio.awards.find((a) => a.name === 'Pro Bowl')
  if (proBowl?.years.length)
    facts.push({ label: 'Pro Bowl', value: `${proBowl.years.length}x` })
}

const nextGameOpponnent = isNextGameHome
  ? nextGame?.awayTeam
  : nextGame?.homeTeam

type Row = GameraGrid['rows'][number]
type Stat = string | string[] | { label: string; value: (v: Row) => string } | undefined

const formatNumber = (value: unknown) =>
  (typeof value === 'number'
    ? value.toFixed(1).replace('.0', '')
    : (value as string)) ?? '-'
const formatPercentage = (value: number) => `${formatNumber(value)}%`
const statPanels = stats?.grid.rows
  .slice(0, 2)
  .map((r) => r[stats?.grid.columns[0].rowItemKey].display)

const calculateStat = (stat: Stat, row: Row) => ({
  key:
    typeof stat === 'string'
      ? stat
      : Array.isArray(stat)
      ? stat[0]
      : stat.label,
  value: formatNumber(
    typeof stat === 'string'
      ? (row[stat]?.value as number)
      : Array.isArray(stat)
      ? row[stat[1]]?.value
      : stat.value(row),
  ),
})

const normalizeNflPosition = (position: string) => {
  switch (position) {
    case 'QB':
    case 'RB':
    case 'WR':
    case 'K':
    case 'P':
    case 'OL':
      return position
    case 'TE':
      return 'WR'
    default:
      return 'DEF'
  }
}

const normalizedPosition =
  league === 'nfl' ? normalizeNflPosition(bio.position) : bio.position

//   {
//   TIMEFRAME: { display: '2023-24' },
//   M: { value: 24, display: '24' },
//   START: { value: 23, display: '23' },
//   G: { value: 18, display: '18' },
//   A: { value: 5, display: '5' },
//   'G+A': { value: 23, display: '23' },
//   PK: { value: 3, display: '3' },
//   FK: { value: 0, display: '0' },
//   SH: { value: 95, display: '95' },
//   ST: { value: 44, display: '44' },
//   PASS: { value: 218, display: '218' },
//   CRS: { value: 5, display: '5' },
//   FOUL: { value: 15, display: '15' },
//   OFF: { value: 2, display: '2' },
//   YC: { value: 1, display: '1' },
//   RC: { value: 0, display: '0' }
// }


const seasonStatColumns: Record<LeagueParam, Stat[] | Record<string, Stat[]>> =
  {
    fc: {
      FW: [
        ['Goals', 'G'],
        ['Assists', 'A'],
        ['xG', ''],
        ['xA', ''],
        ['Matches', 'M'],
        ['Starts', 'START'],
        ['Shots', 'SH'],
        ['On Target', 'ST']
      ]
    },
    nba: ['PPG', 'RPG', 'APG', 'SPG', 'BPG', 'MPG', 'FG%', '3P%', 'FT%', 'TS%'],
    nfl: {
      QB: [
        {
          label: 'Comp Pct',
          value: (v) => formatPercentage((v.CMP.value / v.ATT.value) * 100),
        },
        ['Pass Yds', 'YDS'],
        ['Pass TD', 'TD'],
        {
          label: 'Yds/Pass',
          value: (v) => formatNumber(v.YDS.value / v.ATT.value),
        },
        ['Rating', 'RATE'],
        ['Games', 'GP'],
        ['Rush Yds', 'RUSHYDS'],
        ['Rush TD', 'RUSHTD'],
        ['Int', 'INT'],
        ['Sacked', 'SCK'],
      ],
      RB: [
        ['Att', 'ATT-ATT'],
        ['Rush Yds', 'RUSHYDS'],
        ['Rush TD', 'RUSHTD'],
        ['Yds/Rush', 'YPC-YPC'],
        ['Games', 'GP'],
        ['Tot Yds', 'YDS-TOT YDS'],
        ['Total TD', 'TD-TOT TD'],
        ['FUM (L)', 'LOST'],
      ],
      WR: [
        ['Rec', 'REC-REC'],
        ['Rec Yds', 'RECYDS'],
        ['Rec TD', 'RECTD'],
        ['Games', 'GP'],
        ['Yds/Rec', 'RECAVG'],
        ['Targets', 'TRG-TRG'],
      ],
      DEF: [
        ['Sacks', 'SCK'],
        ['TFL', 'TFL'],
        ['Int', 'INT'],
        ['FF', ''],
        ['Games', 'GP'],
        ['Tackles', 'TKL'],
        ['Pass Def', 'PDEF'],
        ['TD', ''],
      ],
      OL: [
        ['Games', 'GP'],
        ['Starts', 'GS'],
      ],
      K: [
        'FGM',
        'FGA',
        "FG%",
        ["Long", ''],
        'XPM',
        'XPA',
        'XP%',
        ['Games', 'GP']
      ],
      P: [
        ['Punts', 'PUNT'],
        ['Yards', 'YDS'],
        ['Avg', 'AVG'],
        ['Games', 'GP'],
        ['Long', "LNG"],
        ['Blocked', 'BLK']
      ]
    },
  }

const seasonLeagueColumns = seasonStatColumns[league]
const seasonLeagueStats = Array.isArray(seasonLeagueColumns)
  ? seasonLeagueColumns
  : seasonLeagueColumns[normalizedPosition]
const seasonPanels = statPanels.map((title, index) => ({
  title,
  stats: seasonLeagueStats?.map((stat) =>
    calculateStat(stat, stats?.grid.rows[index]),
  ),
}))
console.log(stats?.grid.rows[0])

const lastGameStatColumns: Record<
  LeagueParam,
  Stat[] | Record<string, Stat[]>
> = {
  fc: {
    DEFAULT: [
      'MIN',
      'G',
      'A',
      ['xG', ''],
      ['xA', ''],
      {label: 'Shot %', value: (v) => `${v.ST.value}/${v.SH.value} (${formatPercentage(v.ST.value / v.SH.value)})` },
      {label: 'Pass %', value: (v) => `${v.ST.value}/${v.SH.value} (${formatPercentage(v.ST.value / v.SH.value)})` },
      ['Big Chance Crtd', ''],
      ['Key Pass', ''],
      ['Touches (Opp Box)', ''],
      ['Duel W-L', ''],
      ['Aerial W-L', ''],
      ['Tackle Made', ''],
      ['Clearance', ''],
      ['Foul', 'FOUL'],
      ['Fouled', ''],
      ['Offside', ''],
      'YC',
      'RC'
    ]
  },
  nba: [
    'MIN',
    'PTS',
    {
      label: 'REB (O)',
      value: (v) => `${v?.DREB?.value + v?.OREB?.value} (${v?.OREB?.value})`,
    },
    'AST',
    'STL',
    'BLK',
    '+/-',
    'TOV',
    'PF',
    { label: 'FG', value: (v) => `${v?.FGM?.value}/${v?.FGA?.value}` },
    { label: '3P', value: (v) => `${v['3PM']?.value}/${v['3PA']?.value}` },
    { label: 'FT', value: (v) => `${v?.FTM?.value}/${v?.FTA?.value}` },
    'TS%',
  ],
  nfl: {
    QB: [
      ['Comp', 'CMP'],
      ['Att', 'ATT'],
      {
        label: 'Pct',
        value: (v) => formatPercentage((v.CMP.value / v.ATT.value) * 100),
      },
      ['Yds', 'YDS'],
      ['Avg', 'AVG'],
      'TD',
      ['Int', 'INT'],
      ['Sacked', 'SCK'],
      ['Long', 'LNG'],
      ['Rating', 'RATE'],
      ['Tot Yds', 'TOTALYDS-TOT YDS'],
      ['Tot TD', 'TOTALTD-TOT TD'],
      ['Fum (L)', 'LOST'],
    ],
    RB: [
      ['Att', 'ATT-ATT'],
      ['Rush Yds', 'RUSHYDS'],
      ['Avg', 'YPC-YPC'],
      ['TD', 'RUSHTD'],
      ['Long', 'RUSHLNG'],
      ['Rec', 'REC-REC'],
      ['Rec Yds', 'RECYDS'],
      ['Rec TD', 'RECTD'],
      ['Tot Yds', 'YDS-TOT YDS'],
      ['Tot TD', 'TD-TOT TD'],
      ['Fum (L)', 'LOST'],
    ],
    WR: [
      ['Rec', 'REC-REC'],
      ['Trg', 'TRG-TRG'],
      ['Yds', 'RECYDS'],
      ['Avg', 'RECAVG'],
      ['TD', 'RECTD'],
      ['Long', 'RECLNG'],
      ['Tot Yds', 'YDS-TOT YDS'],
      ['Tot TD', 'TD-TOT TD'],
      ['Fum (L)', 'LOST'],
    ],
    DEF: [
      ['Comb Tkl', 'COMB'],
      ['Solo Tkl', 'TKL'],
      ['Ast Tkl', 'AST'],
      ['TFL', 'TFL'],
      ['Sacks', 'SCK'],
      ['FF', 'FF'],
      ['Int', 'INT'],
      ['Pass Def', 'PDEF'],
      ['TD', 'TD'],
    ],
    OL: undefined,
    K: [
      'FGM',
      'FGA',
      'FG 1-19',
      'FG 20-29',
      'FG 30-39',
      'FG 40-49',
      'FG 50+',
      'XPM',
      'XPA'
    ],
    P: [
      ['Punts', 'PUNT'],
      ['Yds', 'YDS'],
      ['Avg', "AVG"],
      ["Long", 'LNG'],
      ['Blocked', 'BLK']
    ]
  },
}

const lastGameLeagueColumns = lastGameStatColumns[league]
const lastGameStats = Array.isArray(lastGameLeagueColumns)
  ? lastGameLeagueColumns
  : lastGameLeagueColumns[normalizedPosition] ?? lastGameLeagueColumns["DEFAULT"]
const lastGame = recentGames?.grid.rows[0]
const lastGameStats_ = lastGame
  ? lastGameStats?.map((stat) =>
      calculateStat(stat, recentGames.grid.rows[0]),
    ) ?? []
  : []

const nextGameStatColumns: Record<
  LeagueParam,
  Stat[] | Record<string, Stat[]>
> = {
  fc: {
    FW: []
  },
  nba: ['PPG', 'RPG', 'APG', 'TS%'],
  nfl: {
    QB: [['GMS', 'GP'], 'YDS', 'TD', 'INT'],
    RB: [
      ['GMS', 'GP'],
      ['ATT', 'ATT-ATT'],
      ['YDS', 'RUSHYDS'],
      ['TD', 'RUSHTD'],
    ],
    WR: [
      ['GMS', 'GP'],
      ['REC', 'REC-REC'],
      ['YDS', 'RECYDS'],
      ['TD', 'RECTD'],
    ],
    DEF: [
      ['GMS', 'GP'],
      ['SCK', 'SCK'],
      ['TFL', 'TFL'],
      ['INT', 'INT'],
    ],
    OL: [
      ['Record', ''], // TODO: find this
    ],
    K: [
      ['GMS', 'GP'],
      'FGM',
      [ 'Long', '' ] // TODO: find this
    ],
    P: [
      ['GMS', 'GP'],
      ['Punts', 'PUNT'],
      ['Avg', "AVG"],
      ['Long', "LNG"]
    ]
  },
}

const nextGameLeagueColumns = nextGameStatColumns[league]
const nextGameStats = Array.isArray(nextGameLeagueColumns)
  ? nextGameLeagueColumns
  : nextGameLeagueColumns[normalizedPosition]
const nextGameData = {
  stats: nextGame?.grid
    ? nextGameStats?.map((stat) =>
        calculateStat(stat, nextGame?.grid.rows[-1]),
      ) ?? []
    : [],
}
// console.log("nextGame", JSON.stringify(nextGame, undefined, 2))

const gamesStatColumns: Record<LeagueParam, Stat[] | Record<string, Stat[]>> = {
  fc: {
    FW: []
  },
  nba: ['PTS', 'REB', 'AST', '3PM'],
  nfl: {
    QB: ['YDS', 'TD', 'INT', 'RATE'],
    RB: [
      ['ATT', 'ATT-ATT'],
      ['YDS', 'RUSHYDS'],
      ['TD', 'RUSHTD'],
      ['TOT TD', 'TD-TOT TD'],
    ],
    WR: [
      ['REC', 'REC-REC'],
      ['TRG', 'TRG-TRG'],
      ['YDS', 'RECYDS'],
      ['TD', 'RECTD'],
    ],
    DEF: ['SCK', 'TFL', 'INT', 'FF'],
    OL: [['Starts', 'GS']],
    K: [
      { label: 'FG', value: (v) => `${v.FGM.value}-${v.FGA.value}` },
      { label: 'XP', value: (v) => `${v.XPM.value}-${v.XPA.value}` },
      ['Long', ''] // TODO: find this
    ],
    P: [
      ['Punts', 'PUNT'],
      ['Avg', "AVG"],
      ['Long', "LNG"]
    ]
  },
}

const gamesLeagueColumns = gamesStatColumns[league]
const gamesStats = Array.isArray(gamesLeagueColumns)
  ? gamesLeagueColumns
  : gamesLeagueColumns[normalizedPosition]
const games = recentGames?.grid.rows.map((r, index) => ({
  game: r,
  stats:
    gamesStats?.map((stat) =>
      calculateStat(stat, recentGames.grid.rows[index]),
    ) ?? [],
}))
// console.log("recentGames", JSON.stringify(recentGames, undefined, 2))
---

<PlayerLayout
  {bio}
  {meta}
  {league}
  {query}
  {analytics}
  page="overview"
  class=""
>
  <div class="space-y-3 gap-3 justify-center md:columns-2 lg:columns-3">
    <Panel
      team
      class:list={{
        'grid grid-cols-3 gap-3 py-3 leading-snug items-center': true,
      }}
    >
      {
        facts.map(({ label, value }) => (
          <div class="flex flex-col items-center">
            <div class="whitespace-nowrap">{value}</div>
            <div class="font-light text-sm opacity-80 whitespace-nowrap">
              {label}
            </div>
          </div>
        ))
      }
    </Panel>
    {
      seasonPanels.map((panel, index) => (
        <Panel team={index === 0} title={panel.title}>
          <div
            class:list={{
              'grid grid-cols-2 gap-3 py-3 leading-snug items-center': true,
              'grid-cols-5': panel.stats?.length === 10,
              'grid-cols-4': panel.stats?.length === 8,
              'grid-cols-3': panel.stats?.length === 6,
            }}
          >
            {panel.stats?.map(({ key, value }) => (
              <div class="flex flex-col items-center">
                <div class="whitespace-nowrap">{formatNumber(value)}</div>
                <div class="font-light text-sm opacity-80 whitespace-nowrap">
                  {key}
                </div>
              </div>
            ))}
          </div>
        </Panel>
      ))
    }
    {
      lastGame && lastGameStats_?.length ? (
        <Panel title="Latest Performance">
          <div class="flex items-center justify-stretch gap-1 border-b border-gray-6 dark:border-gray-4 -mx-3 px-3">
            <Image
              class:list={{
                'h-16 max-w-20': true,
                'select-none': true,
                'object-contain object-bottom': true,
              }}
              alt={bustImageAlt}
              src={bustImageUrl}
              width={400}
              height={400}
              loading="eager"
            />
            <div class="">
              <p class="whitespace-nowrap">{bio.usedName}</p>
              <div class="flex items-center justify-between gap-2 text-xs text-gray-5">
                <p class="whitespace-nowrap">
                  {formatDate(lastGame.DATE.value, 'MMM DD')}
                </p>
                <div class="flex gap-1 items-center">
                  <p class="whitespace-nowrap">
                    {lastGame?.ALIGNMENT.display.replace('@', 'at')}
                  </p>
                  <Image
                    class:list={{
                      'h-4 max-w-4': true,
                      'select-none': true,
                      'object-contain object-center': true,
                    }}
                    alt={lastGame?.OPP.display}
                    src={lastGame?.OPP.imageUrl}
                    width={100}
                    height={100}
                    loading="eager"
                  />
                  <p class="whitespace-nowrap">{lastGame?.OPP.display}</p>
                </div>
                <p class="whitespace-nowrap">{lastGame?.SCORE.display}</p>
              </div>
            </div>
          </div>
          <div
            class:list={{
              'grid gap-3 py-3 leading-snug items-center': true,
              'grid-cols-5 @xs:grid-cols-7': league !== "fc",
              'grid-cols-2 @xs:grid-cols-4': league === "fc",
            }}
          >
            {lastGameStats_?.map(({ key, value }) => (
              <div class="flex flex-col items-center">
                <div class="whitespace-nowrap">{formatNumber(value)}</div>
                <div class="font-light text-sm opacity-80 whitespace-nowrap">
                  {key}
                </div>
              </div>
            ))}
          </div>
        </Panel>
      ) : null
    }
    <Panel title="Summary">
      <div class="leading-snug">
        <p set:html={summary} />
      </div>
    </Panel>
    {
      games ? (
        <Panel title="Games">
          <ol class="flex flex-col gap-2">
            {nextGame ? (
              <li class="-mx-3 px-3 border-b border-gray-6 dark:border-gray-4">
                <div class="grid grid-cols-4 gap-2 justify-stretch items-end pb-2.5">
                  <div>
                    <p class="text-xs text-gray-5">Next</p>
                    <div class="flex gap-1 items-center -mt-0.5">
                      <p class="whitespace-nowrap">
                        {isNextGameHome ? 'vs' : 'at'}
                      </p>
                      <Image
                        class:list={{
                          'h-4 max-w-4': true,
                          'select-none': true,
                          'object-contain object-center': true,
                        }}
                        alt={nextGameOpponnent?.name}
                        src={nextGameOpponnent?.logoImageUrl}
                        width={100}
                        height={100}
                        loading="eager"
                      />
                      <p class="whitespace-nowrap">
                        {nextGameOpponnent.abbreviation}
                      </p>
                    </div>
                  </div>
                  <div class="col-span-3 grid grid-cols-5 gap-1">
                    <div class="whitespace-nowrap text-gray-5">
                      <p class="text-xs">CAREER</p>
                      <p>{`${isNextGameHome ? 'vs' : 'at'} ${
                        nextGameOpponnent.abbreviation
                      }`}</p>
                    </div>
                    {nextGameData.stats?.map((stat) => (
                      <div class="text-gray-5 text-center">
                        <p class="text-xs">{stat.key}</p>
                        <p class="">{stat.value}</p>
                      </div>
                    ))}
                  </div>
                </div>
              </li>
            ) : null}
            {games.map(({ game, stats }, index) => (
              <li
                class:list={{
                  '-mx-3 px-3 border-gray-6 dark:border-gray-4': true,
                  'border-b': index !== games.length - 1,
                }}
              >
                <div
                  class:list={{
                    'grid grid-cols-4 gap-2 justify-stretch items-end py-2.5': true,
                    'pt-0': index === 0,
                  }}
                >
                  <div>
                    <p class="text-xs text-gray-5 whitespace-nowrap">
                      {formatDate(game.DATE.display, 'ddd, MMM DD')}
                    </p>
                    <div class="flex gap-1 items-center -mt-0.5">
                      <p class="whitespace-nowrap">
                        {game?.ALIGNMENT.display.replace('@', 'at')}
                      </p>
                      <Image
                        class:list={{
                          'h-4 max-w-4': true,
                          'select-none': true,
                          'object-contain object-center': true,
                        }}
                        alt={game?.OPP.display}
                        src={game?.OPP.imageUrl}
                        width={100}
                        height={100}
                        loading="eager"
                      />
                      <p class="whitespace-nowrap">{game?.OPP.display}</p>
                    </div>
                  </div>
                  <div class="whitespace-nowrap">{game.SCORE.display}</div>
                  <div class="col-span-2 grid grid-cols-4 gap-1 text-center">
                    {stats?.map((stat) => (
                      <div>
                        <p class="text-xs text-gray-5 whitespace-nowrap">
                          {stat.key}
                        </p>
                        <p class="">{stat.value}</p>
                      </div>
                    ))}
                  </div>
                </div>
              </li>
            ))}
          </ol>
        </Panel>
      ) : null
    }
  </div>
</PlayerLayout>
