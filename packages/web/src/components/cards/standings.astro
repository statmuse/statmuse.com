---
import { groupBy } from 'lodash-es'
import type { GameraDomain, StandingsResponse } from '@statmuse/core/gamera'
import StandingsCard from '@components/standings-card.astro'
import AditudeCardMedRec from '@components/aditude-card-med-rec.svelte'

interface Props {
  domain: GameraDomain
  response?: StandingsResponse
  adSlot?: {
    slotId: string
    baseDivId: string
  }
}

const { domain, response, adSlot } = Astro.props

if (!response || !response.teams) return undefined

const display = `${
  domain === 'NBA' ? 'Conference' : domain === 'EPL' ? '' : 'Division'
} ${domain === 'EPL' ? 'Table' : 'Standings'}`
const title = `${domain} ${response.seasonYearDisplay} ${display}`

const group = domain !== 'NBA' && domain !== 'EPL' ? 'division' : undefined

const limit =
  domain === 'NBA'
    ? 6
    : domain === 'EPL'
    ? 6
    : domain === 'NFL'
    ? 2
    : domain === 'NHL'
    ? 3
    : domain === 'MLB'
    ? 2
    : undefined
---

<div>
  <h2 class="text-xl font-bold mb-1.5">
    {title}
  </h2>
  <div class="grid grid-cols-[repeat(auto-fit,_minmax(325px,_1fr))] gap-3">
    {
      Object.entries(groupBy(response.teams, 'conference.name')).map(
        ([_, teams]) => <StandingsCard {teams} {domain} {group} {limit} />,
      )
    }
  </div>
</div>
{
  adSlot && (
    <div>
      <AditudeCardMedRec
        client:only="svelte"
        slotId={adSlot.slotId}
        baseDivId={adSlot.baseDivId}
      />
    </div>
  )
}
