---
import type { ComponentProps } from 'astro/types'
import Grid from '@components/grid.svelte'
import type Panel from '@components/panel.astro'
import type {
  StandingsNba,
  GameraGrid,
  StandingsNfl,
  StandingsNhl,
  StandingsMlb,
  StandingsEpl,
  StandingsTeam,
} from '@statmuse/core/gamera'
import { groupBy, orderBy } from 'lodash-es'

type PanelProps = ComponentProps<typeof Panel>

export type Props = {
  teams: StandingsTeam[]
  limit?: number
} & PanelProps &
  (
    | {
        domain: 'NBA'
        group?: keyof StandingsNba['rank']
      }
    | {
        domain: 'MLB'
        group?: keyof StandingsMlb['rank']
      }
    | {
        domain: 'NFL'
        group?: keyof StandingsNfl['rank']
      }
    | {
        domain: 'NHL'
        group?: keyof StandingsNhl['rank']
      }
    | {
        domain: 'EPL'
        group?: keyof StandingsEpl['rank']
      }
  )

export type StandingsDomain = Props['domain']
export type StandingsGroup = Props['group']

const { limit } = Astro.props
const props = Astro.props

const getColumns = (name?: string) => {
  let columns = [
    {
      rowItemKey: 'name',
      title: name ?? 'Team',
      type: 'string',
    },
    {
      rowItemKey: 'wins',
      title: 'W',
      type: 'number',
    },
    {
      rowItemKey: 'losses',
      title: 'L',
      type: 'number',
    },
  ]

  if (props.domain === 'NBA' || props.domain === 'MLB') {
    columns = [
      ...columns,
      {
        rowItemKey: 'winPercent',
        title: 'PCT',
        type: 'number',
      },
      {
        rowItemKey: 'gamesBehind',
        title: 'GB',
        type: 'number',
      },
    ]
  }

  if (props.domain === 'NFL') {
    columns = [
      ...columns,
      {
        rowItemKey: 'ties',
        title: 'T',
        type: 'number',
      },
      {
        rowItemKey: 'winPercent',
        title: 'PCT',
        type: 'number',
      },
    ]
  }

  if (props.domain === 'NHL') {
    columns = [
      ...columns,
      {
        rowItemKey: 'overtimeLosses',
        title: 'OTL',
        type: 'number',
      },
      {
        rowItemKey: 'points',
        title: 'PTS',
        type: 'number',
      },
      {
        rowItemKey: 'goalDifferential',
        title: 'DIFF',
        type: 'number',
      },
    ]
  }

  if (props.domain === 'EPL') {
    const [first, second, third, ...rest] = columns
    columns = [
      first,
      second,
      third,
      {
        rowItemKey: 'draws',
        title: 'D',
        type: 'number',
      },
      ...rest,
      {
        rowItemKey: 'goalDifferential',
        title: 'GD',
        type: 'number',
      },
      {
        rowItemKey: 'points',
        title: 'PTS',
        type: 'number',
      },
    ]
  }

  if (props.domain === 'NBA' || props.domain === 'EPL') {
    columns = [
      {
        rowItemKey: 'RANK',
        title: '',
        type: 'number',
      },
      ...columns,
    ]
  }

  return columns
}

const getRow = (
  team: (typeof props)['teams'][number],
): GameraGrid['rows'][number] & {
  RANK: { display: string; value: number }
} => {
  if (props.domain === 'NBA') {
    const nbaTeam = team as StandingsNba
    return {
      RANK: {
        display: nbaTeam.rank[props.group ?? 'conference'] + '',
        value: nbaTeam.rank[props.group ?? 'conference'],
      },
      name: {
        display: nbaTeam.team.nickname,
        value: nbaTeam.team.nickname,
        imageUrl: nbaTeam.team.logoImageUrl,
        entity: nbaTeam.team.entity,
      },
      wins: nbaTeam.stats.wins,
      losses: nbaTeam.stats.losses,
      winPercent: nbaTeam.stats.winPercent,
      gamesBehind: nbaTeam.stats.gamesBehind[props.group ?? 'conference'],
    }
  }

  if (props.domain === 'MLB') {
    const mlbTeam = team as StandingsMlb
    return {
      RANK: {
        display: mlbTeam.rank[props.group ?? 'league'] + '',
        value: mlbTeam.rank[props.group ?? 'league'],
      },
      name: {
        display: mlbTeam.team.nickname,
        value: mlbTeam.team.nickname,
        imageUrl: mlbTeam.team.logoImageUrl,
        entity: mlbTeam.team.entity,
      },
      wins: mlbTeam.stats.wins,
      losses: mlbTeam.stats.losses,
      winPercent: mlbTeam.stats.winPercent,
      gamesBehind: mlbTeam.stats.gamesBehind[props.group ?? 'league'],
    }
  }

  if (props.domain === 'NFL') {
    const nflTeam = team as StandingsNfl
    return {
      RANK: {
        display: nflTeam.rank[props.group ?? 'conference'] + '',
        value: nflTeam.rank[props.group ?? 'conference'],
      },
      name: {
        display: nflTeam.team.nickname,
        value: nflTeam.team.nickname,
        imageUrl: nflTeam.team.logoImageUrl,
        entity: nflTeam.team.entity,
      },
      wins: nflTeam.stats.wins,
      losses: nflTeam.stats.losses,
      ties: nflTeam.stats.ties,
      winPercent: nflTeam.stats.winPercent,
    }
  }

  if (props.domain === 'NHL') {
    const nhlTeam = team as StandingsNhl
    return {
      RANK: {
        display: nhlTeam.rank[props.group ?? 'conference'] + '',
        value: nhlTeam.rank[props.group ?? 'conference'],
      },
      name: {
        display: nhlTeam.team.nickname,
        value: nhlTeam.team.nickname,
        imageUrl: nhlTeam.team.logoImageUrl,
        entity: nhlTeam.team.entity,
      },
      wins: nhlTeam.stats.wins,
      losses: nhlTeam.stats.losses,
      points: nhlTeam.stats.points,
      goalDifferential: nhlTeam.stats.goalDifferential,
      overtimeLosses: nhlTeam.stats.overtimeLosses,
    }
  }

  if (props.domain === 'EPL') {
    const eplTeam = team as StandingsEpl
    return {
      RANK: {
        display: eplTeam.rank.league + '',
        value: eplTeam.rank.league,
      },
      name: {
        display: eplTeam.team.nickname,
        value: eplTeam.team.nickname,
        imageUrl: eplTeam.team.logoImageUrl,
        entity: eplTeam.team.entity,
      },
      wins: eplTeam.stats.wins,
      losses: eplTeam.stats.losses,
      points: eplTeam.stats.points,
      draws: eplTeam.stats.draws,
      goalDifferential: eplTeam.stats.goalDifferential,
    }
  }

  throw new Error('Invalid domain')
}

const mapToGrid = (teams: Props['teams'], conference?: string): GameraGrid => {
  const columns = getColumns(conference)

  const rows = teams
    .map((team) => getRow(team))
    .sort((a, b) => a.RANK.value - b.RANK.value)
    .slice(0, limit)

  return { columns, rows, name: conference }
}

const firstTeam = props.teams[0]

const grids = props.group
  ? Object.entries(groupBy(props.teams, `${props.group}.name`)).map(
      ([name, teams]) => mapToGrid(teams as Props['teams'], name),
    )
  : [
      mapToGrid(
        props.teams,
        firstTeam.conference?.name ?? firstTeam.league?.name,
      ),
    ]

const orderMlbDivisions = (x: GameraGrid) => {
  return {
    'AL East': 0,
    'AL Central': 1,
    'AL West': 2,
    'NL East': 0,
    'NL Central': 1,
    'NL West': 2,
  }[x.name ?? '']
}
---

<Grid
  {...props}
  data={orderBy(grids, props.domain !== 'MLB' ? 'name' : orderMlbDivisions)}
  columnStyles={{
    RANK: 'w-2',
    winPercent: 'w-2',
    gamesBehind: 'w-2',
    wins: 'w-2',
    losses: 'w-2',
    ties: 'w-2',
    draws: 'w-2',
    overtimeLosses: 'w-2',
    points: 'w-2',
    goalDifferential: 'w-2',
  }}
  textInherit
/>
