---
import { Api } from 'sst/node/api'

interface Props {
  query?: string
  conversationToken?: string
  preferredDomain?: string
  money?: boolean
}
---

<form
  class="ask-form"
  action={Astro.props.money ? '/money/ask' : '/ask'}
  accept-charset="UTF-8"
  method="post"
  data-api-url={Api.api.url}
>
  <div
    role="combobox"
    aria-haspopup="listbox"
    aria-owns="react-autowhatever-1"
    aria-expanded="false"
    class="relative rounded-lg text-[#191919]"
  >
    <div class="relative group">
      <textarea
        class="ask-textarea input appearance-none outline-none resize-none block w-full border border-black rounded-lg p-2.5 focus:shadow-md peer group-hover:shadow-md"
        autocomplete="off"
        aria-autocomplete="list"
        aria-controls="react-autowhatever-1"
        name="question[query]"
        placeholder={Astro.props.money
          ? 'Search stocks, FX or bitcoin'
          : 'Search players, stats or odds'}
        required=""
        enterkeyhint="search"
        style="height: 46px !important;"
        set:text={Astro.props.query}
      />
      <input
        type="submit"
        class="ask-bar-search-icon absolute bottom-3 right-2.5 block w-5 h-5 cursor-pointer"
        value=""
      />
    </div>
    <div
      id="react-autowhatever-1"
      role="listbox"
      class="hidden bg-white w-full px-2 absolute top-full border-x border-x-black border-b border-b-black rounded-b-lg shadow-md"
    >
    </div>
  </div>
  <input
    name="question[preferred_domain]"
    type="hidden"
    value={Astro.props.preferredDomain}
  />
  <input
    name="question[conversation_token]"
    type="hidden"
    value={Astro.props.conversationToken}
  />
  <input
    name="_csrf_token"
    type="hidden"
    value="CzZHLDIeYyB8JCQYH04wP3A-AmYjXQApgQjsBNTT9sRLE8Yo5oi6H61K"
  />
</form>

<script>
  import { throttle } from 'lodash-es'
  import type { AskDocument } from '@statmuse/core/elastic'

  // UI Helpers

  const createElement = (
    tag: string,
    options: Record<string, string>
  ): HTMLElement => {
    const element = document.createElement(tag)
    const { innerText, ...rest } = options
    Object.entries(rest).forEach(([key, value]) => {
      element.setAttribute(key, value)
    })
    if (innerText) element.innerText = innerText.toString()
    return element
  }

  const renderSuggestion = (
    item: HTMLElement,
    suggestion: Partial<AskDocument>
  ) => {
    const content = createElement('span', { class: 'flex items-center' })

    switch (suggestion.type) {
      case 'answer':
        content.appendChild(
          createElement('span', {
            class: `suggestion-${suggestion.league?.toLowerCase()}-icon w-6 h-6 mr-2.5 shrink-0`,
          })
        )
        break
      case 'player':
        content.appendChild(
          createElement('div', {
            class: 'w-7 h-7 mr-2.5 rounded-sm shrink-0',
            style: `background: #c5c9cc url(${suggestion.image_url}) no-repeat center top/145%;`,
          })
        )
        break
      case 'team':
        content.appendChild(
          createElement('div', {
            class: 'w-7 h-7 mr-2.5 rounded-sm shrink-0',
            style: `background: #c5c9cc url(${suggestion.image_url}) no-repeat center / contain;`,
          })
        )
        break
      default:
        content.appendChild(
          createElement('span', {
            class: 'suggestion-example-icon w-6 h-6 mr-2.5 shrink-0',
          })
        )
    }

    content.appendChild(
      createElement('span', { innerText: suggestion.display || '' })
    )

    item.replaceChildren(content)
    if (!item.parentNode) {
      combobox.append(item)
    }
  }

  // Init

  const form = document.querySelector('form.ask-form') as HTMLFormElement
  const textarea = document.querySelector(
    'textarea.ask-textarea'
  ) as HTMLTextAreaElement
  const combobox = document.getElementById(
    'react-autowhatever-1'
  ) as HTMLElement
  const apiUrl = `${form.dataset.apiUrl}${
    form.action.includes('money') ? '/money/search/suggest' : '/search/suggest'
  }`
  const league = form.action.includes('money')
    ? undefined
    : (
        document.querySelector(
          'input[name=question\\[preferred_domain\\]]'
        ) as HTMLInputElement
      ).value

  // State

  const state = {
    suggestions: [] as AskDocument[],
    timestamp: new Date().toISOString(),
    listItems: Array.from(new Array(10)).map(() =>
      createElement('div', { class: 'py-1.5 px-1 cursor-pointer' })
    ),
    selectedIndex: -1,
    query: '',
  }

  // Listeners

  textarea.addEventListener('input', () => {
    if (state.selectedIndex !== -1) {
      state.listItems[state.selectedIndex].classList.remove('bg-[#eee]')
      state.selectedIndex = -1
    }
    state.query = textarea.value
    loadSuggestions(state.query)
  })

  textarea.addEventListener('keydown', (e) => {
    const event = e as KeyboardEvent

    if (event.keyCode === 13) {
      if (!event.repeat) {
        form.submit()
      }

      return e.preventDefault() // Prevents the addition of a new line in the text field
    }

    if (event.key === 'ArrowUp') {
      e.preventDefault()
      const prev = state.selectedIndex
      state.selectedIndex =
        state.selectedIndex === -1
          ? state.suggestions.length - 1
          : state.selectedIndex - 1 >= 0
          ? state.selectedIndex - 1
          : -1
      if (state.selectedIndex === -1) {
        textarea.value = state.query
        return state.listItems[prev].classList.remove('bg-[#eee]')
      }
      if (prev !== -1) state.listItems[prev].classList.remove('bg-[#eee]')
      state.listItems[state.selectedIndex].classList.add('bg-[#eee]')
      return (textarea.value = state.suggestions[state.selectedIndex].display)
    }

    if (event.key === 'ArrowDown') {
      e.preventDefault()
      const prev = state.selectedIndex
      state.selectedIndex =
        state.selectedIndex + 1 < state.suggestions.length
          ? state.selectedIndex + 1
          : -1
      if (state.selectedIndex === -1) {
        textarea.value = state.query
        return state.listItems[prev].classList.remove('bg-[#eee]')
      }
      if (prev !== -1) state.listItems[prev].classList.remove('bg-[#eee]')
      state.listItems[state.selectedIndex].classList.add('bg-[#eee]')
      return (textarea.value = state.suggestions[state.selectedIndex].display)
    }
  })

  textarea.addEventListener('click', (e) => {
    e.preventDefault()
    loadSuggestions(state.query)
  })

  textarea.addEventListener('blur', () => {
    state.suggestions = []
    state.selectedIndex = -1
    closeAutosuggest()
  })

  state.listItems.forEach((item, i) => {
    item.addEventListener('mouseenter', () => {
      if (state.selectedIndex !== -1) {
        state.listItems[state.selectedIndex].classList.remove('bg-[#eee]')
      }
      item.classList.add('bg-[#eee]')
      state.selectedIndex = i
    })

    item.addEventListener('mouseleave', () => {
      if (state.selectedIndex !== -1) {
        state.listItems[state.selectedIndex].classList.remove('bg-[#eee]')
        state.selectedIndex = -1
      }
    })

    item.addEventListener('click', () => {
      textarea.value = state.suggestions[i].display
      form.submit()
    })
  })

  // Helpers

  const loadSuggestions = throttle(async (query: string) => {
    const response = await fetch(
      `${apiUrl}?${new URLSearchParams({
        query,
        ...(league ? { league } : {}),
      })}`
    )
    const results = await response.json()

    if (results.timestamp > state.timestamp) {
      state.timestamp = results.timestamp
      state.suggestions = results.suggestions

      const count = state.suggestions.length
      for (const i in state.listItems) {
        const item = state.listItems[i]
        if (Number(i) < count) {
          renderSuggestion(item, state.suggestions[i])
        } else {
          item.remove()
        }
      }

      count > 0 ? openAutosuggest() : closeAutosuggest()
    }
  }, 600)

  const closeAutosuggest = () => {
    combobox.classList.add('hidden')
    textarea.classList.remove('border-b-transparent')
    textarea.classList.remove('rounded-bl-none')
    textarea.classList.remove('rounded-br-none')
  }

  const openAutosuggest = () => {
    combobox.classList.remove('hidden')
    textarea.classList.add('border-b-transparent')
    textarea.classList.add('rounded-bl-none')
    textarea.classList.add('rounded-br-none')
  }
</script>
