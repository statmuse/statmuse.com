---
import Layout from '@layouts/main.astro'
import Header from '@components/header.astro'
import Select from '@components/select.svelte'
import Container from '@components/container.astro'
import TrendingLists from '@components/trending-lists.astro'
import TrendingMore from '@components/trending-more.astro'
import type { TrendingListItem } from '@components/trending-list-item.astro'
import { Table } from 'sst/node/table'
import { DynamoDBClient } from '@aws-sdk/client-dynamodb'
import { QueryCommand, DynamoDBDocumentClient } from '@aws-sdk/lib-dynamodb'
import tailwindConfig from '../../tailwind.config.ts'
import type { Category } from 'src/types'

const colors = tailwindConfig.theme.extend.colors

const db = DynamoDBDocumentClient.from(new DynamoDBClient({}), {
  marshallOptions: { removeUndefinedValues: true },
})

interface Props {
  league: string
  selected?: string
  category?: Category
}

const timeframes: Record<string, string> = {
  // latest: 'LATEST',
  last24Hours: 'LAST_24_HOURS',
  last7Days: 'LAST_7_DAYS',
  last30Days: 'LAST_30_DAYS',
  thisYear: 'THIS_YEAR',
}

const { league, selected, category } = Astro.props
const countryParam = Astro.url.searchParams.get('country')
const timeframeParam = Astro.url.searchParams.get('timeframe')
const country = countryParam?.toUpperCase()
const timeframe = timeframes[timeframeParam ?? 'last24Hours']

const pk = `${league.toUpperCase()}#${timeframe ?? 'LAST_24_HOURS'}#${
  country ?? 'GLOBAL'
}`

const data = await db.send(
  new QueryCommand({
    TableName: Table['trending-table'].tableName,
    KeyConditionExpression: 'pk = :pk',
    ExpressionAttributeValues: { ':pk': pk },
    ScanIndexForward: false,
    Limit: 1,
  }),
)

const items = data.Items as Item[] | undefined
const [item] = items ?? []

export type Query = {
  league: string
  query: string
  uri: string
  image: string
  background: string
  foreground: string
  count: number
}

export type Player = {
  id: number
  league: string
  name: string
  image: string
  uri: string
  background: string
  foreground: string
  count: number
  queries?: Query[]
}

export type Team = {
  id: number
  league: string
  name: {
    abbreviation: string
    nickname?: string
    market?: string
    name?: string
  }
  reps: { image: string; name: string }[]
  image: string
  uri: string
  background: string
  foreground: string
  count: number
  queries?: Query[]
}

export type Item = {
  players: Player[]
  queries: Query[]
  teams: Team[]
  updated: string
}

const leagues = [
  { text: 'ALL', param: 'all', href: '/trending' + Astro.url.search },
  { text: 'FC', param: 'fc', href: '/fc/trending' + Astro.url.search },
  { text: 'NBA', param: 'nba', href: '/nba/trending' + Astro.url.search },
  { text: 'NFL', param: 'nfl', href: '/nfl/trending' + Astro.url.search },
  { text: 'NHL', param: 'nhl', href: '/nhl/trending' + Astro.url.search },
  { text: 'MLB', param: 'mlb', href: '/mlb/trending' + Astro.url.search },
  { text: 'PGA', param: 'pga', href: '/pga/trending' + Astro.url.search },
  { text: 'MONEY', param: 'money', href: '/money/trending' + Astro.url.search },
]

const player = item?.players?.[0]
const team = item?.teams?.[0]

let trendingListItems: TrendingListItem[] = []
switch (category) {
  case 'searches':
    trendingListItems = item?.queries.map((q) => ({
      ...q,
      title: q.query,
      images: [q.image],
    }))
    break
  default:
    break
}
---

<Layout
  analytics={{ page_type: 'trending' }}
  meta={{ title: 'Trending' }}
  colors={{ foreground: colors.gray['8'], background: colors.teal }}
>
  <Header />
  <Container class="text-gray-8 bg-teal">
    <div class="pt-8 pb-8 md:pt-[90px] md:pb-16">
      <h1 class="text-center font-semibold text-4xl md:text-6xl">Trending</h1>
    </div>
  </Container>
  <div class="bg-gray-7 p-3 space-y-3">
    <nav
      class="flex gap-3 overflow-x-scroll no-scrollbar -mx-3 px-3 md:justify-center"
    >
      {
        leagues.map((league) => (
          <a
            class:list={{
              'p-1.5 px-3 text-center whitespace-nowrap border rounded-full': true,
              'hover:no-underline hover:text-gray-8 hover:bg-teal': true,
              'bg-teal text-gray-8 border-teal font-semibold':
                selected === league.param,
              'bg-gray-8 text-gray-2 border-gray-6': selected !== league.param,
            }}
            href={league.href}
            set:html={league.text}
          />
        ))
      }
    </nav>
    <div
      class="grid grid-cols-2 gap-3 md:grid-cols-none md:flex md:justify-center"
    >
      <Select
        client:load
        class="md:w-[200px]"
        hideLabel
        label="Timeframe"
        param="timeframe"
        initial={Astro.url.searchParams.get('timeframe')}
        options={[
          // { label: 'Latest', value: 'latest' },
          { label: 'Last 24 Hours', value: 'last24Hours' },
          { label: 'Last 7 Days', value: 'last7Days' },
          { label: 'Last 30 Days', value: 'last30Days' },
          { label: 'This Year', value: 'thisYear' },
        ]}
      />
      <Select
        client:load
        class="md:w-[200px]"
        hideLabel
        label="Location"
        param="country"
        initial={Astro.url.searchParams.get('country')}
        options={[
          { label: 'Global', value: 'global' },
          { label: 'United States', value: 'US' },
          { label: 'France', value: 'FR' },
          { label: 'Finland', value: 'FI' },
          { label: 'Canada', value: 'CA' },
          { label: 'Netherlands', value: 'NL' },
          { label: 'Philippines', value: 'PH' },
          { label: 'Australia', value: 'AU' },
          { label: 'Ireland', value: 'IE' },
          { label: 'United Kingdom', value: 'GB' },
          { label: 'Germany', value: 'DE' },
          { label: 'Brazil', value: 'BR' },
          { label: 'Mexico', value: 'MX' },
          { label: 'India', value: 'IN' },
          { label: 'Italy', value: 'IT' },
          { label: 'Singapore', value: 'SG' },
          { label: 'Japan', value: 'JP' },
          { label: 'New Zealand', value: 'NZ' },
          { label: 'Poland', value: 'PL' },
          { label: 'Spain', value: 'ES' },
          { label: 'Sweden', value: 'SE' },
        ]}
      />
    </div>
    {
      category ? (
        <TrendingMore items={trendingListItems} />
      ) : (
        <TrendingLists {item} {player} {team} />
      )
    }
  </div>
</Layout>
