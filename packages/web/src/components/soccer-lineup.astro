---
import type { HTMLAttributes } from 'astro/types'
import { orderBy } from 'lodash-es'
import Image from '@components/image.astro'
import type {
  EplHistoricalBoxScore,
  SoccerFormation,
} from '@statmuse/core/gamera'
import Goal from '@components/icons/goal.astro'
import SubArrow from '@components/icons/sub-arrow.astro'
import EntityLink from '@components/entity-link.astro'
import Captain from '@components/icons/captain.astro'

interface TeamLineup {
  name: string
  logoUrl: string
  formation: SoccerFormation
  lineup: EplHistoricalBoxScore['homeTeam']['lineup']
  goals: string[]
  ownGoals: string[]
  yellows: string[]
  reds: string[]
  yellowReds: string[]
  subOuts: string[]
}

interface Props extends HTMLAttributes<'div'> {
  homeTeam: TeamLineup
  awayTeam: TeamLineup
}

const { homeTeam, awayTeam, class: className, ...rest } = Astro.props

const lineupFormation = (
  formation: SoccerFormation,
  lineup: EplHistoricalBoxScore['homeTeam']['lineup'],
) => {
  if (!lineup) return []
  switch (formation) {
    case '3-1-4-2':
      return [
        lineup.slice(0, 1),
        lineup.slice(1, 4),
        lineup.slice(4, 5),
        lineup.slice(5, 9),
        lineup.slice(9, 11),
      ]
    case '3-2-4-1':
      return [
        lineup.slice(0, 1),
        lineup.slice(1, 4),
        lineup.slice(4, 6),
        lineup.slice(6, 10),
        lineup.slice(10, 11),
      ]
    case '3-4-1-2':
      return [
        lineup.slice(0, 1),
        lineup.slice(1, 4),
        lineup.slice(4, 8),
        lineup.slice(8, 9),
        lineup.slice(9, 11),
      ]
    case '3-4-2-1':
      return [
        lineup.slice(0, 1),
        lineup.slice(1, 4),
        lineup.slice(4, 8),
        lineup.slice(8, 10),
        lineup.slice(10, 11),
      ]
    case '3-4-3':
      return [
        lineup.slice(0, 1),
        lineup.slice(1, 4),
        lineup.slice(4, 8),
        lineup.slice(8, 11),
      ]
    case '3-4-3 diamond':
      return [
        lineup.slice(0, 1),
        lineup.slice(1, 4),
        lineup.slice(4, 5),
        lineup.slice(5, 7),
        lineup.slice(7, 8),
        lineup.slice(8, 11),
      ]
    case '3-5-1-1':
      return [
        lineup.slice(0, 1),
        lineup.slice(1, 4),
        lineup.slice(4, 9),
        lineup.slice(9, 10),
        lineup.slice(10, 11),
      ]
    case '3-5-2':
      return [
        lineup.slice(0, 1),
        lineup.slice(1, 4),
        lineup.slice(4, 9),
        lineup.slice(9, 11),
      ]
    case '4-1-3-2':
      return [
        lineup.slice(0, 1),
        lineup.slice(1, 5),
        lineup.slice(5, 6),
        lineup.slice(6, 9),
        lineup.slice(9, 11),
      ]
    case '4-1-4-1':
      return [
        lineup.slice(0, 1),
        lineup.slice(1, 5),
        lineup.slice(5, 6),
        lineup.slice(6, 10),
        lineup.slice(10, 11),
      ]
    case '4-2-2-2':
      return [
        lineup.slice(0, 1),
        lineup.slice(1, 5),
        lineup.slice(5, 7),
        lineup.slice(7, 9),
        lineup.slice(9, 11),
      ]
    case '4-2-3-1':
      return [
        lineup.slice(0, 1),
        lineup.slice(1, 5),
        lineup.slice(5, 7),
        lineup.slice(7, 10),
        lineup.slice(10, 11),
      ]
    case '4-3-1-2':
      return [
        lineup.slice(0, 1),
        lineup.slice(1, 5),
        lineup.slice(5, 8),
        lineup.slice(8, 9),
        lineup.slice(9, 11),
      ]
    case '4-3-2-1':
      return [
        lineup.slice(0, 1),
        lineup.slice(1, 5),
        lineup.slice(5, 8),
        lineup.slice(8, 10),
        lineup.slice(10, 11),
      ]
    case '4-3-3':
    case '4-3-3 flat':
      return [
        lineup.slice(0, 1),
        lineup.slice(1, 5),
        lineup.slice(5, 8),
        lineup.slice(8, 11),
      ]
    case '4-4-1-1':
      return [
        lineup.slice(0, 1),
        lineup.slice(1, 5),
        lineup.slice(5, 9),
        lineup.slice(9, 10),
        lineup.slice(10, 11),
      ]
    case '4-4-2':
      return [
        lineup.slice(0, 1),
        lineup.slice(1, 5),
        lineup.slice(5, 9),
        lineup.slice(9, 11),
      ]
    case '4-4-2 diamond':
    case '4-4-2-diamond':
      return [
        lineup.slice(0, 1),
        lineup.slice(1, 5),
        lineup.slice(5, 6),
        lineup.slice(6, 8),
        lineup.slice(8, 9),
        lineup.slice(9, 11),
      ]
    case '4-5-1':
      return [
        lineup.slice(0, 1),
        lineup.slice(1, 5),
        lineup.slice(5, 10),
        lineup.slice(10, 11),
      ]
    case '5-3-2':
      return [
        lineup.slice(0, 1),
        lineup.slice(1, 6),
        lineup.slice(6, 9),
        lineup.slice(9, 11),
      ]
    case '5-4-1':
      return [
        lineup.slice(0, 1),
        lineup.slice(1, 6),
        lineup.slice(6, 10),
        lineup.slice(10, 11),
      ]
    default:
      return []
  }
}

const lastName = (name: string) => name.split(' ')[name.split(' ').length - 1]
const formatFormation = (formation: string) => {
  if (formation.includes('flat')) {
    return formation.replace('flat', '').trim()
  }
  if (formation.includes('diamond')) {
    return formation.replace(/[\s\-]diamond/, ' â—†')
  }
  return formation
}

const homeLineup = lineupFormation(
  homeTeam.formation,
  orderBy(
    homeTeam.lineup?.filter((p) => p.isStarter),
    'formationIndex',
  ),
)

const awayLineup = lineupFormation(
  awayTeam.formation,
  orderBy(
    awayTeam.lineup?.filter((p) => p.isStarter),
    'formationIndex',
  ),
)
---

<div class:list={[className, 'relative']} {...rest}>
  <svg
    enable-background="new 0 0 285.2 531.4"
    viewBox="0 0 285.2 531.4"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="m0 526.4v-521.4c0-2.8 2.2-5 5-5h275.2c2.8 0 5 2.2 5 5v521.4c0 2.8-2.2 5-5 5h-275.2c-2.8 0-5-2.2-5-5z"
      fill="#7fd3a6"
    >
    </path><g
      fill="none"
      opacity=".25"
      stroke="#000"
      stroke-miterlimit="10"
      stroke-width=".5"
    >
      <path d="m0 265.8h285.2"></path><circle cx="142.6" cy="265.8" r="41.8">
      </circle><path d="m100.8 0v32.1h83.6v-32.1"></path><path
        d="m59.8 0v63.6h165.7v-63.6"
      >
      </path><path d="m107 63.6c7.3 12 20.6 20 35.6 20s28.3-8 35.6-20z">
      </path><path d="m184.4 531.4v-32.1h-83.6v32.1"></path><path
        d="m225.5 531.4v-63.6h-165.7v63.6"
      >
      </path><path d="m178.3 467.8c-7.3-12-20.6-20-35.6-20s-28.3 8-35.6 20z">
      </path>
    </g>
  </svg>
  <div class="absolute top-0 left-0 flex items-center mt-1.5">
    <Image
      class="w-4 h-4 mx-1.5 object-contain"
      src={homeTeam.logoUrl}
      alt={homeTeam.name}
      width={16}
      height={16}
      loading="eager"
    />
    <span class="text-[0.8rem] uppercase tracking-[0.07rem]">
      {homeTeam.name}
    </span>
  </div>
  <div class="absolute bottom-0 left-0 flex items-center mb-1.5">
    <Image
      class="w-4 h-4 mx-1.5 object-contain"
      src={awayTeam.logoUrl}
      alt={awayTeam.name}
      width={16}
      height={16}
      loading="eager"
    />
    <span class="text-[0.8rem] uppercase tracking-[0.07rem]">
      {awayTeam.name}
    </span>
  </div>
  <div class="absolute top-0 right-0 m-1.5 text-[0.8rem] tracking-[0.07rem]">
    {formatFormation(homeTeam.formation)}
  </div>
  <div class="absolute bottom-0 right-0 m-1.5 text-[0.8rem] tracking-[0.07rem]">
    {formatFormation(awayTeam.formation)}
  </div>
  <div class="absolute top-0 w-full h-full flex flex-col">
    <div class="flex-1 flex flex-col justify-between py-2.5">
      {
        homeLineup.map((line) => (
          <div
            class={`flex flex-row-reverse justify-center ${
              line.length < 5 ? ' gap-10' : 'gap-8'
            }`}
          >
            {line.map((player) => (
              <div class="w-10 flex flex-col items-center">
                <EntityLink class="hover:no-underline" entity={player.entity}>
                  <div
                    style={{
                      backgroundColor: player.colors.backgroundColor,
                      color: player.colors.foregroundColor,
                    }}
                    class="w-10 h-10 rounded-full relative flex items-center justify-center"
                  >
                    {player.hasBustImage ? (
                      <div class="w-10 h-10 overflow-hidden rounded-full flex items-center justify-center">
                        <Image
                          class="w-10 h-10 max-w-none object-cover -mb-1.5"
                          src={player.imageUrl}
                          alt={player.entity.display}
                          width={40}
                          height={40}
                          loading="eager"
                        />
                      </div>
                    ) : (
                      <h3>{player.shirtNumber}</h3>
                    )}
                    {homeTeam.ownGoals.includes(player.entity.display) && (
                      <div class="absolute top-0 left-0 -translate-x-1/2 w-[18px] h-[18px] bg-white rounded-full flex items-center justify-center">
                        <Goal class="w-4 h-4" color="#ed1c24" />
                      </div>
                    )}
                    {homeTeam.goals.includes(player.entity.display) && (
                      <div class="absolute top-0 left-0 -translate-x-1/2 w-[18px] h-[18px] bg-white rounded-full flex items-center justify-center">
                        <Goal class="w-4 h-4" color="#000" />
                      </div>
                    )}
                    {homeTeam.yellows.includes(player.entity.display) && (
                      <div class="absolute top-0 right-0 translate-x-1/2 w-[18px] h-[18px] bg-white rounded-full flex items-center justify-center">
                        <div class="w-2 h-3 bg-yellow-300" />
                      </div>
                    )}
                    {homeTeam.reds.includes(player.entity.display) && (
                      <div class="absolute top-0 right-0 translate-x-1/2 w-[18px] h-[18px] bg-white rounded-full flex items-center justify-center">
                        <div class="w-2 h-3 bg-red-600" />
                      </div>
                    )}
                    {homeTeam.yellowReds.includes(player.entity.display) && (
                      <div class="absolute top-0 right-0 translate-x-1/2 w-[18px] h-[18px] bg-white rounded-full flex items-center justify-center">
                        <div class="w-3 h-3 bg-yellow-300 relative">
                          <span class="w-3/4 h-3 bg-red-600 absolute right-0" />
                        </div>
                      </div>
                    )}
                    {homeTeam.subOuts.includes(player.entity.display) && (
                      <div class="absolute bottom-0 right-0 translate-x-1/2 w-[18px] h-[18px] bg-white rounded-full flex items-center justify-center">
                        <SubArrow class="w-3 h-3 rotate-180" color="#ed1c24" />
                      </div>
                    )}
                  </div>
                </EntityLink>
                <p class="text-xs text-black flex items-center">
                  <span class="whitespace-nowrap">
                    {lastName(player.entity.display)}
                  </span>
                  {player.isCaptain ? (
                    <Captain class="ml-0.5 w-3 h-3 shrink-0" />
                  ) : null}
                </p>
              </div>
            ))}
          </div>
        ))
      }
    </div>
    <div class="flex-1 flex flex-col-reverse justify-between py-2.5">
      {
        awayLineup.map((line) => (
          <div
            class={`flex flex-row justify-center ${
              line.length < 5 ? ' gap-10' : 'gap-8'
            }`}
          >
            {line.map((player) => (
              <div class="w-10 flex flex-col items-center">
                <EntityLink class="hover:no-underline" entity={player.entity}>
                  <div
                    style={{
                      backgroundColor: player.colors.backgroundColor,
                      color: player.colors.foregroundColor,
                    }}
                    class="w-10 h-10 rounded-full bg-white relative flex items-center justify-center"
                  >
                    {player.hasBustImage ? (
                      <div class="w-10 h-10 overflow-hidden rounded-full flex items-center justify-center">
                        <Image
                          class="w-10 h-10 max-w-none object-cover -mb-1.5"
                          src={player.imageUrl}
                          alt={player.entity.display}
                          width={40}
                          height={40}
                          loading="eager"
                        />
                      </div>
                    ) : (
                      <h3>{player.shirtNumber}</h3>
                    )}
                    {awayTeam.ownGoals.includes(player.entity.display) && (
                      <div class="absolute top-0 left-0 -translate-x-1/2 w-[18px] h-[18px] bg-white rounded-full flex items-center justify-center">
                        <Goal class="w-4 h-4" color="#ed1c24" />
                      </div>
                    )}
                    {awayTeam.goals.includes(player.entity.display) && (
                      <div class="absolute top-0 left-0 -translate-x-1/2 w-[18px] h-[18px] bg-white rounded-full flex items-center justify-center">
                        <Goal class="w-4 h-4" color="#000" />
                      </div>
                    )}
                    {awayTeam.yellows.includes(player.entity.display) && (
                      <div class="absolute top-0 right-0 translate-x-1/2 w-[18px] h-[18px] bg-white rounded-full flex items-center justify-center">
                        <div class="w-2 h-3 bg-yellow-300" />
                      </div>
                    )}
                    {awayTeam.reds.includes(player.entity.display) && (
                      <div class="absolute top-0 right-0 translate-x-1/2 w-[18px] h-[18px] bg-white rounded-full flex items-center justify-center">
                        <div class="w-2 h-3 bg-red-600" />
                      </div>
                    )}
                    {awayTeam.yellowReds.includes(player.entity.display) && (
                      <div class="absolute top-0 right-0 translate-x-1/2 w-[18px] h-[18px] bg-white rounded-full flex items-center justify-center">
                        <div class="w-3 h-3 bg-yellow-300 relative">
                          <span class="w-2 h-3 bg-red-600 absolute right-0" />
                        </div>
                      </div>
                    )}
                    {awayTeam.subOuts.includes(player.entity.display) && (
                      <div class="absolute bottom-0 right-0 translate-x-1/2 w-[18px] h-[18px] bg-white rounded-full flex items-center justify-center">
                        <SubArrow class="w-3 h-3 rotate-180" color="#ed1c24" />
                      </div>
                    )}
                  </div>
                </EntityLink>
                <p class="text-xs text-black flex items-center">
                  <span class="whitespace-nowrap">
                    {lastName(player.entity.display)}
                  </span>
                  {player.isCaptain ? (
                    <Captain class="ml-0.5 w-3 h-3 shrink-0" />
                  ) : null}
                </p>
              </div>
            ))}
          </div>
        ))
      }
    </div>
  </div>
</div>
