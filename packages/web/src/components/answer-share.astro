---
import { createAskPath } from '@statmuse/core/path'

interface Props {
  type?: 'ask' | 'musing' | 'profile'
  shortCode?: string
  url?: string
  query?: string
  domain?: string
  onlyIcon?: boolean
}

const {
  type = 'profile',
  shortCode,
  url,
  query = '',
  domain = '',
  onlyIcon,
} = Astro.props

const shareUrl = url || `${Astro.url.origin}${createAskPath({ query, domain })}`
const shortLinkUrl = shortCode
  ? `${process.env.SHORT_LINK_URL || 'http://localhost:3000/'}e/${shortCode}`
  : ''

const socialButtons = [
  {
    label: 'Facebook',
    icon: '/share-icons/facebook-light.svg',
    bgColor: '#3C5A99',
    shareUrl: (x: string) =>
      'https://www.facebook.com/sharer/sharer.php?' +
      new URLSearchParams({ u: x }).toString(),
  },
  {
    label: 'Twitter',
    icon: '/share-icons/twitter-light.svg',
    bgColor: '#1DA1F2',
    shareUrl: (x: string) =>
      'https://twitter.com/share?' + new URLSearchParams({ url: x }).toString(),
  },
]
---

{
  onlyIcon ? (
    <label
      for="answer-share"
      class="cursor-pointer"
      data-mobile-share-url={shareUrl}
    >
      <svg
        width="25"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 22.7 22.7"
        xml:space="preserve"
      >
        <g style="fill: none; stroke: var(--team-secondary-color, #c5c9cc); stroke-width: 1.5; stroke-linecap: round; stroke-linejoin: round; stroke-miterlimit: 10;">
          <line x1="11.4" y1="4" x2="11.4" y2="13.1" />
          <>
            <polyline points="6.5,8.9 11.4,4 16.2,8.8" />
            <polyline points="3.2,13.2 3.2,18.7 19.5,18.7 19.5,13.2" />
          </>
        </g>
      </svg>
    </label>
  ) : (
    <div>
      <input id="answer-share" type="checkbox" class="hidden peer" />
      <label for="answer-share" class="cursor-pointer">
        <svg
          width="25"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 22.7 22.7"
          xml:space="preserve"
        >
          <g style="fill: none; stroke: var(--team-secondary-color, #c5c9cc); stroke-width: 1.5; stroke-linecap: round; stroke-linejoin: round; stroke-miterlimit: 10;">
            <line x1="11.4" y1="4" x2="11.4" y2="13.1" />
            <>
              <polyline points="6.5,8.9 11.4,4 16.2,8.8" />
              <polyline points="3.2,13.2 3.2,18.7 19.5,18.7 19.5,13.2" />
            </>
          </g>
        </svg>
      </label>
      <div class="hidden peer-checked:block fixed w-full h-full top-0 left-0 z-[10]">
        <label for="answer-share">
          <div class="w-full h-full bg-black/40 absolute top-0 left-0" />
        </label>
        <div class="bg-white w-[98%] max-w-[500px] absolute top-1/2 left-1/2 -translate-y-1/2 -translate-x-1/2 text-[#333] px-3 py-6 sm:p-6 text-left">
          <label for="answer-share" class="cursor-pointer">
            <img
              src="/share-icons/x.svg"
              class="w-4 h-4 absolute top-6 right-3 sm:right-6"
              alt="close"
            />
          </label>
          <p class="mb-4">Share a link to this question</p>
          <div class="flex">
            {socialButtons.map((button) => (
              <div style={{ textAlign: 'center', fontSize: '14px' }}>
                <a
                  href={button.shareUrl(
                    type === 'musing' ? shortLinkUrl : shareUrl,
                  )}
                  class="flex items-center justify-center w-16 h-16 my-1 mx-2.5 rounded-full"
                  style={{ background: button.bgColor }}
                  target="_blank"
                  rel="noopener noreferrer"
                  data-social={button.label}
                  data-track-click="Click Musing Share Link"
                >
                  <img
                    src={button.icon}
                    class="w-7 h-7 object-contain"
                    alt={button.label}
                  />
                </a>
                {button.label}
              </div>
            ))}
          </div>
          <div class="relative my-5 cursor-pointer">
            <input
              class="w-full h-[42px] outline-none cursor-pointer px-4 pr-[70px] text-sm bg-[#fbfbfb] border border-[#e4e4e4] overflow-auto"
              type="text"
              value={type === 'musing' ? shortLinkUrl : shareUrl}
              readonly
              data-share-input
            />
            <span class="absolute top-1/2 right-4 -translate-y-1/2 text-primary font-semibold text-sm">
              COPY
            </span>
          </div>
          {type !== 'profile' && (
            <>
              <div
                style={{
                  height: '1px',
                  width: '100%',
                  backgroundColor: '#e4e4e4',
                  marginBottom: '20px',
                }}
              />
              <div style={{ display: 'flex', alignItems: 'center' }}>
                <input
                  id="share-checkbox"
                  type="checkbox"
                  class="appearance-none p-0 bg-white checked:bg-primary border-2 border-primary rounded-sm w-5 h-5 mr-2.5 cursor-pointer flex items-center justify-center after:content-['âœ“'] after:text-white"
                  data-share-url={shareUrl}
                  data-short-link={shortLinkUrl}
                  data-share-type={type}
                />
                <label
                  for="share-checkbox"
                  style={{
                    color: '#d1d1d1',
                    fontSize: '14px',
                    cursor: 'pointer',
                  }}
                >
                  {type === 'ask' ? 'Shorten link' : 'Keep answer updated'}
                </label>
              </div>
              <p
                style={{ marginTop: '1em', fontSize: '14px', color: '#d1d1d1' }}
                data-share-disclaimer
              >
                {type === 'musing'
                  ? 'This answer is static and will not update'
                  : 'This answer is live and will keep updating'}
              </p>
            </>
          )}
        </div>
      </div>
    </div>
  )
}

<script>
  document.addEventListener('astro:page-load', () => {
    const toggle = document.getElementById(
      'answer-share',
    ) as HTMLInputElement | null
    const input = document.querySelector<HTMLInputElement>('[data-share-input]')
    const inputLabel = input?.parentNode?.querySelector('span')
    const checkbox =
      document.querySelector<HTMLInputElement>('[data-share-url]')
    const disclaimer = document.querySelector<HTMLElement>(
      '[data-share-disclaimer]',
    )
    if (input && inputLabel && toggle) {
      // copy to clipboard
      input.addEventListener('click', async () => {
        try {
          await navigator.clipboard.writeText(input.value)
          inputLabel.innerText = 'COPIED'
          window.analytics.track('Copy Musing Share Link', {
            href: input.value,
          })
        } catch (err) {}
      })
      // listen to changes on checkbox and set share url on input
      checkbox?.addEventListener('change', () => {
        if (checkbox.dataset.shareType === 'ask') {
          checkbox.checked
            ? (input.value = checkbox.dataset.shortLink || '')
            : (input.value = checkbox.dataset.shareUrl || '')
        } else {
          checkbox.checked
            ? (input.value = checkbox.dataset.shareUrl || '')
            : (input.value = checkbox.dataset.shortLink || '')
          // set disclaimer messsage
          if (disclaimer) {
            checkbox.checked
              ? (disclaimer.innerText =
                  'This answer is live and will keep updating')
              : (disclaimer.innerText =
                  'This answer is static and will not update')
          }
        }
        // reset input label
        inputLabel.innerText = 'COPY'
        // set the social button hrefs with new share url
        document
          .querySelectorAll<HTMLAnchorElement>('[data-social]')
          .forEach((el) => {
            if (el.dataset.social === 'Facebook') {
              el.href =
                'https://www.facebook.com/sharer/sharer.php?' +
                new URLSearchParams({ u: input.value }).toString()
            }
            if (el.dataset.social === 'Twitter') {
              el.href =
                'https://twitter.com/share?' +
                new URLSearchParams({ url: input.value }).toString()
            }
          })
      })
      toggle.addEventListener('change', () => {
        if (!toggle.checked) {
          inputLabel.innerText = 'COPY'
          checkbox?.checked && checkbox.click()
        }
      })
    }
    document
      .querySelectorAll<HTMLAnchorElement>(
        '[data-track-click="Click Musing Share Link"]',
      )
      .forEach((el) => {
        el.addEventListener('click', () => {
          window.analytics.track(el.dataset.trackClick as string, {
            href: el.href,
          })
        })
      })

    const mobileShare = document.querySelector<HTMLLabelElement>(
      'label[data-mobile-share-url]',
    )
    if (mobileShare) {
      mobileShare.addEventListener('click', (e) => {
        if (navigator.share) {
          e.preventDefault()
          const url = mobileShare.dataset.mobileShareUrl as string
          try {
            navigator.share({ url })
          } catch (e) {}
          return
        }
      })
    }
  })
</script>
