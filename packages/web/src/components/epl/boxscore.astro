---
import { orderBy, groupBy } from 'lodash-es'
import Image from '@components/image.astro'
import {
  type EplHistoricalBoxScore,
  type GameraEplBoxScore,
  type GameraEntity,
  tokensToText,
} from '@statmuse/core/gamera'
import Goal from '@components/icons/goal.astro'
import Substitution from '@components/icons/substitution.astro'
import SoccerLineup from '@components/soccer-lineup.astro'
import SubArrow from '@components/icons/sub-arrow.astro'
import EntityLink from '@components/entity-link.astro'
import dayjs from 'dayjs'
import AditudeAdBanner from '@components/aditude-ad-banner.svelte'
import Panel from '@components/panel.astro'

interface Props {
  data: GameraEplBoxScore
}

const { data } = Astro.props

const boxscoreData = data.visual.detail[0] as EplHistoricalBoxScore
const homeTeam = boxscoreData.homeTeam
const awayTeam = boxscoreData.awayTeam

const summary = tokensToText(data.nlg.text.answer)

const plays = orderBy(
  boxscoreData.gameSummary.map((play) => ({
    ...play,
    side:
      (play.eventType !== 'own_goal' && play.team === homeTeam.name) ||
      (play.eventType === 'own_goal' && play.team === awayTeam.name)
        ? 'home'
        : 'away',
    minuteRaw: play.minute.split("'").reduce((t, c) => t + Number(c), 0),
  })),
  'minuteRaw',
)

console.log(plays)

type Play = (typeof plays)[0]

const playsByPeriod = groupBy(plays, 'period')

const homeGoals = plays.filter(
  (p) =>
    ((p.eventType === 'goal' || p.eventType === 'penalty_goal') &&
      p.team === homeTeam.name) ||
    (p.eventType === 'own_goal' && p.team === awayTeam.name),
)
const awayGoals = plays.filter(
  (p) =>
    ((p.eventType === 'goal' || p.eventType === 'penalty_goal') &&
      p.team === awayTeam.name) ||
    (p.eventType === 'own_goal' && p.team === homeTeam.name),
)

const homeReds = plays.filter(
  (p) =>
    (p.eventType === 'red_card' || p.eventType === 'yellow_red_card') &&
    p.team === homeTeam.name,
)
const awayReds = plays.filter(
  (p) =>
    (p.eventType === 'red_card' || p.eventType === 'yellow_red_card') &&
    p.team === awayTeam.name,
)

console.log(homeReds)
console.log(awayReds)

const homeTeamGoals = plays
  .filter(
    (p) =>
      (p.eventType === 'goal' || p.eventType === 'penalty_goal') &&
      p.team === homeTeam.name,
  )
  .map((p) => p.playerName)
const awayTeamGoals = plays
  .filter(
    (p) =>
      (p.eventType === 'goal' || p.eventType === 'penalty_goal') &&
      p.team === awayTeam.name,
  )
  .map((p) => p.playerName)
const homeTeamOwnGoals = plays
  .filter((p) => p.eventType === 'own_goal' && p.team === homeTeam.name)
  .map((p) => p.playerName)
const awayTeamOwnGoals = plays
  .filter((p) => p.eventType === 'own_goal' && p.team === awayTeam.name)
  .map((p) => p.playerName)
const homeTeamYellows = plays
  .filter((p) => p.eventType === 'yellow_card' && p.team === homeTeam.name)
  .map((p) => p.playerName)
const awayTeamYellows = plays
  .filter((p) => p.eventType === 'yellow_card' && p.team === awayTeam.name)
  .map((p) => p.playerName)
const homeTeamReds = plays
  .filter((p) => p.eventType === 'red_card' && p.team === homeTeam.name)
  .map((p) => p.playerName)
const awayTeamReds = plays
  .filter((p) => p.eventType === 'red_card' && p.team === awayTeam.name)
  .map((p) => p.playerName)
const homeTeamYellowReds = plays
  .filter((p) => p.eventType === 'yellow_red_card' && p.team === homeTeam.name)
  .map((p) => p.playerName)
const awayTeamYellowReds = plays
  .filter((p) => p.eventType === 'yellow_red_card' && p.team === awayTeam.name)
  .map((p) => p.playerName)
const homeTeamSubIns = plays
  .filter((p) => p.eventType === 'substitution' && p.team === homeTeam.name)
  .map((p) => p.playerName)
const awayTeamSubIns = plays
  .filter((p) => p.eventType === 'substitution' && p.team === awayTeam.name)
  .map((p) => p.playerName)
const homeTeamSubOuts = plays
  .filter((p) => p.eventType === 'substitution' && p.team === homeTeam.name)
  .map((p) => p.relatedPlayerName)
const awayTeamSubOuts = plays
  .filter((p) => p.eventType === 'substitution' && p.team === awayTeam.name)
  .map((p) => p.relatedPlayerName)

const homeStarters = [
  orderBy(
    homeTeam.lineup?.filter((p) => p.isStarter && p.position === 'goalkeeper'),
    'shirtNumber',
  ),
  orderBy(
    homeTeam.lineup?.filter((p) => p.isStarter && p.position === 'defender'),
    'shirtNumber',
  ),
  orderBy(
    homeTeam.lineup?.filter((p) => p.isStarter && p.position === 'midfielder'),
    'shirtNumber',
  ),
  orderBy(
    homeTeam.lineup?.filter((p) => p.isStarter && p.position === 'forward'),
    'shirtNumber',
  ),
]
const homeSubs = orderBy(
  homeTeam.lineup?.filter(
    (p) => !p.isStarter && homeTeamSubIns.includes(p.entity.display),
  ),
  'shirtNumber',
)
const homeBench = orderBy(
  homeTeam.lineup?.filter(
    (p) => !p.isStarter && !homeTeamSubIns.includes(p.entity.display),
  ),
  'shirtNumber',
)

const awayStarters = [
  orderBy(
    awayTeam.lineup?.filter((p) => p.isStarter && p.position === 'goalkeeper'),
    'shirtNumber',
  ),
  orderBy(
    awayTeam.lineup?.filter((p) => p.isStarter && p.position === 'defender'),
    'shirtNumber',
  ),
  orderBy(
    awayTeam.lineup?.filter((p) => p.isStarter && p.position === 'midfielder'),
    'shirtNumber',
  ),
  orderBy(
    awayTeam.lineup?.filter((p) => p.isStarter && p.position === 'forward'),
    'shirtNumber',
  ),
]
const awaySubs = orderBy(
  awayTeam.lineup?.filter(
    (p) => !p.isStarter && awayTeamSubIns.includes(p.entity.display),
  ),
  'shirtNumber',
)
const awayBench = orderBy(
  awayTeam.lineup?.filter(
    (p) => !p.isStarter && !awayTeamSubIns.includes(p.entity.display),
  ),
  'shirtNumber',
)

const homeTeamStats = boxscoreData.teamDetail.homeTeam
const awayTeamStats = boxscoreData.teamDetail.awayTeam

const homeTeamColors = homeTeam.lineup[0].colors
const awayTeamColors = awayTeam.lineup[0].colors

const playerEntityMap = [
  ...(homeTeam.lineup || []),
  ...(awayTeam.lineup || []),
].reduce(
  (obj, player) => ({
    ...obj,
    [player.entity.display]: player.entity,
  }),
  {} as Record<string, GameraEntity>,
)

const lastName = (name: string) => name.split(' ')[name.split(' ').length - 1]
---

<Panel team class="">
  <div class="flex gap-2 md:gap-8 md:items-center justify-center">
    <div
      class="flex-1 flex flex-col-reverse md:flex-row gap-1 md:gap-4 items-center justify-end"
    >
      <div class="text-center md:text-right">
        <EntityLink class="text-current" entity={homeTeam.entity}>
          <h1 class="font-bold md:text-3xl">
            {homeTeam.name}
          </h1>
        </EntityLink>
        <p class="text-[0.8rem] uppercase tracking-[0.07rem]">
          {homeTeam.record}
        </p>
      </div>
      <EntityLink entity={homeTeam.entity}>
        <Image
          class="w-20 h-20 object-contain"
          src={homeTeam.logoUrl}
          alt={homeTeam.abbrev}
          width={80}
          height={80}
          loading="eager"
        />
      </EntityLink>
    </div>
    <div class="h-fit flex items-center gap-4 md:gap-8 mt-5 md:mt-0">
      <p class="text-4xl font-bold">
        {homeTeam.score}
      </p>
      <p class="text-[0.8rem] uppercase tracking-[0.07rem] mx-4">
        {boxscoreData.completedGameStatus}
      </p>
      <p class="text-4xl font-bold">
        {awayTeam.score}
      </p>
    </div>
    <div
      class="flex-1 flex flex-col-reverse md:flex-row-reverse gap-1 md:gap-4 items-center justify-end"
    >
      <div class="text-center md:text-left">
        <EntityLink class="text-current" entity={awayTeam.entity}>
          <h1 class="font-bold md:text-3xl">
            {awayTeam.name}
          </h1>
        </EntityLink>
        <p class="text-[0.8rem] uppercase tracking-[0.07rem]">
          {awayTeam.record}
        </p>
      </div>
      <EntityLink class="text-current" entity={awayTeam.entity}>
        <Image
          class="w-20 h-20 object-contain"
          src={awayTeam.logoUrl}
          alt={awayTeam.abbrev}
          width={80}
          height={80}
          loading="eager"
        />
      </EntityLink>
    </div>
  </div>
  <div>
    {
      (homeGoals.length > 0 || awayGoals.length > 0) && (
        <div class="flex items-start justify-center">
          <div class="flex-1 text-right mx-0.5">
            {homeGoals.map((play) => (
              <p class="text-sm">{`${lastName(play.playerName)} ${play.minute}${
                play.eventType === 'own_goal'
                  ? ' (OG)'
                  : play.eventType === 'penalty_goal'
                  ? ' (PK)'
                  : ''
              }`}</p>
            ))}
          </div>
          <Goal class="w-5 shrink-0 mx-4 md:mx-24" color="#000" />
          <div class="flex-1 mx-0.5">
            {awayGoals.map((play) => (
              <p class="text-sm">{`${lastName(play.playerName)} ${play.minute}${
                play.eventType === 'own_goal'
                  ? ' (OG)'
                  : play.eventType === 'penalty_goal'
                  ? ' (PK)'
                  : ''
              }`}</p>
            ))}
          </div>
        </div>
      )
    }
    {
      (homeReds.length > 0 || awayReds.length > 0) && (
        <div class="flex items-start justify-center">
          <div class="flex-1 text-right mx-0.5">
            {homeReds.map((play) => (
              <p class="text-sm">{`${lastName(play.playerName)} ${
                play.minute
              }`}</p>
            ))}
          </div>
          <div class="w-5 h-5 shrink-0 mx-4 md:mx-24">
            <span class="block w-4 h-5 mx-auto bg-[#DC2626]" />
          </div>
          <div class="flex-1 mx-0.5">
            {awayReds.map((play) => (
              <p class="text-sm">{`${lastName(play.playerName)} ${
                play.minute
              }`}</p>
            ))}
          </div>
        </div>
      )
    }
  </div>
  <p class="text-center text-[0.8rem] uppercase tracking-[0.07rem]">
    {dayjs(boxscoreData.gameDate).format('ddd D MMM YYYY')}
  </p>
</Panel>
<div class="h-[50px] md:h-[90px] mb-1.5 flex justify-center items-center">
  <AditudeAdBanner client:only="svelte" />
</div>
<div>
  <div
    class="flex flex-nowrap overflow-auto mb-5 space-x-5 md:hidden"
    data-hash-links
  >
    {
      [
        { text: 'Timeline', href: '#timeline' },
        { text: 'Lineups', href: '#lineups' },
        { text: 'Stats', href: '#stats' },
      ].map(({ href, text }, index) => (
        <a
          class={`text-black text-3xl font-bold shrink-0 hover:text-team-primary ${
            index === 0 ? 'text-team-primary' : ''
          }`}
          {href}
        >
          {text}
        </a>
      ))
    }
  </div>
  <div class="grid grid-cols-[repeat(auto-fit,_minmax(300px,_1fr))] gap-5 mb-5">
    <div>
      <div id="timeline" class="relative -top-[65px]"></div>
      <p class="font-bold text-[#b8b8b8]">Timeline</p>
      <div
        class="flex justify-between bg-team-primary text-team-secondary rounded py-1"
      >
        <div class="flex items-center">
          <Image
            class="w-4 h-4 mx-1.5 object-contain"
            src={homeTeam.logoUrl}
            alt={homeTeam.abbrev}
            width={16}
            height={16}
            loading="eager"
          />
          <span class="text-[0.8rem] uppercase tracking-[0.07rem]">
            {homeTeam.abbrev}
          </span>
        </div>
        <div class="flex items-center flex-row-reverse">
          <Image
            class="w-4 h-4 mx-1.5 object-contain"
            src={awayTeam.logoUrl}
            alt={awayTeam.abbrev}
            width={16}
            height={16}
            loading="eager"
          />
          <span class="text-[0.8rem] uppercase tracking-[0.07rem]">
            {awayTeam.abbrev}
          </span>
        </div>
      </div>
      <div>
        {
          (() => {
            const renderPlays = (plays: Play[]) =>
              plays.map((play) => (
                <div
                  class:list={[
                    'flex items-center py-0.5 border-b border-[#c7c8ca]',
                    { 'flex-row-reverse': play.side === 'away' },
                  ]}
                >
                  <span
                    class:list={[
                      'w-8 relative',
                      {
                        'ml-1': play.side === 'home',
                        'mr-1': play.side === 'away',
                      },
                    ]}
                  >
                    {(() => {
                      const [minute, extraTime] = play.minute.split('+')
                      if (extraTime) {
                        return (
                          <>
                            {minute}
                            <span class="text-sm absolute">
                              +{extraTime.replace("'", '')}
                            </span>
                          </>
                        )
                      }
                      return minute
                    })()}
                  </span>
                  {play.eventType === 'yellow_card' ? (
                    <div class="w-5 h-4 mx-2">
                      <span class="block h-4 w-3 bg-yellow-300 mx-auto" />
                    </div>
                  ) : play.eventType === 'red_card' ? (
                    <div class="w-5 h-4 mx-2">
                      <span class="block h-4 w-3 bg-[#DC2626] mx-auto" />
                    </div>
                  ) : play.eventType === 'yellow_red_card' ? (
                    <div class="inline-block h-4 w-5 bg-yellow-300 mx-2 relative">
                      <span class="absolute right-0 h-4 w-3 bg-[#DC2626]" />
                    </div>
                  ) : play.eventType === 'goal' ||
                    play.eventType === 'penalty_goal' ||
                    play.eventType === 'own_goal' ? (
                    <Goal
                      class="w-5 mx-2 shrink-0"
                      color={play.eventType === 'own_goal' ? '#ed1c24' : '#000'}
                    />
                  ) : play.eventType === 'substitution' ? (
                    <Substitution class="w-5 mx-2 shrink-0" />
                  ) : null}
                  {play.eventType === 'substitution' ? (
                    <div
                      class:list={{
                        'text-right': play.side === 'away',
                      }}
                    >
                      <EntityLink
                        class="text-[#00a14b] block"
                        entity={playerEntityMap[play.playerName]}
                      >
                        {play.playerName}
                      </EntityLink>

                      <EntityLink
                        class="text-[#ed1c24] block"
                        entity={playerEntityMap[play.relatedPlayerName]}
                      >
                        {play.relatedPlayerName}
                      </EntityLink>
                    </div>
                  ) : play.eventType === 'goal' ||
                    play.eventType === 'penalty_goal' ||
                    play.eventType === 'own_goal' ? (
                    <div
                      class:list={{
                        'text-right': play.side === 'away',
                      }}
                    >
                      <p>
                        <EntityLink
                          class="text-current"
                          entity={playerEntityMap[play.playerName]}
                        >
                          {play.playerName}
                        </EntityLink>
                        {play.eventType === 'own_goal'
                          ? ' (OG)'
                          : play.eventType === 'penalty_goal'
                          ? ' (PK)'
                          : ''}
                      </p>
                      {play.relatedPlayerName && (
                        <p class="text-[#969ca1]">
                          Assist:{' '}
                          <EntityLink
                            class="text-current"
                            entity={playerEntityMap[play.relatedPlayerName]}
                          >
                            {play.relatedPlayerName}
                          </EntityLink>
                        </p>
                      )}
                    </div>
                  ) : (
                    <p>
                      <EntityLink
                        class="text-current"
                        entity={playerEntityMap[play.playerName]}
                      >
                        {play.playerName}
                      </EntityLink>
                      {play.eventType === 'own_goal'
                        ? ' (OG)'
                        : play.eventType === 'penalty_goal'
                        ? ' (PK)'
                        : ''}
                    </p>
                  )}
                </div>
              ))

            return (
              <>
                {renderPlays(playsByPeriod['1st Half'] || [])}
                <div class="text-center text-[0.8rem] text-[#969ca1] uppercase tracking-[0.07rem] py-1.5 border-b border-[#c7c8ca]">
                  half time
                </div>
                {renderPlays(playsByPeriod['2nd Half'] || [])}
                <div class="text-center text-[0.8rem] text-[#969ca1] uppercase tracking-[0.07rem] py-1.5 border-b border-[#c7c8ca]">
                  full time
                </div>
              </>
            )
          })()
        }
      </div>
    </div>
    <div>
      <div id="lineups" class="relative -top-[65px]"></div>
      <p class="font-bold text-[#b8b8b8]">Lineups</p>
      {
        homeTeamStats.formation && awayTeamStats.formation && (
          <>
            <SoccerLineup
              homeTeam={{
                name: homeTeam.abbrev,
                logoUrl: homeTeam.logoUrl,
                formation: homeTeamStats.formation,
                lineup: homeTeam.lineup,
                goals: homeTeamGoals,
                ownGoals: homeTeamOwnGoals,
                yellows: homeTeamYellows,
                reds: homeTeamReds,
                yellowReds: homeTeamYellowReds,
                subOuts: homeTeamSubOuts,
              }}
              awayTeam={{
                name: awayTeam.abbrev,
                logoUrl: awayTeam.logoUrl,
                formation: awayTeamStats.formation,
                lineup: awayTeam.lineup,
                goals: awayTeamGoals,
                ownGoals: awayTeamOwnGoals,
                yellows: awayTeamYellows,
                reds: awayTeamReds,
                yellowReds: awayTeamYellowReds,
                subOuts: awayTeamSubOuts,
              }}
            />
            <div class="flex justify-between py-1.5 mt-2">
              <div class="flex items-center">
                <Image
                  class="w-4 h-4 mx-1.5 object-contain"
                  src={homeTeam.logoUrl}
                  alt={homeTeam.abbrev}
                  width={16}
                  height={16}
                  loading="eager"
                />
                <span class="text-[0.8rem] uppercase tracking-[0.07rem]">
                  {homeTeam.abbrev}
                </span>
              </div>
              <p class="text-[0.8rem] uppercase tracking-[0.07rem]">
                substitutes
              </p>
              <div class="flex items-center flex-row-reverse">
                <Image
                  class="w-4 h-4 mx-1.5 object-contain"
                  src={awayTeam.logoUrl}
                  alt={awayTeam.abbrev}
                  width={16}
                  height={16}
                  loading="eager"
                />
                <span class="text-[0.8rem] uppercase tracking-[0.07rem]">
                  {awayTeam.abbrev}
                </span>
              </div>
            </div>
            <div class="flex">
              <div class="flex-1">
                {homeSubs.map((player) => (
                  <div class="flex items-center py-0.5">
                    <>
                      <p class="w-[19px] mx-1">{player.shirtNumber}</p>
                      <EntityLink
                        entity={player.entity}
                        class="text-current whitespace-nowrap mr-1"
                      >
                        {player.entity.display}
                      </EntityLink>
                      <SubArrow class="w-4 h-4 shrink-0" color="#00a14b" />
                      {(() => {
                        if (homeTeamReds.includes(player.entity.display)) {
                          return <div class="w-3 h-4 bg-[#DC2626] ml-0.5" />
                        }
                        if (
                          homeTeamYellowReds.includes(player.entity.display)
                        ) {
                          return (
                            <div class="w-4 h-4 bg-yellow-300 relative ml-0.5">
                              <div class="w-3 h-4 bg-[#DC2626] absolute right-0" />
                            </div>
                          )
                        }
                        if (homeTeamYellows.includes(player.entity.display)) {
                          return <div class="w-3 h-4 bg-yellow-300 ml-0.5" />
                        }
                      })()}
                      {homeTeamGoals.includes(player.entity.display) && (
                        <div class="relative">
                          {homeTeamGoals
                            .filter((p) => p === player.entity.display)
                            .map((_, i) => (
                              <Goal
                                class="w-4 h-4 ml-0.5 shrink-0 rounded-full bg-white"
                                style={
                                  i > 0
                                    ? `position: absolute; top: 0; left: ${
                                        4 * i
                                      }px`
                                    : ''
                                }
                                color="#000"
                              />
                            ))}
                        </div>
                      )}
                    </>
                  </div>
                ))}
                {homeBench.map((player) => (
                  <div class="flex items-center py-0.5">
                    <>
                      <p class="w-[19px] mx-1">{player.shirtNumber}</p>
                      <EntityLink
                        entity={player.entity}
                        class="text-current whitespace-nowrap"
                      >
                        {player.entity.display}
                      </EntityLink>
                    </>
                  </div>
                ))}
              </div>
              <div class="flex-1">
                {awaySubs.map((player) => (
                  <div class="flex flex-row-reverse items-center py-0.5">
                    <>
                      <p class="w-[19px] mx-1 text-right">
                        {player.shirtNumber}
                      </p>
                      <EntityLink
                        entity={player.entity}
                        class="text-current whitespace-nowrap ml-1"
                      >
                        {player.entity.display}
                      </EntityLink>
                      <SubArrow class="w-4 h-4 shrink-0" color="#00a14b" />
                      {(() => {
                        if (awayTeamReds.includes(player.entity.display)) {
                          return <div class="w-3 h-4 bg-[#DC2626] mr-0.5" />
                        }
                        if (
                          awayTeamYellowReds.includes(player.entity.display)
                        ) {
                          return (
                            <div class="w-4 h-4 bg-yellow-300 relative mr-0.5">
                              <div class="w-3 h-3 bg-[#DC2626] absolute right-0" />
                            </div>
                          )
                        }
                        if (awayTeamYellows.includes(player.entity.display)) {
                          return <div class="w-3 h-4 bg-yellow-300 mr-0.5" />
                        }
                      })()}
                      {awayTeamGoals.includes(player.entity.display) && (
                        <div class="relative">
                          {awayTeamGoals
                            .filter((p) => p === player.entity.display)
                            .map((_, i) => (
                              <Goal
                                class="w-4 h-4 ml-0.5 shrink-0 rounded-full bg-white"
                                style={
                                  i > 0
                                    ? `position: absolute; top: 0; right: ${
                                        4 * i
                                      }px`
                                    : ''
                                }
                                color="#000"
                              />
                            ))}
                        </div>
                      )}
                    </>
                  </div>
                ))}
                {awayBench.map((player) => (
                  <div class="flex flex-row-reverse items-center py-0.5">
                    <>
                      <p class="w-[19px] mx-1 text-right">
                        {player.shirtNumber}
                      </p>
                      <EntityLink
                        entity={player.entity}
                        class="text-current whitespace-nowrap"
                      >
                        {player.entity.display}
                      </EntityLink>
                    </>
                  </div>
                ))}
              </div>
            </div>
          </>
        )
      }
      {
        !homeTeamStats.formation && !awayTeamStats.formation && (
          <>
            <div class="flex justify-between bg-team-primary text-team-secondary rounded py-1">
              <div class="flex items-center">
                <Image
                  class="w-4 h-4 mx-1.5 object-contain"
                  src={homeTeam.logoUrl}
                  alt={homeTeam.abbrev}
                  width={16}
                  height={16}
                  loading="eager"
                />
                <span class="text-[0.8rem] uppercase tracking-[0.07rem]">
                  {homeTeam.abbrev}
                </span>
              </div>
              <div class="flex items-center flex-row-reverse">
                <Image
                  class="w-4 h-4 mx-1.5 object-contain"
                  src={awayTeam.logoUrl}
                  alt={awayTeam.abbrev}
                  width={16}
                  height={16}
                  loading="eager"
                />
                <span class="text-[0.8rem] uppercase tracking-[0.07rem]">
                  {awayTeam.abbrev}
                </span>
              </div>
            </div>
            <div class="flex">
              <div class="flex-1">
                {homeStarters.map((positionGroup) =>
                  positionGroup.map((player) => (
                    <div class="flex items-center py-0.5">
                      <>
                        <p class="w-[19px] mx-1">{player.shirtNumber}</p>
                        <EntityLink
                          entity={player.entity}
                          class="text-current whitespace-nowrap mr-1"
                        >
                          {player.entity.display}
                        </EntityLink>
                        {homeTeamSubOuts.includes(player.entity.display) && (
                          <SubArrow
                            class="w-4 h-4 shrink-0 rotate-180"
                            color="#ed1c24"
                          />
                        )}
                        {(() => {
                          if (homeTeamReds.includes(player.entity.display)) {
                            return <div class="w-3 h-4 bg-[#DC2626] ml-0.5" />
                          }
                          if (
                            homeTeamYellowReds.includes(player.entity.display)
                          ) {
                            return (
                              <div class="w-4 h-4 bg-yellow-300 relative ml-0.5">
                                <div class="w-3 h-4 bg-[#DC2626] absolute right-0" />
                              </div>
                            )
                          }
                          if (homeTeamYellows.includes(player.entity.display)) {
                            return <div class="w-3 h-4 bg-yellow-300 ml-0.5" />
                          }
                        })()}
                        {homeTeamGoals.includes(player.entity.display) && (
                          <Goal class="w-4 h-4 ml-0.5 shrink-0" color="#000" />
                        )}
                      </>
                    </div>
                  )),
                )}
              </div>
              <div class="flex-1">
                {awayStarters.map((positionGroup) =>
                  positionGroup.map((player) => (
                    <div class="flex flex-row-reverse items-center py-0.5">
                      <>
                        <p class="w-[19px] mx-1 text-right">
                          {player.shirtNumber}
                        </p>
                        <EntityLink
                          entity={player.entity}
                          class="text-current whitespace-nowrap ml-1"
                        >
                          {player.entity.display}
                        </EntityLink>
                        {awayTeamSubOuts.includes(player.entity.display) && (
                          <SubArrow
                            class="w-4 h-4 shrink-0 rotate-180"
                            color="#ed1c24"
                          />
                        )}
                        {(() => {
                          if (awayTeamReds.includes(player.entity.display)) {
                            return <div class="w-3 h-4 bg-[#DC2626] mr-0.5" />
                          }
                          if (
                            awayTeamYellowReds.includes(player.entity.display)
                          ) {
                            return (
                              <div class="w-4 h-4 bg-yellow-300 relative mr-0.5">
                                <div class="w-3 h-3 bg-[#DC2626] absolute right-0" />
                              </div>
                            )
                          }
                          if (awayTeamYellows.includes(player.entity.display)) {
                            return <div class="w-3 h-4 bg-yellow-300 mr-0.5" />
                          }
                        })()}
                        {awayTeamGoals.includes(player.entity.display) && (
                          <Goal class="w-4 h-4 mr-0.5 shrink-0" color="#000" />
                        )}
                      </>
                    </div>
                  )),
                )}
              </div>
            </div>
            <p class="text-[0.8rem] uppercase tracking-[0.07rem] text-center py-1.5">
              substitutes
            </p>
            <div class="flex">
              <div class="flex-1">
                {homeSubs.map((player) => (
                  <div class="flex items-center py-0.5">
                    <>
                      <p class="w-[19px] mx-1">{player.shirtNumber}</p>
                      <EntityLink
                        entity={player.entity}
                        class="text-current whitespace-nowrap mr-1"
                      >
                        {player.entity.display}
                      </EntityLink>
                      <SubArrow class="w-4 h-4 shrink-0" color="#00a14b" />
                      {(() => {
                        if (homeTeamReds.includes(player.entity.display)) {
                          return <div class="w-3 h-4 bg-[#DC2626] ml-0.5" />
                        }
                        if (
                          homeTeamYellowReds.includes(player.entity.display)
                        ) {
                          return (
                            <div class="w-4 h-4 bg-yellow-300 relative ml-0.5">
                              <div class="w-3 h-4 bg-[#DC2626] absolute right-0" />
                            </div>
                          )
                        }
                        if (homeTeamYellows.includes(player.entity.display)) {
                          return <div class="w-3 h-4 bg-yellow-300 ml-0.5" />
                        }
                      })()}
                      {homeTeamGoals.includes(player.entity.display) && (
                        <Goal class="w-4 h-4 ml-0.5 shrink-0" color="#000" />
                      )}
                    </>
                  </div>
                ))}
                {homeBench.map((player) => (
                  <div class="flex items-center py-0.5">
                    <>
                      <p class="w-[19px] mx-1">{player.shirtNumber}</p>
                      <EntityLink
                        entity={player.entity}
                        class="text-current whitespace-nowrap"
                      >
                        {player.entity.display}
                      </EntityLink>
                    </>
                  </div>
                ))}
              </div>
              <div class="flex-1">
                {awaySubs.map((player) => (
                  <div class="flex flex-row-reverse items-center py-0.5">
                    <>
                      <p class="w-[19px] mx-1 text-right">
                        {player.shirtNumber}
                      </p>
                      <EntityLink
                        entity={player.entity}
                        class="text-current whitespace-nowrap ml-1"
                      >
                        {player.entity.display}
                      </EntityLink>
                      <SubArrow class="w-4 h-4 shrink-0" color="#00a14b" />
                      {(() => {
                        if (awayTeamReds.includes(player.entity.display)) {
                          return <div class="w-3 h-4 bg-[#DC2626] mr-0.5" />
                        }
                        if (
                          awayTeamYellowReds.includes(player.entity.display)
                        ) {
                          return (
                            <div class="w-4 h-4 bg-yellow-300 relative mr-0.5">
                              <div class="w-3 h-3 bg-[#DC2626] absolute right-0" />
                            </div>
                          )
                        }
                        if (awayTeamYellows.includes(player.entity.display)) {
                          return <div class="w-3 h-4 bg-yellow-300 mr-0.5" />
                        }
                      })()}
                      {awayTeamGoals.includes(player.entity.display) && (
                        <Goal class="w-4 h-4 mr-0.5 shrink-0" color="#000" />
                      )}
                    </>
                  </div>
                ))}
                {awayBench.map((player) => (
                  <div class="flex flex-row-reverse items-center py-0.5">
                    <>
                      <p class="w-[19px] mx-1 text-right">
                        {player.shirtNumber}
                      </p>
                      <EntityLink
                        entity={player.entity}
                        class="text-current whitespace-nowrap"
                      >
                        {player.entity.display}
                      </EntityLink>
                    </>
                  </div>
                ))}
              </div>
            </div>
          </>
        )
      }
    </div>
    <div>
      <div id="stats" class="relative -top-[65px]"></div>
      <p class="font-bold text-[#b8b8b8]">Stats</p>
      <div
        class="flex justify-between bg-team-primary text-team-secondary rounded py-1"
      >
        <div class="flex items-center">
          <Image
            class="w-4 h-4 mx-1.5 object-contain"
            src={homeTeam.logoUrl}
            alt={homeTeam.abbrev}
            width={16}
            height={16}
            loading="eager"
          />
          <span class="text-[0.8rem] uppercase tracking-[0.07rem]">
            {homeTeam.abbrev}
          </span>
        </div>
        <div class="flex items-center flex-row-reverse">
          <Image
            class="w-4 h-4 mx-1.5 object-contain"
            src={awayTeam.logoUrl}
            alt={awayTeam.abbrev}
            width={16}
            height={16}
            loading="eager"
          />
          <span class="text-[0.8rem] uppercase tracking-[0.07rem]">
            {awayTeam.abbrev}
          </span>
        </div>
      </div>
      {
        homeTeamStats.possessionPercentage &&
          awayTeamStats.possessionPercentage && (
            <>
              <p class="text-center py-0.5">Possession %</p>
              <div class="flex pb-1 border-b border-[#c7c8ca] relative">
                <div
                  class="text-sm py-1.5 pl-1.5 rounded-l-full"
                  style={{
                    width: homeTeamStats.possessionPercentage + '%',
                    color: homeTeamColors.foregroundColor,
                    backgroundColor: homeTeamColors.backgroundColor,
                  }}
                >
                  {homeTeamStats.possessionPercentage + '%'}
                </div>
                <div
                  style={{
                    left: homeTeamStats.possessionPercentage + '%',
                    width: '1px',
                  }}
                  class="absolute h-full bg-white"
                />
                <div
                  class="flex-1 text-team-primary text-sm py-1.5 pr-1.5 rounded-r-full text-right"
                  style={{
                    color: awayTeamColors.foregroundColor,
                    backgroundColor: awayTeamColors.backgroundColor,
                  }}
                >
                  {awayTeamStats.possessionPercentage + '%'}
                </div>
              </div>
            </>
          )
      }

      {
        (homeTeamStats.shotsOnTarget || awayTeamStats.shotsOnTarget) && (
          <div class="flex py-0.5 border-b border-[#c7c8ca]">
            <p class="ml-1">{homeTeamStats.shotsOnTarget}</p>
            <p class="flex-1 text-center">Shots on target</p>
            <p class="mr-1">{awayTeamStats.shotsOnTarget}</p>
          </div>
        )
      }
      {
        (homeTeamStats.shots || awayTeamStats.shots) && (
          <div class="flex py-0.5 border-b border-[#c7c8ca]">
            <p class="ml-1">{homeTeamStats.shots}</p>
            <p class="flex-1 text-center">Shots</p>
            <p class="mr-1">{awayTeamStats.shots}</p>
          </div>
        )
      }
      {
        (homeTeamStats.bigChancesCreated ||
          awayTeamStats.bigChancesCreated) && (
          <div class="flex py-0.5 border-b border-[#c7c8ca]">
            <p class="ml-1">{homeTeamStats.bigChancesCreated}</p>
            <p class="flex-1 text-center">Big chances created</p>
            <p class="mr-1">{awayTeamStats.bigChancesCreated}</p>
          </div>
        )
      }
      {
        (homeTeamStats.passes || awayTeamStats.passes) && (
          <div class="flex py-0.5 border-b border-[#c7c8ca]">
            <p class="ml-1">{homeTeamStats.passes}</p>
            <p class="flex-1 text-center">Passes</p>
            <p class="mr-1">{awayTeamStats.passes}</p>
          </div>
        )
      }
      {
        (homeTeamStats.passesCompleted || awayTeamStats.passesCompleted) && (
          <div class="flex py-0.5 border-b border-[#c7c8ca]">
            <p class="ml-1">
              {Math.round(
                (homeTeamStats.passesCompleted / homeTeamStats.passes) * 1000,
              ) /
                10 +
                '%'}
            </p>
            <p class="flex-1 text-center">Pass accuracy</p>
            <p class="mr-1">
              {Math.round(
                (awayTeamStats.passesCompleted / awayTeamStats.passes) * 1000,
              ) /
                10 +
                '%'}
            </p>
          </div>
        )
      }
      {
        (homeTeamStats.touches || awayTeamStats.touches) && (
          <div class="flex py-0.5 border-b border-[#c7c8ca]">
            <p class="ml-1">{homeTeamStats.touches}</p>
            <p class="flex-1 text-center">Touches</p>
            <p class="mr-1">{awayTeamStats.touches}</p>
          </div>
        )
      }
      {
        (homeTeamStats.touchesInOpponentsBox ||
          awayTeamStats.touchesInOpponentsBox) && (
          <div class="flex py-0.5 border-b border-[#c7c8ca]">
            <p class="ml-1">{homeTeamStats.touchesInOpponentsBox}</p>
            <p class="flex-1 text-center">Touches in opp box</p>
            <p class="mr-1">{awayTeamStats.touchesInOpponentsBox}</p>
          </div>
        )
      }
      {
        (homeTeamStats.corners || awayTeamStats.corners) && (
          <div class="flex py-0.5 border-b border-[#c7c8ca]">
            <p class="ml-1">{homeTeamStats.corners}</p>
            <p class="flex-1 text-center">Corners</p>
            <p class="mr-1">{awayTeamStats.corners}</p>
          </div>
        )
      }
      {
        (homeTeamStats.tackles || awayTeamStats.tackles) && (
          <div class="flex py-0.5 border-b border-[#c7c8ca]">
            <p class="ml-1">{homeTeamStats.tackles}</p>
            <p class="flex-1 text-center">Tackles</p>
            <p class="mr-1">{awayTeamStats.tackles}</p>
          </div>
        )
      }
      {
        (homeTeamStats.clearances || awayTeamStats.clearances) && (
          <div class="flex py-0.5 border-b border-[#c7c8ca]">
            <p class="ml-1">{homeTeamStats.clearances}</p>
            <p class="flex-1 text-center">Clearances</p>
            <p class="mr-1">{awayTeamStats.clearances}</p>
          </div>
        )
      }
      {
        (homeTeamStats.saves || awayTeamStats.saves) && (
          <div class="flex py-0.5 border-b border-[#c7c8ca]">
            <p class="ml-1">{homeTeamStats.saves}</p>
            <p class="flex-1 text-center">Saves</p>
            <p class="mr-1">{awayTeamStats.saves}</p>
          </div>
        )
      }
      {
        (homeTeamStats.offsides || awayTeamStats.offsides) && (
          <div class="flex py-0.5 border-b border-[#c7c8ca]">
            <p class="ml-1">{homeTeamStats.offsides}</p>
            <p class="flex-1 text-center">Offsides</p>
            <p class="mr-1">{awayTeamStats.offsides}</p>
          </div>
        )
      }
      {
        (homeTeamStats.fouls || awayTeamStats.fouls) && (
          <div class="flex py-0.5 border-b border-[#c7c8ca]">
            <p class="ml-1">{homeTeamStats.fouls}</p>
            <p class="flex-1 text-center">Fouls</p>
            <p class="mr-1">{awayTeamStats.fouls}</p>
          </div>
        )
      }
      {
        (homeTeamStats.yellowCards || awayTeamStats.yellowCards) && (
          <div class="flex py-0.5 border-b border-[#c7c8ca]">
            <p class="ml-1">{homeTeamStats.yellowCards}</p>
            <p class="flex-1 text-center">Yellow cards</p>
            <p class="mr-1">{awayTeamStats.yellowCards}</p>
          </div>
        )
      }
      {
        (homeTeamStats.redCards || awayTeamStats.redCards) && (
          <div class="flex py-0.5 border-b border-[#c7c8ca]">
            <p class="ml-1">{homeTeamStats.redCards}</p>
            <p class="flex-1 text-center">Red cards</p>
            <p class="mr-1">{awayTeamStats.redCards}</p>
          </div>
        )
      }
      <p class="font-bold text-[#b8b8b8] mt-5">Summary</p>
      <p>{summary}</p>
    </div>
  </div>
</div>

<script>
  document.addEventListener('astro:page-load', () => {
    const container = document.querySelector('[data-hash-links]')
    if (container) {
      container.querySelectorAll('a').forEach((anchor) => {
        anchor.addEventListener('click', () => {
          container
            .querySelectorAll('a')
            .forEach((x) => x.classList.remove('text-team-primary'))
          anchor.classList.add('text-team-primary')
        })
      })
    }
  })
</script>
